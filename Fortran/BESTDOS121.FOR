C  BESTDOS121.FOR                                          6/10/16

C  BESTDOS121 HAS THE FOLLOWING CHANGES FROM BESTDOS120:

C  THIS PROGRAM IS NOW COMPATIBLE WITH THE NEW "DENSITY OCT_15"
C  DENSITY FILE MADE BY THE NEW NPAG PROGRAM (NPAG120.FOR/npagranfix6.f)
C  WHICH HAS NRANFIX PARAMETERS. 

C  THE CHANGES NECESSARY ARE IN READING IN THE POTENTIAL NRANFIX 
C  PARAMETER NAMES AND VALUES IN THE NPAGDENFILE. THEN THESE VALUES,
C  WHICH WERE ESTIMATED IN THE ORIGINAL NPAG RUN, ARE TREATED JUST THE 
C  SAME AS THE FIXED PARAMETER VALUES WHICH FIXED IN THE NPAG RUN.

C-----------------------------------------------------------------------

C  BESTDOS120.FOR                                          2/19/16

C  BESTDOS120 HAS ONE SMALL CHANGE FROM BESTDOS119. IN THE CODE BELOW 
C  FORMAT 8133 IN MAIN, THE CONTINGENCY ON IPRIOR IS REMOVED. THIS 
C  SHOULD HAVE BEEN DONE IN BESTDOS105.FOR, WHEN IPRIOR WAS NO LONGER
C  READ IN, BUT THE EFFECT WAS THE SAME SINCE IF IPRIOR = 0 (WHICH IS
C  THE DEFAULT FOR NON-INITIALIZED VARIABLES IN MOST COMPILERS), IERRMOD
C  IS WRITTEN TO FILE 24 AS IT SHOULD BE. BUT BECAUSE SOME OPERATING 
C  SYSTEMS/COMPILERS MAY ASSIGN RANDOM NOS. TO VARIABLES WHICH ARE NOT
C  INITIALIZED, IT IS POSSIBLE THAT IPRIOR COULD BE SET TO SOMETHING
C  NON-0, WHICH WOULD MEAN THAT IERRMOD WOULD NOT BE WRITTEN TO FILE 24.
C  SO THIS CHANGE WILL REMOVE THAT POSSIBLE BUG. NOTE THAT IPRIOR IS 
C  ALSO REMOVED AS A CALLING ARGUMENT TO SUBROUTINE VERIF1.

C-----------------------------------------------------------------------

C  BESTDOS119.FOR                                          7/7/14

C  BESTDOS119 HAS THE FOLLOWING CHANGES FROM BESTDOS118:

C  1. THIS PROGRAM NOW ALLOWS STEADY STATE DOSING IN THE "PAST" (NOT
C  THE FUTURE). THIS REQUIRES:

C  MODULE IDM1X14.FOR IS UPDATED TO IDM1X15.FOR, WHICH HAS JUST A
C  COUPLE OF SMALL CHANGES FROM IDM1X15.F (WHICH IS ALREADY USED IN THE
C  NPAG "ENGINE").

C  MODULE IDM3X141.FOR IS UPDATED TO IDM3X151.FOR, WHICH IS 
C  SIMILAR TO IDM3X15.F (WHICH IS ALREADY USED IN THE NPAG "ENGINE"),
C  BUT WITH THE CHANGE THAT IDM3X141.FOR MADE TO IDM3X14.FOR,
C  (DIMENSIONS OF 71281 CHANGED TO 72000).

C  MODULE CALCBST14.FOR IS UPDATED TO CALCBST15.FOR.

C  MODULE NPAGFULL.FOR IS UPDATED TO BE NPAGFULLA.FOR.

C  MODULE NPAGFULL11.FOR IS UPDATED TO BE NPAGFULLA11.FOR.

C  FORMAT 1416 IS EDITED TO INDICATE THAT STEADY STATE DOSE SETS AT THE
C  BEGINNING OF THE PATIENT FILE ARE ALLOWED. BUT NOT DOSE OR TIME
C  RESETS. AND A NEW CHECK IS PUT IN SUBROUTINE READBLOCK2 TO DISALLOW
C  IDEVENT = 4 (DOSE RESETS).

C  NOTE THAT SUBROUTINE CALCTPRED IS MODIFIED TO REALLOW STEADY STATE
C  DOSE SETS (THE CODE TO ALLOW THESE SETS WAS REMOVED AS OF 
C  BESTDOS109.FOR). AND THE SAME IS TRUE FOR SUBROUTINE CALCTPRED2.


C  2. JUST BEFORE THE FIRST CALL FILRED(..) STATEMENT, SUBROUTINE
C  NEWWORK1 IS CALLED TO READ THE PATIENT DATA FROM FILE 27, AND 
C  CONVERT IT TO PATIENT DATA ON FILE 37, WITH EACH STEADY STATE DOSE
C  INDICATOR RESULTING IN AN EXTRA 100 DOSE SETS (WITH THE NEGATIVE DOSE
C  TIME LEFT IN - SEE COMMENTS BELOW).NOTE THAT THIS SUBROUTINE NEWWORK1
C  IS THE SAME AS IN THE CURRENT NPAG "ENGINE" MODULE, npageng25.f,
C  EXCEPT IT READS FILE 27 AND WRITES TO FILE 37, RATHER THAN READING
C  FROM FILE 23 AND WRITING TO FILE 27; ARRAY TIMOBREL IS NOT
C  ESTABLISHED IN NEWWORK1, AND NOT PASSED AS AN ARGUMENT (IT IS NOT
C  NEEDED IN THIS PROGRAM); MAXSUB IS ALSO NOT PASSED AS AN 
C  ARGUMENT (IT IS NOT NEEDED); NSUB IS NOT PASSED AS AN ARGUMENT (IT
C  IS NOT NEEDED); AND COMMON/DOSEOBS AND THE ARRAYS IN IT ARE DELETED
C  (THEY ARE NOT NEEDED).

C  NOTE THAT THIS NEWWORK1 ROUTINE IS INCLUDED IN THE NPAGFULLA.FOR
C  MODULE, AS IS SUBROUTINE ORDERDELTA.


C  3. SUBROUTINE MAKETMP NOW RETURNS ND42 RATHER THAN ND41. THE REASON
C  IS THAT IF THE PATIENT FILE HAS STEADY STATE DOSING, ND41 WILL
C  CHANGE AFTER NEW SUBROUTINE NEWWORK1 (SEE CHANGE 2. ABOVE) IS CALLED
C  (I.E., THERE WILL BE A LOT MORE DOSES IN THE "PAST"), BUT ND42 WILL
C  NOT (THERE ARE NO STEADY STATE DOSES IN THE "FUTURE").
C  SO ND41 AND NDD41 ARE NOW ESTABLISHED AFTER NEWWORK1 IS CALLED,
C  IN THE CASE THAT INCLUDPAST = 1.


C  4. SUBROUTINE FILRED IS CHANGED TO READ FILE 37, RATHER THAN 
C  FILE 27. 


C  5. IF THE PROGRAM BOMBS, THE MESSAGE THAT IS WRITTEN TO THE SCREEN
C  WILL NOW ALSO BE WRITTEN TO THE FILE ERRFIL = ERRORxxxx, WHERE xxxx
C  IS THE 4-DIGIT RUN NO. IN THIS WAY, IF THE PROGRAM IS BEING RUN USING
C  Pmetrics, THE Pmetrics PROGRAM CAN RESPOND APPROPRIATELY. NOTE THAT
C  ERRFIL IS PASSED TO ALL THE ROUTINES WHICH COULD WRITE TO IT
C  USING COMMON/ERROR/ERRFIL.

C  NOTE THAT CODE TO READ extnum TO GET THE 4-DIGIT JOB NUMBER IS
C  ADDED ALSO TO THE 'GUICMDS.INX' CODE, JUST AFTER PATH IS READ IN,
C  BECAUSE ERRFIL MAY HAVE TO BE WRITTEN TO DURING THAT PART OF THE
C  CODE ALSO.


C  6. THE MAXIMUM NO. OF OUTPUT EQUATIONS WILL BE CHANGED FROM 6 TO 7,
C  AND TO FACILITATE ANY FUTURE SUCH CHANGES, THIS NUMBER WILL BE SET
C  = MAXNUMEQ (SO ONLY THE PARAMETER STATEMENT WILL HAVE TO BE CHANGED
C  IN THE FUTURE). RATHER THAN PASS MAXNUMEQ TO ALL THE RELEVANT 
C  SUBROUTINES (AS IS DONE IN NPAG113.FOR AND IT2B110.FOR), THIS 
C  PROGRAM WILL JUST HAVE MAXNUMEQ SET IN A PARAMETER STATEMENT IN ALL
C  THESE ROUTINES. AND NOTE THAT IN THOSE SUBROUTINES, ANY 6
C  REFERRING TO THE MAX. NO. OF OUTPUT EQUATIONS WILL BE CHANGED TO
C  MAXNUMEQ.


C  7.  SUBROUTINE DETECT, AND THE ROUTINES IT CALLS, ARE REMOVED FROM
C  THE CODE. NOTE IN THE COMMENTS TO BESTDOS8.FOR, DETECT AND THE 
C  ROUTINE IT CALLED WERE NO LONGER NEEDED, BUT WERE LEFT IN THIS FILE
C  IN CASE THEY WERE NEEDED IN THE FUTURE. BUT IF THAT SHOULD OCCUR,
C  THESE ROUTINES CAN BE COPIED BACK IN FROM PROGRAM BESTDOS118.FOR.


C  8. A BUG IS FIXED IN SUBROUTINE WSUMSQ IN NEW MODULE CALCBST15.FOR.
C  IT WAS IN THE IF(ITARGET .EQ. 2) PORTION OF THE CODE. AUC IS NO
C  LONGER SET BACK TO 0 IF TPRED(I) = TNEXT ... SINCE AUCs ARE 
C  CUMULATIVE FROM TIME 0 IN THE "PAST", AS OF BESTDOS118.FOR. THIS
C  BUG EXISTED ONLY IN BESTDOS118.FOR.


C  9. SUBROUTINE PUTORDER2 IS REMOVED; INSTEAD SUBROUTINE CALCTPRED2
C  WILL CALL PUTORDER, WHICH HAS THE SAME CODE (AT ONE POINT, THESE
C  TWO ROUTINES HAD A DIFFERENT DIMENSION FOR XX, BUT THIS IS NO
C  LONGER TRUE; AND SO PUTORDER2 BECAME REDUNDANT). 


C  10. ALL REFERENCES TO THE TEMPLATE MODEL FILE TSTMULTK.FOR ARE
C  REPLACED BY TSTMULTM.FOR.

C-----------------------------------------------------------------------

C  BESTDOS118.FOR                                          11/13/13


C  BESTDOS118 HAS THE FOLLOWING CHANGE TO BESTDOS117:

C  THE CODE IN MAIN CHANGES SO THAT THE AUCs WRITTEN TO DOSEROUTxxxx 
C  WILL BE CUMULATIVE AUCs FROM TIME 0 IN THE "PAST", RATHER THAN BE
C  RESET TO 0 AT TNEXT (= TIME 0 IN THE "FUTURE"). BUT NOTE THAT THE
C  CODE IN WSUMSQ (IN CALCBST14.FOR) IS UNCHANGED, SO THAT AUCs IN THE
C  "FUTURE" ARE STILL ASSUMED TO BE RELATIVE TO THE BEGINNING OF THE 
C  "FUTURE", AND ARE RESET TO 0 AT TIME TNEXT.

C-----------------------------------------------------------------------

C  BESTDOS117.FOR                                          11/4/13

C  BESTDOS117 HAS THE FOLLOWING CHANGES TO BESTDOS116:

C  1. IT HAS A BUG FIX TO BESTDOS116. BELOW THE 2ND CALL TO ELDERY,
C  JUST ABOVE WHERE THE DOSEROUTxxxx FILE IS ESTABLISHED, FILE 27 IS
C  REWOUND AND FILRED IS CALLED AGAIN. THIS IS DONE TO RE-ESTABLISH THE
C  ORIGINAL DOSE VALUES INTO THE RS(.,.) ARRAY. THE REASON IS THAT 
C  ELDERY CALLS CALCS, WHICH CALLS WSUMSQ, WHICH SETS THE RS(.,.) VALUES
C  TO THE CURRENT CANDIDATES SUPPLIED BY ELDERY. AND IF THESE VALUES 
C  HAPPEN TO BE SET = 0, THEN THE CODE TO WRITE OUT THE OPTIMAL DOSES
C  IN MAIN (WHICH DEPEND ON RS(I,2*J-1) OR RS(I,2*J) BEING > 0 TO 
C  IDENTIFY AN IV OR A BOLUS, RESPECTIVELY) WILL NOT BE ENGAGED. AND
C  THEN THE #OPTIMAL DOSES LINE WILL BE FOLLOWED BY NO DOSES AT ALL.
C  IN ADDITION, THE CODE TO ESTABLISH THE BEST DOSES INTO RS(.,.) FOR
C  THE PURPOSE OF WRITING THE PREDICTED VALUES FOR THESE BEST DOSES,
C  FOR EACH GRID PT. IN THE PARAMETER DENSITY, WILL NOT BE ENGAGED
C  EITHER.

C  2. THE NAME "XLAM" IS CHANGED TO BIASWEIGHT TO REMOVE ANY
C  CONFUSION WITH LAMBDA, WHICH IS A TERM USED IN THE ASSAY ERROR
C  FUNCTION. SIMILARLY, IN THE OUTPUT FILE, "LAMDA" IS CHANGED TO
C  "BIASWEIGHT".

C  3. THE SAME "XLAM" TO "BIASWEIGHT" CHANGE IS MADE IN THE NEW
C  CALCBST14.FOR (WHICH REPLACES CALCBST13.FOR).


C-----------------------------------------------------------------------

C  BESTDOS116.FOR                                          10/16/13

C  BESTDOS116 HAS THE FOLLOWING CHANGES TO BESTDOS115:

C  IF THE USER SELECTS ITARGET = 2 (SEE BELOW), THE AUCs NOW WILL BE
C  RELATIVE TO TIME 0 IN THE "FUTURE", AS OPPOSED TO TIME 0 IN THE
C  "PAST".

C  THIS REQUIRES CHANGES IN THE CODE IN MAIN, AND IN SUBROUTINE 
C  WSUMSQ. IN EACH CASE, THE AUC AT TIME TNEXT (WHICH IS THE BEGINNING
C  TIME FOR THE "FUTURE") IS RESET BACK TO 0.

C  NOTE ALSO THAT TNEXT IS NOW INCLUDED IN COMMON/TOSUMSQ, SO THAT
C  IT CAN BE ADDED TO THE TIMES WHICH ARE ESTABLISHED BY ROUTINES
C  CALCTPRED AND CALCTPRED2.

C  NOTE THAT THIS PROGRAM IS NOW LINKED WITH CALCBST13.FOR, WHICH IS
C  UPDATED FROM CALCBST12.FOR.

C-----------------------------------------------------------------------

C  BESTDOS115.FOR                                          10/6/13

C  BESTDOS115 HAS THE FOLLOWING CHANGES TO BESTDOS114:

C  1. IN ADDITION TO USING CONCENTRATIONS (OBSERVED VALUES) AS TARGETS,
C  NOW THE USER WILL BE ABLE TO TARGET AUCs ALSO.

C  THIS WILL REQUIRE A NEW INPUT VALUE, ITARGET. IF ITARGET = 1, THE
C  TARGETS WILL BE CONCENTRATIONS, AS THEY HAVE BEEN IN PREVIOUS 
C  PROGRAMS. IF ITARGET = 2, THE TARGETS WILL BE AUCs. NOTE THAT EVEN IF
C  THE TARGETS ARE AUCs, THESE VALUES WILL STILL BE READ IN BY THE 
C  PROGRAM IN THE SAME LOCATIONS (AS IF THEY WERE CONCENTRATIONS IN THE
C  PATIENT DATA FILE).

C  BECAUSE THE INSTRUCTION FILE WILL HAVE THE ADDITIONAL ITARGET ENTRY,
C  IT WILL ALSO HAVE A NEW CODE, BESTDOS OCT_13.

C  2. THERE WILL BE EXTENSIVE CHANGES IN SUBROUTINES CALCS AND WSUMSQ
C  IN CALCBST12.FOR (UPDATED FROM CALCBST11.FOR). ALSO, THIS MODULE
C  HAS NEW SUBOUTINES CALCTPRED2 AND PUTORDER2.

C  3. NOTE THAT ARRAYS WEIGHT, PREDMIN2, DENSITY2, AND DOSEBEST2
C  HAVE BEEN REMOVED. WEIGHT WAS NOT NEEDED AFTER BESTDOS114.FOR,
C  AND THE OTHER 3 ARRAYS WERE NEVER NEEDED.

C  4. TO MAKE DIMENSIONS CONSISTENT, ALL 24000'S HAVE BEEN CHANGED TO
C  72000'S. AND ALL 71281'S HAVE BEEN CHANGED TO 72000 ALSO (THIS HAS
C  ALSO BEEN DONE IN CALCBST12.FOR). SIMILARLY, ALL 7200'S HAVE BEEN
C  CHANGED TO 72000'S. THE REASON TO LIMIT NUMT IN CALCTPRED TO 7200
C  WAS A HOLDOVER FROM THE npageng24.f PROGRAM, AND IS NOT APPLICABLE
C  IN THIS PROGRAM.

C  5. THIS PROGRAM IS NOW LINKED WITH IDM3X141.FOR, UPDATED FROM

C  DM3X14.FOR. THE DIFFERENCE IS THAT THE NEW MODULE HAS ALL ITS
C  71281 DIMENSIONS CHANGED TO 72000, TO BE COMPATIBLE WITH CHANGE
C  4. ABOVE.

C  6. NOTE THAT XLAM HAS BEEN MOVED IN FRONT OF THE INTEGER ARGUMENTS
C  IN COMMON/TOCALC TO AVOID A WARNING WHEN THIS PROGRAM IS COMPILED
C  WITH gfortran.

C-----------------------------------------------------------------------

C  BESTDOS114.FOR                                          9/27/13


C  BESTDOS114 HAS THE FOLLOWING CHANGES TO BESTDOS113:

C  1. IT WILL NOW BE COMPILED WITH CALCBST11.FOR, UPDATED FROM 
C  CALCBST10.FOR. THE MAIN CHANGE IN SUBROUTINE CALCS IS THAT THE
C  COST FUNCTION WILL NOW INVOLVE THE OLD COST FUNCTION (MEAN SQUARED
C  ERROR), PLUS A NEW BIAS TERM. THESE TWO TERMS WILL BE WEIGHTED BY
C  XLAM (USER SPECIFIED) WHICH WILL MULTIPLY THE BIAS TERM (AND 1-XLAM)
C  WILL MULTIPLY THE MEAN SQUARED ERROR TERM.

C  NOTE THAT SINCE THE USER NOW ENTERS XLAM, THERE WILL BE A NEW
C  INSTRUCTION FILE, WITH A NEW CODE, BESTDOS SEP_13. AND NOTE THAT
C  XLAM IS PROVIDED TO SUBROUTINE CALCS VIA COMMON/TOCALC.

C  NOTE THAT BOTH TERMS IN THE COST FUNCTION ARE NOW ALSO WRITTEN INTO
C  DOSEROUTxxxx.

C  2. THE MEAN SQUARED ERROR TERM WILL HAVE WEIGHT(.,.) REMOVED FROM
C  IT. I.E., COST FUNCTION WILL NO LONGER BE A FUNCTION OF THE ASSAY
C  COEFFICIENTS. SO WEIGHT IS NOW REMOVED FROM COMMON/TOCALC.

C  3. INSTEAD OF CALCULATING THE WEIGHTED MEAN OF THE GRID PTS. AND
C  CALCULATING THE Y's AND AUC's FOR THAT SINGLE GRID PT., AS THE LAST
C  PART TO BE PUT INTO DOSEROUTxxxx, NOW THE WEIGHTED MEAN OF THE
C  Y's AND AUC's OVER ALL THE GRID PTS. WILL BE PUT INTO DOSEROUTxxxx.
C  THIS IS MORE CONSISTENT WITH THE BIAS TERM CALCULATED IN SUBROUTINE
C  CALCS.

C-----------------------------------------------------------------------

C  BESTDOS113.FOR                                          8/26/13 

C  BESTDOS113 COMBINES THE CHANGE OF BESTDOS112A WITH THE ORIGINAL
C  BESTDOS112. IN PARTICULAR, THIS PROGRAM WILL CALL SUBROUTINE ELDERY
C  TWICE, ONCE WITH ALL THE POSTERIOR GRID PTS. HAVING EQUAL 
C  PROBABILITY (AS IN BESTDOS112), AND ONCE WITH THE POSTERIOR GRID PTS.
C  HAVING THEIR VALUES FROM THE 0-CYCLE RUN IN NPAGFULL1. THEN, THE
C  ELDERY CALL WHICH PRODUCES THE MIN SUM OF SQUARES WILL BE USED TO
C  ESTABLISH THE BEST DOSES.

C  REF: SEE THE EXAMPLE WITH MODEL3.FOR (COMMENTS UNDER 9.) IN
C  \ALAN3\BAYARD\SIMSTUDY\SIMSTUDY.EXP.

C-----------------------------------------------------------------------


C  BESTDOS112A.FOR                                         8/18/13

C  BESTDOS112A HAS ONE CHANGE TO BESTDOS112. AFTER THE RETURN FROM
C  SUBROUTINE NPAGFULL, CORDEN(.,NVAR+1) IS NOT RESET. IT WILL NOW
C  RETAIN ITS VALUE FROM WHAT IT WAS ON RETURN FROM NPAGFULL1. THE
C  REASON IS THAT THE DENSITY VALUES FROM NPAGFULL1 ACCURATELY REFLECT
C  HOW IMPORTANT EACH DAUGHTER PT. SHOULD BE IN THE CALL TO ELDERY
C  (THE WAY IT WAS DONE IN BESTDOS112.FOR, ALL THE GRID PTS. ENDED
C  UP WITH EQUAL PROBABILITY).

C-----------------------------------------------------------------------

C  BESTDOS112.FOR                                         8/6/13

C  BESTDOS112 HAS THE FOLLOWING CHANGES TO BESTDOS111.

C  IT HAS AN EXTENDED PROCESS TO OBTAIN THE POSTERIOR DENSITY TO MAKE IT
C  MORE LIKELY THAT THERE WILL BE MORE THAN 1 PT. IN IT. INSTEAD OF
C  JUST CALLING NPAGFULL, WHICH ALWAYS RETURNS THE SINGLE BEST POINT
C  WHICH IS COMPATIBLE WITH THE "PAST", THIS PROGRAM DOES A 2-STEP
C  PROCESS:

C  1. IT CALLS NPAGFULL11, WHICH RETURNS ALL GRID PTS. FROM THE 
C  ORIGINAL PRIOR DENSITY WHICH ARE ARE REASONABLY COMPATIBLE WITH THE
C  "PAST" (I.E., THOSE WHOSE PROBABILITIES ARE WITHIN 1.D-100 OF THE
C  BEST GRID PT.).

C  2. FOR EACH OF THE GRID PTS. IN 1., IT CALLS NPAGFULL TO OBTAIN
C  THE SINGLE DAUGHTER PT. WHICH IS BEST. 

C  THE RESULT THEN WILL BE A POSTERIOR CONSISTING OF THE BEST DAUGHTER
C  POINT FOR EVERY GRID PT. WHICH SHOWED UP IN STEP 1.

C-----------------------------------------------------------------------

C  BESTDOS111.FOR                                          5/23/13

C  BESTDOS111 HAS THE FOLLOWING CHANGES TO BESTDOS110:

C  1. IT GIVES THE USER THE OPTION OF NOT CALCULATING THE BEST DOSES
C  TO MINIMIZE THE EXPECTED WEIGHTED SUM OF SQUARES OF DIFFERENCES
C  BETWEEN OBSERVED AND TARGET CONCENTRATIONS, AND INSTEAD SIMPLY USING
C  THE DOSES INCLUDED IN THE "FUTURE" FILE. I.E., WHEN ELDERY IS CALLED,
C  THE DOSES IN THE "FUTURE" FILE ARE INITIAL GUESSES FOR THE DOSES TO 
C  BE USED BY ELDERY IN ITS OPTIMIZATION. BUT IF THE STEP(.) VALUES ARE
C  SET = 0, THERE WILL BE NO OPTIMIZATION, AND THE STARTING DOSES WILL
C  BE THE DESIRED DOSES TO BE USED.

C  2. ADDITONAL INFORMATION IS ADDED TO THE DOSEROUTxxxx OUTPUT FILE.
C  THE PARAMETER VALUES FOR EACH OF THE GRID POINTS USED FOR THE
C  CALCULATION OF THE OBSERVED VALUES IS NOW INCLUDED.`

C  3. IN SUBROUTINE AFTERCOMMA, OPEN(57) IS REPLACED BY 
C  OPEN(57, FILE='FILE57JUNK'). THE REASON IS THAT WHEN THIS PROGRAM IS
C  COMPILED/LINKED  WITH gfortran, IT RANDOMLY PRODUCES AN ERROR RELATED
C  TO BEING UNABLE TO OPEN FILE 57. OPENING 57 AS A NAMED FILE MAY

C  REDUCE OR ELIMINATE THIS ERROR.


C-----------------------------------------------------------------------

C  BESTDOS110.FOR                                          5/14/13

C  BESTDOS110 HAS ONE CHANGE FROM BESTDOS109. IN BESTDOS109, THE BLOCK

C  OF PREDICTED (SIMULATED) VALUES AND AUCs INCLUDED ALL THE DOSE
C  AND OBSERVATION TIMES THAT WERE IN BOTHFILES.ZPJ (IF THERE WAS A 
C  "PAST" HISTORY), OR THE DOSE AND OBSERVATION TIMES IN THE "FUTURE"
C  IF THERE WAS NO PAST HISTORY. EITHER WAY, THE OBSERVATION TIMES OF
C  THE "PAST" WERE NOT INCLUDED. IN BESTDOS110, HOWEVER, THE 
C  OBSERVATION TIMES FROM THE "PAST" WILL ALSO BE INCLUDED IN THE 
C  SIMULATED VALUES. THIS REQUIRED CHANGES IN MAIN, MAKETMP, AND
C  CALCTPRED, WHERE VALUES FOR M41 (AND TIM41(.)) ARE NOW SHARED.

C-----------------------------------------------------------------------

C  BESTDOS109.FOR                                          5/12/13

C  BESTDOS109 HAS THE FOLLOWING CHANGE TO BESTDOS108:

C  IN EACH BLOCK OF PREDICTED VALUES AND AUCs WHICH ARE WRITTEN TO THE
C  OUTPUT FILE, DOSEROUTxxxx, EXTRA LINES OF DATA ARE ADDED AS NEEDED TO
C  MAKE SURE THAT THE TIMES INCLUDE ALL OBSERVATION TIMES AND ALL DOSE
C  TIMES. LOTS OF CODE CHANGES ARE MADE IN SUBROUTINE CALCTPRED, AND
C  IN MAIN WHERE THESE VALUES ARE WRITTEN TO THE OUTPUT FILE.

C  NOTE THAT ALL THE CODE RELATED TO STEADY STATE DOSE SETS, AND TIME
C  RESETS HAS NOW BEEN REMOVED FROM THIS PROGRAM.


C-----------------------------------------------------------------------

C  BESTDOS108.FOR                                          4/24/13

C  BESTDOS108 HAS THE FOLLOWING CHANGES TO BESTDOS107:

C  1. CORDLAST IS DIMENSIONED AS AN ARRAY IN THIS MODULE. SINCE IT IS AN
C  ARGUMENT TO NPAGFULL, WHERE IT IS DIMENSIONED, IT SHOULD ALSO BE
C  DIMENSIONED IN THIS MODULE. SINCE NO INFORMATION IS PASSED BETWEEN
C  THE TWO MODULES (IT IS ONLY PASSED AS AN ARGUMENT SO IT CAN BE
C  VARIABLY DIMENSIONED0, THIS OVERSIGHT DID NOT CAUSE A PROBLEM WHEN
C  THIS PROGRAM WAS COMPILED/LINKED BY LAHEY FORTRAN; BUT IT DOES CAUSE
C  A PROBLEM WHEN gfortran COMPILES/LINKS THIS PROGRAM.

C  2. TWO CALLS TO READBLOCK2 IN SUBROUTINE VERIF1 HAVE BEEN CHANGED TO
C  HAVE ARGS. OF C0P,...,C3P, RATHER THAN C0,...,C3 BECAUSE THESE 
C  ARGUMENTS ARE SUPPOSED TO BE ARRAYS. THE ACTUAL VALUES SUPPLIED TO
C  READBLOCK2 AT THIS POINT ARE UNIMPORTANT, BUT MAKING THE ARGUMENTS
C  ARRAYS REMOVES A WARNING WHEN THIS PROGRAM IS COMPILED BY gfortran.

C  3. TWO CALLS TO STACK IN MAIN USE TMPFILE AS AN ARGUMENT, BUT TMPFILE
C  IS *13 RATHER THAN *20, WHICH IS THE SIZE OF THE RECEIVING ARGUMENT.

C  SO PATFIL*20 IS ADDED TO THIS MAIN MODULE, SET = TMPFILE BEFORE THE
C  CALLS TO STACK, AND REPLACES TMPFILE AS THE ARGUMENT IN THE CALLS TO
C  SUBROUTINE STACK.

C-----------------------------------------------------------------------

C  BESTDOS107.FOR                                          4/7/13

C  BESTDOS107 HAS THE FOLLOWING CHANGES FROM BESTDOS106:

C  THE OUTPUT FILE WILL INCLUDE MORE INFORMATION. FOR EACH GRID PT.
C  IN THE PARAMETER DENSITY, NOT ONLY WILL ALL THE TARGET OBSERVATIONS
C  BE WRITTEN (AS IN PREVIOUS PROGRAMS), BUT ALSO ALL OBSERVATIONS WILL
C  BE WRITTEN EVERY IDELTA MINUTES (IDELTA = 15 BY DEFAULT, BUT CAN BE
C  CHANGED BY THE USER); AND THE SAME APPLIES TO AUCs. AND, THESE SAME
C  VALUES WILL BE WRITTEN FOR THE WEIGHTED MEAN OVER ALL THE GRID POINTS
C  IN THE PARAMETER DENSITY.

C  THIS MEANS THAT idm3x14.f WILL NOW BE LINKED TO THIS PROGRAM SO THAT
C  SUBROUTINE IDCALCYY AN BE CALLED JUST AS IT IS IN npageng22.f TO
C  FIND PREDICTED VALUES IDELTA MINUTES APART.

C  NOTE THAT FORMAT 1416 IN MAIN IS ADDED TO WARN THE USER THAT THIS
C  PROGRAM IS NOT COMPATIBLE WITH STEADY STATE DOSE SETS OR TIME
C  RESETS.

C-----------------------------------------------------------------------

C  BESTDOS106.FOR                                          3/26/13

C  BESTDOS106 HAS THE FOLLOWING CHANGES FROM BESTDOS105:

C  1. RATHER THAN BEING LINKED WITH NPAGBAY.FOR, IT WILL BE LINKED WITH
C  NPAGFULL.FOR. THE DIFFERENCE IN THE TWO ROUTINES IS THAT, GIVEN THE
C  INPUT DENSITY IN NPAGDENFILE, NPAGBAY CALCULATES THE 0-CYCLE 
C  BAYESIAN POSTERIOR OF A SUBJECT, WHEREAS NPAGFULL CALCULATES THE FULL
C  POSTERIOR OF THE SUBJECT, UP TO A MAXIMUM OF MAXCYC CYCLES.

C  NOTE THAT IN ADDITION TO NPAGFULL.FOR, THIS PROGRAM WILL BE LINKED
C  WITH BLASNPAG.FOR (WHICH IS NEEDED BY NPAGFULL.FOR) ... AND SEE 
C  OTHER MODULES BELOW.

C  2. THIS PROGRAM HAS BEEN BROUGHT UP TO THE LEVEL OF THE OTHER 
C  POPULATION PROGRAMS (CURRENTLY NPAG110.FOR/npageng22.f AND
C  IT2B108.FOR/it2beng22.f), EXCEPT IT STILL DOES NOT ACCOMMODATE
C  STEADY STATE DOSES.

C  IN PARTICULAR THIS PROGRAM WILL BE LINKED WITH IDM1X14.FOR, RATHER
C  THAN IDM1X6.FOR, SHIFT9.FOR, RATHER THAN SHIFT6.FOR; AND

C  CALCBST10.FOR, RATHER THAN CALCBST9.FOR.


C  NOTE THAT USERS SHOULD START USING TSTMULTK.FOR RATHER THAN 
C  TSTMULTI.FOR. SEVERAL FORMATS IN THE PROGRAM IN MAIN AND VERIF1
C  NOW REFER TO TSTMULTK.FOR RATHER THAN TSTMULTI.FOR.

C  ALSO ALL DIMENSIONS OF 500 RELATED TO DOSES HAVE BEEN CHANGED TO
C  5000.

C  3. A BUG IS CORRECTED IN SUBROUTINE CSVCHANGE. PREVIOUSLY, IF A .CSV
C  FILE HAD AN IDEVENT = 4 WITH IADDL > 0 (I.E., REPEATED DOSES STARTING

C  WITH A DOSE RESET EVENT), CSVCHANGE WOULD IMPROPERLY WRITE IADDL
C  REPEATED DOSE LINES TO FILE 66 ALL WITH IDEVENT = 4. IN FACT, THESE
C  REPEATED LINES MUST, OF COURSE, HAVE IDEVENT = 1 (SINCE THEY ARE
C  REGULAR DOSE LINES, NOT MORE DOSE RESET LINES).



C  SUMMARY: THIS PROGRAM WILL BE LINKED WITH NPAGFULL.FOR, BLASNPAG.FOR,
C  CALCBST10.FOR, SHIFT9.FOR, IDM1X14.FOR, AND THE DESIRED MODEL FILE.

C-----------------------------------------------------------------------

C  BESTDOS105.FOR                                          3/2/13

C  BESTDOS105 HAS THE FOLLOWING CHANGES FROM BESTDOS104:

C  IN BESTDOS104, IPRIOR WAS 1 (WHICH MEANS THAT THE USER HAD A .MM
C  FILE TO BE USED DIRECTLY AS THE DENSITY FOR THE OPTIMIZATION) OR
C  IPRIOR = 0 (WHICH MEANS THAT THE USER STARTED WITH A JOINT DENSITY 
C  FROM A PREVIOUS NPAG RUN, DENxxxx, ALONG WITH A FILE GIVING INFO
C  FROM A SUBJECT'S PAST, PASTFILEIN; AND THEN SUBROUTINE NPAGBAY WOULD
C  BE CALLED TO OBTAIN THE BAYESIAN POSTERIOR OF THE NEW PATIENT, WHICH
C  IS THEN THE DENSITY FOR THE OPTIMIZATION). SEE BESTDOS101.FOR NOTES.
C  IN EITHER CASE, THE PROGRAM WOULD THEN OPTIMIZE THE DOSES TO GIVE
C  THE OBSERVED VALUES (AS CLOSELY AS POSSIBLE) IN THE FILE,
C  FUTUREFILEIN.

C  IN BESTDOS105, IPRIOR WILL NO LONGER BE USED BECAUSE THERE WILL NO
C  LONGER BE AN IPRIOR = 1 OPTION (I.E., THE USER WILL NEVER START WITH 
C  A DENSITY READY TO USE FOR THE OPTIMIZATION; INSTEAD HE WILL ALWAYS
C  START WITH A DENxxxx FILE FROM AN NPAG RUN ON A POPULATION). BUT WHAT
C  WAS THE OLD IPRIOR = 0 OPTION, WILL BE CHANGED AND EXPANDED TO ALLOW
C  THE FOLLOWING 3 CASES:

C  a. THE USER WILL HAVE A "PAST" FILE (PASTFILEIN) AND IT WILL CONTAIN
C     DOSES AND OBSERVATIONS FROM THE PATIENT'S PAST.
C  b. THE USER WILL HAVE A "PAST" FILE (PASTFILEIN) BUT IT WILL ONLY
C     CONTAIN DOSES (I.E., NO OBSERVATIONS) FROM THE PATIENT'S PAST.
C  c. THE USER WILL NOT HAVE A "PAST" FILE (PASTFILEIN). NOTE THAT IN
C     THIS CASE, INCLUDPAST (A NEW PARAMETER) WILL BE 0.

C  IN CASE a., THE PROGRAM WILL RUN SIMILARLY TO BESTDOS104 - IT WILL
C  USE SUBROUTINE NPAGBAY TO OBTAIN THE BAYESIAN POSTERIOR DENSITY FOR
C  THE PATIENT BASED ON DENxxxx AND PASTFILEIN, AND THIS DENSITY WILL
C  BE THE ONE USED FOR THE OPTIMIZATION. IN CASES b. AND c., DENxxxx
C  WILL NOT BE UPDATED (SINCE THERE ARE NO "PAST" OBSERVATIONS FOR THE
C  PATIENT), BUT WILL ITSELF BE THE DENSITY USED FOR THE OPTIMIZATION.

C  NOTE THAT IN CASE c., THE LOGIC WILL PROCEED SIMILAR TO THE 

C  IPRIOR = 1 CODE IN BESTDOS104; I.E., THE DENSITY TO BE USED FOR THE
C  OPTIMIZATION WILL BE READ FROM DENxxxx AND THEN THE OPTIMIZATION WILL
C  TAKE PLACE OVER THE DOSES IN FUTUREFILEIN (USING THE OBSERVED VALUES
C  IN FUTUREFILEIN AS TARGETS). BUT IN CASES a. AND b., THE LOGIC WILL
C  BE DIFFERENT THAN THAT FOR IPRIOR = 0 IN BESTDOS104. NOW, THE FILE
C  IN FUTUREFILEIN IS CONCATENATED AT THE END OF THE "PAST" FILE, 
C  PASTFILEIN (ACTUALLY ONLY THE DOSES, NOT THE OBSERVED VALUES OF
C  PASTFILEIN ARE NEEDED), WITH ALL ITS TIMES INCREASED BY "TNEXT" HOURS
C  (TNEXT IS A NEW VALUE WHICH IS INPUT TO THE RUN IN THE INSTRUCTION
C  FILE OR BY KEYBOARD ENTRY). THEN THE OPTIMUM DOSES IN THE "FUTURE"
C  ARE FOUND TO GIVE THE OBSERVED VALUES IN THE "FUTURE", BUT GIVEN THAT
C  THE "PAST" DOSES IN PASTFILEIN OCCURRED FIRST. I.E., WITH IPRIOR = 0
C  IN BESDOS104, IT WAS ASSUMED THAT ALL THE COMPARTMENT AMOUNTS STARTED
C  AT 0 (OR WERE GIVEN BY SUBROUTINE GETIX) WHEN FUTUREFILEIN WAS 
C  OPTIMIZED OVER TO GIVE THE BEST DOSES. NOW, THE COMP. AMOUNTS AT THE
C  START OF THE "FUTURE" WILL BE WHATEVER THE PROGRAM SIMULATES THEM TO
C  BE AT THE TIME, TNEXT. NOTE THAT THE PROGRAM WILL KNOW TO OPTIMIZE 
C  ONLY OVER THE DOSES IN THE "FUTURE" OF THE PATIENT, TO GIVE THE
C  OBSERVED VALUES IN THE "FUTURE" ... USING THE DOSES WHICH WERE IN THE

C  "PAST" AS GIVEN VALUES.

C  ALSO, SINCE THE INFORMATION IN THE INSTRUCTION FILE HAS BEEN CHANGED,
C  THE NEW CODE FOR A SAVED INSTRUCTION FILE WILL BE BESTDOS MAR_13, AND
C  NO PREVIOUS VERSIONS OF THE INSTRUCTION FILE WILL BE ALLOWED (I.E.,
C  IT WILL NOW ALWAYS BE ASSUMED THAT THE USER STARTS WITH AN 
C  NPAGDENFILE (DENSITY FROM AN NPAG RUN), WHICH MAY OR MAY NOT BE 
C  UPDATED (DEPENDING ON THE VALUES OF INCLUDPAST AND IPRIOROBS) AND 
C  WILL NEVER HAVE A MATLAB TYPE FILE (THE OLD IPRIOR = 1 OPTION) WITH
C  DENSITY VALUES.

C  NOTE THAT I HAD TO INCLUDE MAXOBDIM AS A CALLING ARGUMENT TO VERIF1
C  SINCE IT MUST PROVIDE THIS DIMENSION TO SUBROUTINE INSPECTOBS.



C  NOTE THAT THE FOLLOWING TWO CHANGES ARE NOT IN THIS PROGRAM, BUT WILL
C  BE PUT INTO THE NEXT VERSION OF THIS PROGRAM

C  - THE OUTPUT FILE WILL INCLUDE MORE INFORMATION. FOR EACH GRID
C    PT. IN THE PARAMETER DENSITY, NOT ONLY WILL ALL THE TARGET
C    OBSERVATIONS BE WRITTEN (AS IN PREVIOUS PROGRAMS), BUT ALSO ALL 
C    OBSERVATIONS WILL BE WRITTEN EVERY IDELTA MINUTES (IDELTA = 15 BY
C    DEFAULT, BUT CAN BE CHANGED BY THE USER); AND THE SAME APPLIES TO
C    AUCs (SINCE TIME 0 AND SINCE THE LAST DOSE).  AND, THESE SAME 
C    VALUES WILL BE WRITTEN FOR THE WEIGHTED MEAN OVER ALL THE GRID
C    POINTS IN THE PARAMETER DENSITY.

C  - AT THE END OF THE RUN, THE USER WILL SEE WHAT THE FUTURE OPTIMUM
C    DOSES ARE, AND THEN BE ABLE TO CHANGE THEM AND SEE WHAT THE 

C    RESULTING OBSERVED VALUES AND AUCs IN THE FUTURE WOULD BE.

C-----------------------------------------------------------------------

C  BESTDOS104.FOR                                          2/17/13

C  BESTDOS104 HAS THE FOLLOWING CHANGES TO BESTDOS103A:

C  THIS VERSION OPTIMIZES OVER ALL DOSES, BOLUSES AS WELL AS IV'S. 
C  BESTDO103 ASSUMED THAT THE BOLUSES WERE FIXED AT THE VALUES IN THE
C  PATIENT'S DOSAGE REGIMEN, AND THE OPTIMIZATION WAS TO TAKE PLACE ONLY
C  OVER THE IV'S. BUT BESTDOS104 OPTIMIZES OVER ALL DOSES.

C  THE REQUIRED CHANGES ARE MADE IN MAIN AND FILRED (AND NOTE THAT
C  SIG HAS BEEN ADDED AS A CALLING ARGUMENT TO FILRED) OF THIS MODULE,
C  AND IN CALCBST8.FOR, UPDATED FROM CALCBST7.FOR.

C  AND NOTE THAT THE FORMAT OF HOW THE BEST DOSES ARE WRITTEN TO
C  DOSEROUTxxxx IS CHANGED.

C-----------------------------------------------------------------------

C  BESTDOS103A.FOR                                         2/10/13

C  BESTDOS103A HAS THE FOLLOWING CHANGES FROM BESTDOS103:

C  CAUTION: THIS PROGRAM DOES ALLOW THE NEW .CSV FORMAT AS DESCRIBED
C  BELOW. BUT THIS IS ONLY TO ALLOW IT TO BE RUN WITH PATIENTS WHICH
C  HAVE THEIR INFO IN THIS FORMAT, BUT DO NOT ACTUALLY HAVE STEADY STATE 
C  DOSES. THOSE PATIENTS WHICH HAVE STEADY STATE DOSE SETS WILL NOT
C  BE RUNNABLE WITH THIS PROGRAM SINCE NEWER CODE IS REQUIRED IN THE
C  NPAGBAY.FOR, SHIFT6.FOR, AND IDM1X6.FOR MODULES (THESE MODULES WERE
C  ALL COMPLETELY BEFORE 6/15/11, AND THE STEADY STATE DOSE SETS WERE
C  PUT INTO THE POPULATION PROGRAM STARTING WITH NPAG104.FOR, WHICH
C  IS DATED 1/18/12.

C  SO IF THE USER TRIES TO USE A PATIENT WITH ADDL > 0 OR -1, THE 
C  PROGRAM WILL PRINT A MESSAGE AND STOP (SEE FORMAT 321 IN
C  SUBROUTINE CSVCHANGE). 

C  1. IT ALLOWS A NEW VERSION OF THE .csv FILE. THIS FILE WILL HAVE
C  THE CODE,"POPDATA DEC_11" AT THE TOP, RATHER THAN "POPDATA APR_11".
C  THIS NEW .csv FILE WILL HAVE TWO EXTRA COLUMNS, ADDL AND II, WHICH
C  ALLOW THE USER TO SPECIFY THAT THE CURRENT DOSE LINE IS TO BE
C  REPLICATED ADDL TIMES AT AN INTERDOSE INTERVAL OF II. IF ADDL IS
C  MISSING, IT IS ASSUMED TO BE 0 (WHICH MEANS THE LINE IS NOT TO BE
C  REPLICATED). IF ADDL = -1, IT INDICATES A STEADY STATE DOSE SET IS 
C  BEGINNING WITH THAT LINE.

C  TO HANDLE THE NEW .csv FILE, A NEW SUBROUTINE, CSVCHANGE, WILL BE
C  CALLED (AFTER SUBROUTINE NEWCSV IS CALLED AND BEFORE READBLOCK IS
C  CALLED) TO CHANGE THE NEW .csv FILE INTO THE CORRESPONDING ONE
C  WITH THE OLD FORMAT. THIS WILL MINIMIZE THE CHANGES TO SUBROUTINE
C  READBLOCK, WHICH WILL STILL NEED TO BE CHANGED TO DEAL WITH 
C  NEGATIVE DOSE TIMES (WHICH WILL NOW INDICATE THE BEGINNING OF A 
C  STEADY STATE DOSE SET) - SEE CODE IN READBLOCK.

C  ALSO NOTE THAT CSVCHANGE CONVERTS SCRATCH FILE 67 TO SCRATCH FILE
C  66, WHICH MEANS THAT ALL THE READ(67,..) STATEMENTS IN READBLOCK ARE
C  NOW CHANGED TO READ(66,...) STATEMENTS. SIMILARLY, THE READ(67,...)
C  IN SUBROUTINE GETMAXTIM IS CHANGED TO READ(66,...).

C  SOME NOTES REGARDING THE NEW .csv FORMAT:

C  a. THE COLUMNS WILL NOW BE:
C  ID,EVID,TIME,DUR,DOSE,ADDL,II,INPUT,OUT,OUTEQ,C0,C1,C2,C3,Covs if any

C  b. ADDL AND II ARE ONLY RELEVANT FOR EVID=1 AND EVID=4. FOR EVID=0,
C  (OBSERVATIONS) THEY ARE IGNORED.

C  c. ADDL CONTAINS THE NO. OF ADDITIONAL DOSES TO GIVE, AT THE 
C  INTERDOSE INTERVAL OF II.

C  d. If ADDL IS MISSING FOR AN EVID=1 OR EVID=4 EVENT, IT IS ASSUMED 
C  TO BE 0 --> NO ADDITIONAL DOSES ARE GIVE. IN THIS CASE, II IS
C  IRRELEVANT.

C  e. IF ADDL > 0, THEN ADDL ADDITIONAL DOSES ARE GIVEN (I.E., A TOTAL
C  OF ADDL + 1) AT INTERVAL II. A MISSING II IN THIS CASE WILL RESULT
C  IN THE PROGRAM STOPPING WITH AN ERROR MESSAGE TO THE USER.

C  f. ADDL > 0 CAN OCCUR ON ANY DOSE EVENT, BUT ADDL = -1 (A STEADY
C  STATE DOSE INDICATOR) CAN ONLY OCCUR AT T = 0 AT THE BEGINNING OF
C  A PATIENT'S FILE, OR AT A DOSE RESET TIME.

C  2. IN SUBROUTINE TIMESET, THE FIRST TIME IN THE DOSAGE BLOCK FOR EACH
C  SUBJECT IS NO LONGER TESTED TO MAKE SURE IT IS 0. THE REASON, OF
C  COURSE, IS THAT NOW THE FIRST TIME MAY BE NEGATIVE (WHICH SIGNIFIES
C  THAT THE DOSAGE REGIMEN BEGINS WITH A STEADY STATE OF DOSES).

C  3. A NEW SUBROUTINE CONVERTCSV IS CALLED BEFORE EACH CALL TO
C  SUBROUTINE NEWCSV TO CONVERT, IF NECESSARY, A "EUROPEAN" VERSION OF
C  A .CSV FILE TO THE FORM READBLOCK EXPECTS. IN THE "EURO" VERSION, THE
C  FIELD SEPARATORS ARE SEMICOLONS, RATHER THAN COMMAS, AND THE 
C  CHARACTER USED TO SEPARATE THE WHOLE PART OF A NUMBER FROM THE
C  FRACTIONAL PART IS A COMMA, RATHER THAN A PERIOD. TO DO THIS REQUIRES
C  READING THE SECONDS LINE OF THE .CSV FILE (THE FIRST LINE HAS THE
C  VERSION CODE) AND CHECKING FOR SEMICOLONS. IF THERE ARE ANY, THEN THE
C  FILE IS CHANGED SO THAT, IN ORDER, ALL COMMAS ARE CHANGED TO PERIODS,
C  AND THEN ALL SEMICOLONS ARE CHANGED TO COMMAS. NOTE THAT, EVEN IN THE
C  "EURO" VERSION, IT WILL STILL BE ASSUMED THAT A DOT REPRESENTS
C  A MISSING (OR UNNEEDED) VALUE.

C  NOTE THAT BLOCKPAT IS NOW OPENED AS SCRATCH FILE 87. THEN CONVERTCSV
C  WRITES THIS FILE AS THE CORRECTED VERSION TO SCRATCH FILE 77. THEN,
C  ROUTINE NEWCSV CONVERTS THIS FILE TO SCRATCH FILE 67. THEN ROUTINE
C  CSVCHANGE CONVERTS THIS FILE TO SCRATCH FILE 66, WHICH IS READ BY
C  ROUTINE READBLOCK.

C-----------------------------------------------------------------------

C  BESTDOS103.FOR                                          8/15/11

C  BESTDOS103 HAS THE FOLLOWING CHANGES TO BESTDOS102:

C  1. THE ACTIVE (SALT) FRACTION, AF, WILL NOW BE A VECTOR. PREVIOUSLY,
C  IT WAS ASSUMED THAT ALL DRUGS HAD THE SAME AF; NOW EACH DRUG WILL
C  HAVE ITS OWN.

C  THE ABOVE CHANGE MEANS THAT THE NEW VERSION OF THE INSTRUCTION FILE
C  (OR 'GUICMDS.INX' IF IT EXISTS IN THE WORKING DIRECTORY) WILL HAVE
C  A NEW CODE, 'BESTDOS SEP_11', AND BE ACCOMPANIED BY A NEW ICODE = 4.
C  THEN AS THE INSTRUCTIONS ARE BEING READ IN, IF ICODE = 4, THE PROGRAM
C  WILL KNOW TO READ IN AF(I),I=1,NDRUG, RATHER THAN JUST AF. THIS ALSO
C  REQUIRES CHANGES WHERE INSTRUCTION FILE IS BEING SAVED FOR A 

C  SUBSEQUENT RUN.

C  NOTE THAT IN OLDER INSTRUCTION FILES, ALL AF(I), I=1,NDRUG, WILL
C  BE SET = THE INPUT VALUE OF AF (NOW CALLED AFSCALAR).

C  NOTE THAT THE OUTPUT FILE WILL ALSO NOW HAVE AF(I),I=1,NDRUG WRITTEN
C  TO IT, RATHER THAN JUST AF.


C  NOTE THAT SUBROUTINE GETNUMEQ HAS BEEN EXPANDED TO ALSO OBTAIN THE
C  NO. OF DRUGS, NDRUG, SINCE THIS VALUE IS NEEDED BEFORE 
C  AF(I),I=1,NDRUG ARE READ VIA THE KEYBOARD. ALSO GETNUMEQ IS NOW 
C  CALLED BEFORE VERIFI1 IS CALLED TO OBTAIN NDRUG SO THAT IF ONLY
C  AFSCALAR WAS READ IN (I.E., IN AN OLDER INSTRUCTION FILE), ALL THE
C  AF(I),I=1,NDRUG CAN BE SET = AFSCALAR.

C  2. CODE IN SUBROUTINE STACK IS CHANGED WHERE THE RS(.,.) VALUES ARE
C  MULTIPLIED (NOW) BY AF(.).

C-----------------------------------------------------------------------

C  BESTDOS102.FOR                                          6/22/11

C  BESTDOS102 HAS THE FOLLOWING CHANGES TO BESTDOS101:

C  1. SUBROUTINE GETERRGAM IS REMOVED BECAUSE IERRMOD AND GAMLAM ARE
C  NOW INPUT FROM THE USER VIA THE INSTRUCTION FILE OR KEYBOARD, ALONG
C  WITH OTHER INPUT INFO.

C  NOTE THAT I CORRECTED A SUBTLE BUG IN THE CODE REGARDING GAMLAM0,
C  THOUGH THIS BUG REMAINS FOR NOW IN THE NPAG100 PROGRAM (IF MAXCYC
C  = 0). TECHNICALLY, WHEN THE BAYESIAN DENSITY FOR A SET OF SUBJECTS
C  IS FOUND FROM A PRIOR DENSITY, AND IERRMOD .GE. 2, THE VALUE OF
C  GAMLAM USED SHOULD BE THE FINAL ESTIMATE AT THE END OF THE 
C  PRIOR RUN, NOT THE INITIAL ESTIMATE WITH WHICH THE NPAG RUN
C  STARTED. FOR EXAMPLE, IF IERRMOD = 2 AND GAMLAM0 = 1, BUT THE FINAL
C  ESTIMATE FOR GAMMA = 5, IT MEANS THAT THE ASSAY C'S USED WOULD HAVE
C  BEEN BETTER IF THEY HAD BEEN MULTIPLIED BY 5 FROM THEIR ORIGINAL
C  VALUES. AND THIS INFORMATION SHOULD BE USED GOING FORWARD WHEN

C  GETTING THE BAYESIAN POSTERIORS FOR A NEW SET OF SUBJECTS. IN 
C  BESTDOS102, IT IS MADE CLEAR WHEN THE USER ENTERS GAMLAM, HE IS
C  ENTERING THE FINAL ESTIMATED VALUE FROM THE ORIGINAL NPAG RUN ON THE
C  ENTIRE POPULATION, NOT THE INITIAL ESTIMATE AS IS IMPLIED IN 
C  BESTDOS101. TO EMPHASIZE THIS, THE TERM USED IS GAMLAM, NOT GAMLAM0.


C  2. WHEN THE PROGRAM IS RUN, IT WILL FIRST SEARCH FOR THE FILE, 
C  'GUICMDS.INX' IN THE SAME DIRECTORY AS BESTDOS102.EXE. IF IT FINDS
C  THIS FILE, IT WILL OPEN IT AND READ IN ALL THE INPUT INSTRUCTIONS,
C  AND RUN WITH NO USER INTERACTION AT ALL. IF THE FILE DOES NOT EXIST,
C  THE PROGRAM WILL PROCEED AS BEFORE, ASKING THE USER TO INPUT 
C  INSTRUCTIONS VIA AN INSTRUCTION FILE OR THE KEYBOARD.

C  NOTE THAT IF 'GUICMDS.INX' EXISTS, THE FINAL ARGUMENT (WHICH IS NEW)
C  TO READBLOCK2 IS 1 (SEE CODE IN SUBROUTINE READBLOCK2 REGARDING IGUI
C  AND READING ICOVTYPE IN THAT CASE).

C  3. THE PATH IS NOW ALSO INCLUDED IN THE OUTPUT FILE.

C-----------------------------------------------------------------------

C  BESTDOS101.FOR                                          6/17/11

C  BESTDOS101 IS A MAJOR REVISION TO BESTDOS100. THIS NEW PROGRAM ALLOWS
C  AN ADDITIONAL LEVEL OF COMPLEXITY TO THE ANALYSIS. IN BESTDOS100, THE
C  USER ALREADY HAD AVAILABLE HIS PRIOR JOINT DENSITY FILE (SEE CODE FOR
C  MATFIL). 

C  IN BESTDOS101, HOWEVER, THE USER MAY NOT ALREADY HAVE THIS INFO. 
C  INSTEAD, HE MAY START WITH A JOINT DENSITY FROM AN NPAG RUN, ALONG 
C  WITH A "PAST HISTORY" FOR A NEW SUBJECT (EITHER A WORKING COPY FILE 
C  OR A .CSV FILE). IN THIS CASE, THE PROGRAM WILL CALL A SHORTENED
C  VERSION OF npagengxx.F (NPAGBAY) WHICH WILL OBTAIN THE BAYESIAN
C  POSTERIOR JOINT DENSITY OF THIS NEW SUBJECT ... WHICH WILL THEN BE
C  THE PRIOR JOINT DENSITY FILE FOR THE BEST DOSE CALCULATIONS.

C  NOTE THAT IN THIS LATTER CASE, THE NEW SUBJECT'S "PAST HISTORY" INFO

C  (I.E., THE DOSING REGIMEN AND OBSERVED VALUE TIMES AND LEVELS) MAY
C  BE DIFFERENT THAN THE REGIMEN OVER WHICH THE BEST DOSES WILL BE 
C  OBTAINED IN THE FUTURE. THIS MEANS THAT THE "FUTURE" INFO FOR THIS
C  NEW SUBJECT WILL HAVE TO BE ENTERED SEPARATELY FROM THE "PAST" INFO,
C  AND THIS MEANS THAT THE INSTRUCTION FILE WILL BE EXPANDED TO INCLUDE
C  THIS INFO. BECAUSE OF THIS, THE INSTRUCTION FILE WILL HAVE A NEW

C  CODE, BESTDOS JUL_11.

C  NOTE THAT VODTOT.FOR WILL NO LONGER BE LINKED INTO THIS PROGRAM
C  SEPARATELY. INSTEAD, THE MODULE NPAGBAY WILL CONTAIN A VERSION OF
C  VODTOT.FOR THAT HAS A FEW CHANGES TO BE COMPATIBLE WITH ANDREAS'
C  INTEL COMPILER.

C  NOTE ALSO THAT NPAGBAY REQUIRES SUBROUTINE SUBRES WHICH CALLS
C  SUBROUTINE IDPC, AND THIS MEANS THAT MODULE IDM1X6.FOR (THE SAME
C  AS idm1x6.f IN npageng13.f) WILL NOW BE LINKED TO THIS PROGRAM. 
C  BECAUSE OF THIS, AND THE FACT THAT IDM1X6.FOR HAS ROUTINES USERANAL

C  AND JACOB, CALCBST6.FOR WILL BE REPLACED BY CALCBST7.FOR, WHICH
C  DOES NOT HAVE THESE ROUTINES.

C  SO HERE ARE THE MAJOR STEPS OF THIS PROGRAM:



C  1. USER ENTERS A MODEL FILE WHICH IS ALREADY LINKED WITH THIS
C     PROGRAM.

C  2. USER SELECTS WHETHER HE ALREADY HAS PRIOR DENSITY (IPRIOR = 1
C     --> YES; IPRIOR = 0 --> NO).

C  3. IF IPRIOR = 1, THE PROGRAM USES THE SAME LOGIC AS IN
C     BESTDOS100.

C  4. IF IPRIOR = 0, USER ENTERS THE JOINT DENSITY FILE FROM A 
C     PREVIOUS NPAG RUN, ALONG WITH INFO WITH ANOTHER SUBJECT'S "PAST"
C     DATA (VIA EITHER A WORKING COPY FILE OR .CSV FILE).

C     THEN NEW SUBROUTINE NPAGBAY (BASED ON THE CODE IN npageng13.f 
C     WHEN MAXCYC = 0) IS CALLED TO OBTAIN THE BAYESIAN POSTERIOR OF
C     THE NEW PATIENT; THIS IS THE PRIOR DENSITY USER WOULD HAVE
C     ENTERED DIRECTLY IN STEP 2 IF IPRIOR WAS = 1.

C-----------------------------------------------------------------------

C  BESTDOS100.FOR                                          6/4/11

C  BESTDOS100 HAS THE FOLLOWING CHANGES FROM BESTDOS8:

C  1. IT IS BROUGHT TO THE LEVEL OF THE OTHER '100' PROGRAMS, NPAG100, 
C  IT2B100, AND MONT100.FOR. IN PARTICULAR, NEW SUBROUTINES READBLOCK2,
C  ETC. ARE ADDED SO THAT THE DOSE REGIMEN, AND OBSERVED VALUE BLOCK 
C  CAN BE INPUT VIA A .CSV FILE, RATHER THAN A WORKING COPY FILE. THE
C  FORMAT OF THIS .CSV FILE WILL BE THE UPDATED ONE REFERRED TO IN THE
C  COMMENTS AT THE TOP OF THE OTHER '100' PROGRAMS SPECIFIED ABOVE.


C  2. WT AND CCR ARE NO LONGER TREATED AS SPECIAL COVARIATES. SO
C  ALL OCCURRENCES OF 2 + NADD WILL NOW BE REPLACED BY NADD. THIS ALSO
C  MEANS THAT THE MODEL FILE MUST NOW BE AN EDITED VERSION OF THE  
C  TEMPLATE MODEL FILE, TSTMULTI.FOR (UPDATED FROM TSTMULTH.FOR. 

C  3. SHIFT5.FOR WILL BE REPLACED BY SHIFT6.FOR (SAME AS SHIFT6.F IN
C  npageng13.f PROGRAM), WHICH IS REQUIRED FOR THE CHANGES RELATED TO
C  WT AND CCR NO LONGER BEING CONSIDERED SPECIAL COVARIATES. NOTE THAT
C  THE OTHER MODULES, CALCBST6.FOR AND VODTOT.FOR, ARE UNCHANGED.


C  4. THERE WILL BE A NEW CODE FOR THE INSTRUCTION FILE, 
C  'TESTDOS JUN_11', AND ALL PREVIOUS VERSIONS OF INSTRUCTION FILES WILL
C  NO LONGER BE ALLOWED. THE MAIN DIFFERENCES ARE THAT MORE INFO WILL BE
C  STORED (INCLUDING THE MODEL FILENAME, THE O.D.E. TOLERANCES, AND THE
C  NAME OF THE FILE WHICH HAS THE APRIORI DENSITY), AND THE FILE WILL
C  ALSO HAVE TEXT DESCRIBING WHAT INFO IS INPUT.

C  5. THE OUTPUT FILE WILL NO LONGER BE HARDCODED TO BE TAR_ACH.CON.
C  INSTEAD IT WILL BE DOSEROUTxxxx, WHERE xxxx WILL BE READ FROM
C  FILE EXTNUM. AND THE TOP OF THE OUTPUT FILE WILL BE A RESTATEMENT
C  OF ALL INSTRUCTIONS AS USUAL BEFORE THE OUTPUT VALUES WILL BE 
C  WRITTEN.

C  6. A NEW FLAG, CALLED IPRINTOUT, IS HARDCODED TO BE 1, WHICH MEANS
C  THAT THE OUTPUT INFO (SEE FORMAT 1234 IN SUBROUTINE ELDERY) IS 
C  PRINTED TO THE SCREEN AS USUAL. THIS IS DONE IN ANTICIPATION OF THIS
C  PROGRAM BEING RUN AS AN "ENGINE" CALLED BY ANDREAS' GUI. IN THAT
C  CASE, IPRINTOUT CAN BE RESET = 0, WHICH WILL SUPPRESS THE INFO IN

C  FORMAT 1234 FROM BEING WRITTEN TO THE SCREEN.


C  7. ALL THE PAUSE STATEMENTS ARE NOW CHANGED TO CALL PAUSE STATEMENTS,
C  AND NEW SUBROUTINE PAUSE IS ADDED TO THE PROGRAM. THIS IS DONE SINCE
C  A REGULAR PAUSE STATEMENT CAUSES WARNINGS WHEN THIS PROGRAM IS 
C  COMPILED AND LINKED USING gfortran (AND FORCES THE USER TO TYPE "go"
C  INSTEAD OF SIMPLY HITTING THE ENTER KEY).

C-----------------------------------------------------------------------

C  BESTDOS8.FOR                                            1/27/11

C  BESTDOS8 HAS THE FOLLOWING CHANGES FROM BESTDOS7:

C  1. FORMATS 919 AND 5001 ARE CHANGED TO EXPLAIN TO THE USER THAT HIS
C  FORTRAN MODEL FILE, LINKED INTO THIS PROGRAM, MUST BE AN EDITED
C  VERSION OF TSTMULTH.FOR. THE PREVIOUS LANGUAGE WAS OUTDATED (SINCE
C  THE BOXES PROGRAM HAS NOT BEEN UP TO DATE FOR A LONG TIME).


C  2. IT IS COMPILED WITH CALCBST6.FOR, RATHER THAN CALCBST5.FOR, AND
C  A MODEL FILE BASED ON TSTMULTH.FOR, RATHER THAN TSTMULTG.FOR. THE 
C  OTHER PERMANENT MODULES, SHIFT5.FOR, VODTOT.FOR, ARE UNCHANGED. 

C  NOTE THAT IN CALCBST6.FOR, THE CHANGES ARE IN SUBROUTINE GETPRED,
C  AND, IN ADDITION TO CORRECTING A COUPLE OF BUGS, MAKE THIS PROGRAM
C  COMPATIBLE WITH TSTMULTH.FOR, AS INDICATED ABOVE.

C  3. THE CALL TO SUBROUTINE DETECT IS COMMENTED OUT. THE REASON IS
C  THAT IT WILL NOW BE ASSUMED THAT THE USER CREATES HIS MODEL FILE 
C  FROM THE TEMPLATE MODEL FILE (CURRENTLY TSTMULTH.FOR) AND SO IT 
C  WILL AUTOMATICALLY HAVE THE CORRECT DECLARATION STATEMENTS AT THE
C  TOP OF EACH SUBROUTINE. PLUS, THIS WILL PREVENT THIS PROGRAM FROM
C  STRIPPING AWAY SPECIAL DECLARATION STATEMENTS THE USER MAY NEED TO
C  ADD TO THE ROUTINES FOR SPECIAL CASE ANALYSES.

C  NOTE THAT SUBROUTINE DETECT, AND THE ROUTINES IT CALLS, WILL BE LEFT
C  IN THE CODE FOR NOW (IN CASE THEY, OR MODIFIED VERSIONS OF THEM ARE
C  NEEDED IN A FUTURE VERSION OF THIS PROGRAM).

C-----------------------------------------------------------------------

C  BESTDOS7.FOR							10/15/09

C  BESTDOS7 IS A MAJOR ENHANCEMENT TO BESTDOS6, AS FOLLOWS:

C  1. BESTDOS6 IS LIMITED TO ONE OUPUT EQUATION AND ONE DRUG; BESTDOS7
C  ALLOWS MULTIPLE OUTPUTS AND MULTIPLE DRUGS ... TO THE LEVEL OF THE
C  MULTIPLE DRUG BIG NPAG PROGRAM, NPBIG15C.FOR/bigmlt4.f.

C  2. SEVERAL SUBROUTINES IN THIS PROGRAM ARE NOW REPLACED BY THE 
C  CORRESPONDING VERSIONS FROM THE CURRENT BIG NPAG POPULATION PROGRAM, 
C  NPBIG15C.FOR, OR ARE MODIFICATIONS OF ROUTINES FROM NPBIG15C.FOR, BUT 
C  ADJUSTED TO FIT THE CODE OF THIS PROGRAM. THESE ROUTINES INCLUDE:
C  GETPATH, FULLNAME, PUTASS, FILRED, STACK, USERPREP, CHECKLIN, 
C  WRITEDIF, WRITESYM, WRITEOUT, AND SKIPLINE. SOME OF THE CHANGED CODE

C  IS MINOR (E.G., *72 BECOMES *1000); OTHER IS MAJOR.

C  NOTE THAT IN SUBROUTINE PUTASS, SUBROUTINE USECS IS NO LONGER NEEDED,
C  AND SO SUBROUTINE USECS IS REMOVED FROM THE PROGRAM.

C  NOTE THAT A VERSION OF SUBROUTINE GETNUMEQ FROM NPBIG15C.FOR IS

C  ADDED TO THIS PROGRAM (IT IS CALLED BY MAIN).

C  3. NOTE THAT THIS PROGRAM WILL REQUIRE A NEW CODE FOR THE INSTRUCTION
C  FILE (TESTDOS NOV_09) SINCE THE INPUT INFO WILL BE DIFFERENT FROM
C  THAT OF THE PREVIOUS PROGRAM.


C  4. NOTE THAT THE FORMAT FOR THE PATIENT DATA FILE WILL NOW HAVE TO BE
C  THE MULTIPLE DRUG WORKING COPY FORMAT. I.E., NO BLOCK FORMAT WILL BE
C  ALLOWED (UNLIKE IN NPBIG15C.FOR, THE POPULATION PROGRAM).

C  5. THIS MODULE IS LINKED WITH CALCBST5.FOR, WHICH IS AN UPDATE FROM

C  CALCBST4.FOR.

C  6. THIS MODULE WILL BE LINKED WITH SHIFT5.F, RATHER THAN SHIFT2.F,
C  SINCE THE TEMPLATE MODEL FILE IS NOW CHANGED TO BE TSTMULTG.FOR
C  (SEE DETAILS IN NPBIG15C.FOR).

C  7. THIS PROGRAM NO LONGER LINKS IN CONVRTLO.FOR. IT IS UNNEEDED.

C-----------------------------------------------------------------------

C  BESTDOS6.FOR							3/1/08

C  BESTDOS6 HAS THE FOLLOWING CHANGES TO BESTDOS5:

C  1. IN SUBROUTINE PUTASS, AT LABEL 25, THE FREE FORMAT WRITING
C     LINE  ... 25   WRITE(27,*) 'ASSAY COEFFICIENTS FOLLOW:'
C     IS REPLACED BY A FIXED FORMAT. THIS PREVENTS EXTRA COMMAS
C     BEING WRITTEN TO THE LINE WITH SOME COMPILERS.

C  2. THIS MODULE IS LINKED WITH CALCBST4 CONVRTLO SHIFT2 VODTOT

C     AND THE USER-SUPPLIED MODEL FILE. ALL THE ROUTINES ARE THE SAME
C     AS IN BESTDOS5, EXCEPT CALCBST4, WHICH IS CHANGED FROM CALCBST3
C     (DOSES ARE PREVENTED FROM BEING NEGATIVE IN SUBROUTINE CALCS.

C-----------------------------------------------------------------------

C  BESTDOS5.FOR							9-8-03

C  BESTDOS5 HAS THE FOLLOWING CHANGE FROM BESTDOS4:


C  THE BEST SET OF DOSES TO MINIMIZE THE EXPECTED WEIGHTED SUM OF 
C  SQUARES OF DIFFERENCES BETWEEN OBSERVED AND TARGET CONCENTRATIONS,
C  AS WELL AS THE THIS SUM OF SQUARES, AS CALCULATED BY THE CALL TO 

C  SUBROUTINE ELDERY, ARE ALSO PUT INTO THE OUTPUT FILE, TAR_ACH.CON 
C  (PREVIOUSLY THEY WERE JUST WRITTEN TO THE SCREEN).

C-----------------------------------------------------------------------


C  BESTDOS4.FOR							01-05-03

C  BESTDOS4 IS A MAJOR VARIATION OF BESTDOS3. THE MAJOR CHANGE IS THAT
C  THIS PROGRAM NOW ALLOWS GENERAL MODELS WHICH CAN BE DESCRIBED BY
C  DIFFERENTIAL EQUATIONS AND OUTPUT EQUATION(S) CODED BY THE USER
C  INTO SUBROUTINES DIFFEQ AND OUTPUT OF FILE, npemdriv.f. I.E., THE

C  MODEL IS NO LONGER LIMITED TO THE STANDARD 3-COMPARTMENT LINEAR
C  MODEL.

C  BESTDOS4 WILL BE COMPILED AND LINKED WITH CALCBST3, CONVRTLO, 
C  SHIFT2.F, VODTOT.F, AND npemdriv.f (WHICH THE USER EDITS AND 

C  COMPLETES - npemdriv.f WILL THEN BE RENAMED SOMETHING WITH A
C  .FOR EXTENSION).

C  THE CODING CHANGES REQUIRED ARE AS FOLLOWS:


C  1. THE I/O IS CHANGED TO BE LIKE THE OTHER "BIG" PROGRAMS (BIG NPAG

C  AND BIG IT2B), WHICH DON'T HAVE MENUS. IN PARTICULAR, THIS PROGRAM
C  IS ESSENTIALLY AT THE "LEVEL" OF NPBIG10B.FOR, WHICH MEANS THAT
C  ONLY A SINGLE DRUG IS ALLOWED. HOWEVER, FOR NOW, ONLY ONE OUTPUT
C  EQUATION IS ALLOWED (I.E., NPBIG10B ALLOWS MULTIPLE OUTPUT EQUATIONS

C  BUT THIS PROGRAM IS LIMITED TO JUST ONE).

C  2. THIS PROGRAM IS LINKED WITH CALCBST3.FOR (UPDATED FROM 
C  CALCBST2.FOR).

C  3. NEW COMMON/FROMBEST PROVIDES THE VALUES NEEDED BY CALCBST3.FOR
C  WHEN IT CALLS NEW SUBROUTINE MAKEVEC.


C  4. SUBROUTINE GETCOVAR IS NO LONGER NEEDED SINCE THE USER CODES
C  DIRECTLY INTO SUBROUTINES DIFFEQ, OUTPUT, AND SYMBOL WHICH 
C  DESCRIPTORS ARE TO BE USED. 

C  5. ALL DIMENSIONS OF 150 ARE CHANGED TO 594 - TO MAKE THESE
C  DIMENSIONS CONSISTENT THROUGHOUT THE PROGRAM. ALSO, THE DIMENSIONS
C  FOR PAR AND PARFIX ARE CHANGED TO BE THE SAME AS IN NPBIG10B.FOR.
C  IDES(16), NIND(29), AND DESCR(26)*20 ARE REMOVED. IRAN(25) IS ADDED,
C  AS IS FORFILE*20.

C  6. REMOVED COMMON/TOPAR SINCE IT IS NOW NOT APPLICABLE (I.E., IT
C  PASSES TO MODULE PARADP17.FOR INFO FOR MENUS 1 AND 2 IN THE 
C  3-COMPARTMENT LINEAR MODEL). NOTE THAT PARADP17.FOR IS NO LONGER
C  LINKED WITH THIS PROGRAM.

C  7. NEW I/O WHICH IS SIMILAR TO THAT IN NPBIG10B.FOR IS USED. IN
C  PARTICULAR, ALL REFERENCES TO MENUS, NPAR, NFIX ARE REMOVED. BUT
C  I/O FOR THE O.D.E. TOLERANCES ARE INCLUDED.

C  8. ALL REFERENCES TO SUBROUTINES PARNAM AND PARNAM2 ARE ELIMINATED.

C  9. IN NPBIG10B.FOR, GETNUMEQ IS CALLED TO GET NUMEQT, THE NO. OF

C  OUTPUT EQS. IN THIS PROGRAM, WE WILL ASSUME FOR NOW THAT NUMEQT
C  =1, SO GETNUMEQ IS NOT INCLUDED IN THIS PROGRAM.

C 10. SUBROUTINES DETECT, CHECKLIN, SKIPLINE, WRITEDIF, WRITEOUT, AND
C  WRITESYM ARE INCLUDED (FROM NPBIG10B.FOR), BUT IVERS IS HARDCODED
C  = 0 (SINCE IT WILL BE ASSUMED THAT ONLY THE BETA VERSION IS
C  AVAILABLE FOR NOW).

C 11. SUBROUTINE USERPREP IS ADDED (FROM NPBIG10B.FOR).

C 12. NBI IS REMOVED AS AN ARGUMENT TO SUBROUTINE STACK.

C 13. SUBROUTINE FILRED IS CHANGED TO BE LIKE THAT IN MODULE,
C  bignpaglap1.f (THE .f FILE WHICH IS COMPATIBLE WITH NPBIG10B.FOR).
C  IN PARTICULAR, TIM AND YO DIMENSIONS WILL CHANGE TO (594) AND 
C  (594,6), RESPECTIVELY; COMMON/DESCR IS BE INCLUDED; AND NTLAG IS NOW
C  A PART OF COMMON/CNST. ALSO, AGE, ISEX, HEIGHT, AND IETHFLG ARE
C  REMOVED FROM THE ARGUMENT LIST (SINCE COMMON/TOPAR IS N/A).

C 14. SUBROUTINES PRINTMENU, GETIND, AND PRINTCOV ARE REMOVED.

C 15. THE IKAMS1/IKAMS2 LOGIC TO CHECK ON COMPATIBILITY BETWEEN BOLUS 
C  INPUTS AND KA IS REMOVED SINCE WITHOUT INDICES, THERE IS NO WAY TO 
C  KNOW IF KA IS A PARAMETER.

C 16. THE CODE FOR A SAVED INSTRUCTION FILE HAS BEEN CHANGED TO
C  'TESTDOS NOV_02'.

C 17. THE MAXIMUM NO. OF GRID POINTS WHICH CAN BE USED (I.E., THE NO.
C  OF GRID POINTS READ IN FROM THE MATLAB FILE BY BESTDOS4.FOR) IS
C  CURRENTLY SET = MAXGRD = 5003.

C 18. IN SUBROUTINE ELDERY, A NEW WRITE STATEMENT (SEE FORMAT 1234) IS
C  PUT IN TO GIVE USER SOME INDICATION OF HOW CLOSE TO CONVERGENCE THE
C  PROGRAM IS.

C-----------------------------------------------------------------------

C  BESTDOS3.FOR							6-19-02

C  BESTDOS3 IS THE SAME AS BESTDOS2 EXCEPT THAT THE LIMITATION ON THE
C  MAXIMUM NO. OF DOSES (SEE FORMAT 103) HAS BEEN RESET TO 500 WHICH
C  IS CORRECT (I.E., THE ONLY LIMITATION IS THE SIZE OF THE START
C  AND STEP VECTORS IN THIS ROUTINE, AND SIMILAR ARRAYS IN OTHER
C  ROUTINES - NOT THE ARBITRARY VALUE OF 7). NOTE THAT MAXDIM = 7
C  MEANS THAT THE MAXIMUM NO. OF MODEL PARAMETER IS 7, BUT THIS IS

C  UNRELATED TO THE MAXIMUM NO. OF DOSES ALLOWED.

C  ALSO NOTE THAT A NEW PARAMETER STATEMENT IN SUBROUTINE ELDERY IS
C  NEEDED TO RESET THE DIMENSIONS OF THOSE ARRAYS WHICH ARE NOT 

C  CALLING ARGUMENTS AND THEREFORE CANNOT HAVE THEIR DIMENSIONS SET
C  BY THE PASSED PARAMETER N.

C-----------------------------------------------------------------------


C  BESTDOS2.FOR							9-29-01

C  BESTDOS2 IS A SLIGHT EXTENSION TO BESTDOSE. THE DIFFERENCE IS THAT,
C  FOR EACH GRID POINT IN THE INPUT DENSITY, THE ACHIEVED CONCENTRATIONS
C  FOR THE CURRENT BEST SET OF DOSES (I.E., THOSE GIVING THE MINIMUM
C  EXPSUM IN SUBROUTINE CALCS, CALLED BY ELDERY) ARE STORED IN 
C  COMMON/PREDVAL. THESE VALUES WILL BE STORED INTO THE FILE
C  TAR_ACH.CON BEFORE THIS PROGRAM CLOSES.

C-----------------------------------------------------------------------

C  BESTDOSE.FOR							8-24-01

C  BESTDOSE IS A MAJOR EXTENSION TO TESTDOSE. TESTDOSE CALCULATED A

C  SINGLE EXPECTED WEIGHTED SUM OF SQUARES (SEE BELOW) FOR A
C  HARDCODED SET OF DOSE VALUES AND WEIGHTS (THE TARGET CONCENTRAIONS
C  WERE THOSE READ AS OBSERVED VALUES FROM A PATIENT DATA FILE). 
C  BESTDOSE CALLS ELDERY (WHICH USES THE NELDER MEED ALGORITHM) TO FIND 
C  THE BEST SET OF DOSES TO MINIMIZE THIS EXPECTED WEIGHTED SUM OF 
C  SQUARES, GIVEN:
C   1. A PATIENT DATA FILE WITH THE REQUIRED DOSE TIMES, OBSERVATION 
C      TIMES, AND TARGET CONCENTRATIONS (= OBSERVED VALUES), AND


C   2. A PRIOR DENSITY FILE WITH PARAMETER VALUES AND CORRESPONDING
C      DENSITIES.

C  BESTDOSE IS COMPILED AND LINKED WITH CALCBEST, PARADP17, CONVRTLO

C??? ACTUALLY MAXDIM IS UNRELATED TO MAX. NO. OF DOSES. SEE COMMENTS
C    AT TOP OF BESTDOS3.FOR.
C  FOR NOW, BESTDOSE.FOR (AUGUST, 2001), THE MAX. NO. OF DOSES IS
C  LIMITED TO 7. TO RAISE IT, WILL HAVE TO INCREASE THE DIMENSIONS IN
C  SUBROUTINE ELDERY, AND INCREASE MAXDIM IN THE THREE PARAMETER 
C  STATEMENTS IN CALCBEST.FOR.

C-----------------------------------------------------------------------

C  TESTDOSE.FOR							1-26-01


C  TESTDOSE IS A VARIATION OF TESTDRV2. TESTDRV2 CALCULATED THE 
C  EXPECTED VALUE OF THE FISHER INFORMATION MATRIX, GIVEN A CANDIDATE
C  VECTOR OF OBSERVATION TIMES (AND A PATIENT DATA FILE WITH THE DOSAGE
C  REGIMEN, AND A PRIOR DENSITY FILE).



C  TESTDOSE CALCULATES THE EXPECTED WEIGHTED SUM OF SQUARES OF
C  DIFFERENCES BETWEEN OBSERVED AND TARGET CONCENTRATIONS, GIVEN A
C  CANDIDATE VECTOR OF DOSE AMOUNTS (DOSE TIMES AND OBSERVATION TIMES
C  AND TARGET CONCENTRATIONS ARE GIVEN IN A PATIENT DATA FILE; ALSO A
C  PRIOR DENSITY FILE IS GIVEN).

C  THIS PROGRAM MUST BE COMPILED AND LINKED WITH CONVRTLO.FOR,
C  PARADP17.FOR, AND CALCS 

C-----------------------------------------------------------------------

C  PROCEDURE:

C  1. THIS PROGRAM WILL READ FROM THE USER, VIA THE KEYBOARD, OR AN
C  INPUT FILE, (NVAR,MENU,NPAR,NOFIX,NFIX,VALFIX,IDES,NCOV). THESE
C  VALUES, ALONG WITH AGE, HEIGHT, ISEX, IETHFLG FROM THE PATIENT DATA
C  FILE (SEE NO. 2 BELOW) WILL BE PASSED VIA COMMON/TOPAR TO THE PARDEF
C  ROUTINE (WHICH IS PART OF THE PARADP17 MODULE).

C  2. IT WILL THEN READ IN A PATIENT DATA FILE. IF IT IS A 
C  USC*PACK FILE, IT WILL BE CONVERTED TO A WORKING COPY FILE WITH

C  THE DESIRED ASSAY COEFFICIENTS IN IT. THIS FILE WILL BE PUT INTO 
C  FILE 27. THEN BEFORE CALCS IS CALLED, SUBROUTINE FILRED 

C  WILL BE CALLED. FILRED READS IN THE ASSAY COEFFICIENTS, ALONG WITH 
C  AGE, HEIGHT, ISEX, AND IETHFLG (SEE NO. 2 ABOVE) AND PUTS THE 
C  REQUIRED DOSAGE INFO INTO THE REQUIRED COMMONS (ALL THIS INFO IS 
C  NEEDED BY THE CALCS MODULE).

C  NOTE THAT FILRED WILL BE CALLED JUST ONCE TO ESTABLISH ALL THE VALUES
C  (DOSE TIMES, OBSERVATION TIMES, ETC.) INTO THE REQUIRED COMMONS.
C  THEN, EACH TIME A NEW DOSAGE CANDIDATE VECTOR IS USED, THE VALUES OF
C  THESE NEW DOSES WILL BE STORED INTO THE RS VECTOR IN COMMON/OBSER
C  BY SUBROUTINE WSUMSQ IN MODULE CALCS (I.E., FILRED WILL NOT HAVE
C  TO BE CALLED AGAIN SINCE ALL THE VALUES ALREADY STORED INTO ITS
C  COMMONS STAY THE SAME EXCEPT FOR THE RS VECTOR WHICH WILL BE STORED
C  AS INDICATED ABOVE).

C-----------------------------------------------------------------------

	PARAMETER(MAXGRD=5003, MAXDIM=25, MAXOBDIM=150, MAXSUB=1, 
     1 MAXNUMEQ = 7)

        IMPLICIT REAL*8(A-H,O-Z)

	DIMENSION DENSITY(MAXGRD,MAXDIM+1),YO(MAXOBDIM,MAXNUMEQ),
     1  START(5000),STEP(5000),VALFIX(20),RS(5000,34),DOSEBEST(5000),
     2  PREDMIN(MAXGRD,594,MAXNUMEQ),IRAN(32),ATOL(20),C0P(MAXNUMEQ),
     3  C1P(MAXNUMEQ),C2P(MAXNUMEQ),C3P(MAXNUMEQ),IASS(MAXNUMEQ),
     4  C0(MAXNUMEQ),C1(MAXNUMEQ),C2(MAXNUMEQ),C3(MAXNUMEQ),
     5  SIG(5000),WORKK(MAXGRD),WORK(MAXGRD),CORDEN(MAXGRD,MAXDIM+1),
     6  AB(30,2),VALFIXX(20),AF(7),PYJGX(MAXSUB,MAXGRD),
     7  DENSTOR(MAXGRD,4),THETA(30),PX(32),BS(5000,7),TIM(594),
     8  TPRED(72000),YOO(594,MAXNUMEQ),YYPRED(72000,MAXNUMEQ),
     9  CORDLAST(MAXGRD,MAXDIM+1),TIM41(594),CORD1(MAXGRD,MAXDIM+1),
     1  PREDMIN1(MAXGRD,594,MAXNUMEQ),DENSITY1(MAXGRD,MAXDIM+1),
     2  DOSEBEST1(5000),YBAR(72000,MAXNUMEQ),AUCBAR(72000,MAXNUMEQ),
     3  TPREDREL(72000)


        CHARACTER PAR(30)*11,FILNFO*20,
     1  SAVFIL*20,PARFIX(20)*11,CODE*14,PATH*60,TMPFILE*13,
     2  PATHFILE*73,MATFIL*20,FORFILE*20,FUTUREFILEIN*20,OUTFIL*20,
     3  NAME*4,NPAGDENFILE*20,PASTFILEIN*20,ESTNAM*6,TMPFILE1*13,
     4  TMPFILE2*13,PATFIL*20,ERRFIL*20,PARRANFIX(20)*11

	EXTERNAL CALCS

	COMMON/TOCALC/DENSITY,BIASWEIGHT,NOBSER,NUMEQT,NGRD,NVARR,NDD41
	COMMON/PREDVAL/PREDMIN,EEXPSUMMIN,SUMMIN,BIASMIN
	COMMON/FROMBEST/NOFIX,IRAN,VALFIX
	COMMON/TOUSER/NDIM,MF,RTOL,ATOL
      COMMON/OBSER/ TIM,SIG,RS,YOO,BS
      COMMON/TOCALCTP/M41,TIM41
      COMMON/TOSUMSQ/ITARGET,NVAR,NOFIXXX,NDIMMM,IDELTA,TNEXT
      COMMON/ERROR/ERRFIL


C  NOTE THAT COMMON/TOSUMSQ VALUES ARE PROVIDED FROM MAIN TO 
C  SUBROUTINE WSUMSQ (WHICH IS CALLED BY SUBROUTINE CALCS).


C  COMMON/TOCALC IS SUPPLIED TO SUBROUTINE CALCS WHICH IS THE ROUTINE
C  CALLED BY ELDERY.

C  COMMON/PREVAL CONTAINS PREDMIN WHICH CONTAINS THE PREDICTED VALUES
C  FOR EACH GRID POINT FOR THE BEST SET OF DOSES SO FAR (AS DETERMINED
C  BY SUBROUTINE ELDERY). ALSO, EEXPSUMMIN IS THE MINIMUM ACHIEVED
C  COST FUNCTION, WHICH IS A FUNCTION OF SUMMIN AND BIASMIN.

C  COMMON/FROMBEST IS PROVIDED TO SUBROUTINE CALCS. THESE VALUES ARE
C  NEEDED IN THE CALL TO MAKEVEC IN THAT ROUTINE.


C  COMMON/TOUSER IS SUPPLIED TO SUBROUTINE USERANAL IN CALCBST_.FOR.

C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C   ERRFIL.

C-----------------------------------------------------------------------

    2 FORMAT(A20)
  222 FORMAT(A3)
 2222 FORMAT(A5)
 2221 FORMAT(A60)


  138   FORMAT(/' PLEASE ENTER ONE OF THE REQUESTED VALUES: ')


C  ENTER ALL INSTRUCTIONS FROM 'GUICMDS.INX' WITH NO USER INTERACTION
C  IF THIS FILE EXISTS IN THE WORKING DIRECTORY. OTHERWISE, PROCEED AS
C  IN PREVIOUS PROGRAMS, ASKING THE USER FOR THE PATH AND THEN OBTAINING
C  INPUT INFO EITHER VIA AN INPUT FILE OR THE KEYBOARD.


        OPEN(23,FILE='GUICMDS.INX',ERR=1210,STATUS='OLD')
        
C  TO GET HERE, THE FILE, 'GETCMDS.INX' EXISTS IN THE WORKING 
C  DIRECTORY. READ ALL INPUT DATA IN THIS FILE, WHICH WAS FILLED FROM A
C  GUI DRIVING THIS PROGRAM. NOTE THAT THIS FILE HAS ALL THE INFORMATION
C  OF A STANDARD INSTRUCTION FILE, BUT ALSO INCLUDES THE PATH AT THE
C  TOP, SINCE THE PATH CANNOT BE PROVIDED TO THE PROGRAM REAL TIME, AS
C  THERE IS NO USER INTERACTION IF "GUICMDS.INX" IS READ. 

C  THE 1ST LINE IN THE FILE IS THE CODE WHICH GIVES THE VERSION NO. OF 
C  THE PROGRAM. 

         READ(23,7123) CODE

         ICODE = 0
C        IF(CODE .EQ. 'BESTDOS JUN_11') ICODE = 01
C        IF(CODE .EQ. 'BESTDOS JUL_11') ICODE = 02
C        IF(CODE .EQ. 'BESTDOS AUG_11') ICODE = 03
C        IF(CODE .EQ. 'BESTDOS SEP_11') ICODE = 04
         IF(CODE .EQ. 'BESTDOS MAR_13') ICODE = 05
         IF(CODE .EQ. 'BESTDOS APR_13') ICODE = 06
         IF(CODE .EQ. 'BESTDOS MAY_13') ICODE = 07
         IF(CODE .EQ. 'BESTDOS JUN_13') ICODE = 08
         IF(CODE .EQ. 'BESTDOS SEP_13') ICODE = 09
         IF(CODE .EQ. 'BESTDOS OCT_13') ICODE = 10

         IF(ICODE .EQ. 0) THEN

          WRITE(*,9124)
 9124     FORMAT(/' "GUICMDS.INX" IS NOT AN UP-TO-DATE GUI FILE FOR '/
     1' THIS PROGRAM. '/)
          WRITE(*,9126)
 9126     FORMAT(/' CONSIDER TRYING ONE OF THE FOLLOWING 2 OPTIONS:'//
     3' 1. USE A SAVED INSTRUCTION FILE FROM A PREVIOUS DOS RUNNING '/
     4'    OF THIS PROGRAM. THE 1ST LINE OF THE SAVED FILE MUST HAVE '/
     5'    BESTDOS XXX_XX, WHERE XXX_XX IS MAR_13 OR A MORE RECENT DATE.
     6'//
     6' 2. ENTER DATA FROM THE KEYBOARD AS YOU RUN THE PROGRAM UNDER DOS
     7.'/)

C  CANNOT WRITE THIS ERROR MESSAGE TO ERRFIL SINCE ERRFIL CAN'T BE
C  ESTABLISHED TILL THE PATH IS OBTAINED BELOW.


          CALL PAUSE
          STOP

         ENDIF

C  SKIP THIS LINE. IT CONTAINS 'PATH'
         READ(23,*)
         READ(23,2221) PATH

C  FIND xxxx, WHICH WILL BE THE 4-DIGIT EXTENSION ASSIGNED TO 
C  THE OUTPUT FILE AND ERROR FILE NAMES BELOW. NOTE THAT xxxx IS
C  THE 4-CHARACTER REPRESENTATION OF THE INTEGER
C  CURRENTLY IN THE FILE, EXTNUM, IN THE WORKING DIRECTORY. GET THIS
C  INTEGER NOW, AND REPLACE IT BY 1 MORE (UNLESS IT IS 9999, IN WHICH
C  CASE, REPLACE IT BY 1), AND THEN CLOSE EXTNUM. NOTE THAT AS OF
C  BESTDOS119.FOR, THE ACTUAL OUTPUT FILE IS OPENED LATER IN THE CODE.
C  FOR NOW, JUST ESTABLISH 'NAME'.

C  AS OF BESTDOS119.FOR, THE READING OF EXTNUM TO GET 'NAME' MUST BE 
C  DONE IN THIS PART OF THE CODE ALSO. THE REASON IS THAT 'NAME' IS
C  NEEDED TO ESTABLISH ERRFIL, WHICH WILL NOW BE WRITTEN TO IF THE
C  PROGRAM TERMINATES ABNORMALLY.
 
C  OPEN FILE EXTNUM AND READ THE NO. THERE.

        TMPFILE = ' '
        TMPFILE = 'EXTNUM' 
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(25,FILE=PATHFILE,STATUS='OLD')
        READ(25,*) INUM
 
C  OBTAIN THE CHARACTER*4 EQUIVALENT TO INUM.
 
        CALL EQUIV(INUM,NAME)

 
C  REPLACE THE NO. IN 'EXTNUM' BY INUM+1 (EXCEPT INUM=9999 IS
C  TO BE REPLACED BY 1).
 
        JNUM=INUM+1
        IF(JNUM .EQ. 10000) JNUM=1
        BACKSPACE(25)
        WRITE(25,*) JNUM
        CLOSE(25)

C  ESTABLISH ERRFIL, WHICH WILL CONTAIN THE SAME MESSAGE THAT
C  IS WRITTEN TO THE SCREEN IN CASE THE PROGRAM STOPS ABNORMALLY.

      ERRFIL = 'ERROR'//NAME   


C  SKIP THIS LINE. IT CONTAINS 'MODEL FILENAME '
         READ(23,*)
         READ(23,2) FORFILE

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).


         TMPFILE = ' '
         TMPFILE = FORFILE
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(28,FILE=PATHFILE,ERR=9050,STATUS='OLD',POSITION='APPEND')
         GO TO 9030
 9050    WRITE(*,5316) PATHFILE
         WRITE(*,9126)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
         WRITE(47,9126)
        CLOSE(47)

         CALL PAUSE
         STOP

 9030	   CALL USERPREP(NDIM,NP,NVAR,MAXDIM,PAR,NOFIX,PARFIX,IRAN,3)

         CLOSE(28)

C  THE ABOVE CALL OBTAINS THE FOLLOWING VALUES:

C  NDIM = NO. OF STATES FOR THE O.D.E.
C  NP = TOTAL NO. OF PARAMETERS = NVAR + NOFIX.
C  NVAR = NO. OF R.V.'S (1 .LE. NVAR .LE. MAXDIM).
C  PAR(I),I=1,NVAR = NAMES OF THE RANDOM VARIABLES FOR THIS RUN.
C  NOFIX = NO. OF NON-RANDOM (FIXED) PARAMETERS WHOSE FIXED VALUES ARE 
C          TO BE SET BY THE USER. 
C  PARFIX(I),I=1,NOFIX = NAMES OF FIXED PARAMETERS FOR THIS RUN.
C  IRAN(I) = 1 IF PARAMATER I IS RANDOM;
C	       0 IF PARAMETER I IS FIXED; I = 1,NVAR+NOFIX.


C  SKIP THIS LINE. IT CONTAINS 'NPAG DENSITY FILE'
           READ(23,*)
           READ(23,2) NPAGDENFILE

C  NPAGDENFILE CONTAINS THE NAME OF AN NPAG DENSITY FILE; VERIFY THAT
C  THIS FILE EXISTS.

            TMPFILE = ' '
            TMPFILE = NPAGDENFILE

            CALL FULLNAME(PATH,TMPFILE,PATHFILE)

            OPEN(67,FILE=PATHFILE,ERR=9040,STATUS='OLD')
            GO TO 9055
 9040       WRITE(*,5316) PATHFILE
            WRITE(*,9126)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
         WRITE(47,9126)
        CLOSE(47)


            CALL PAUSE
            STOP

 9055       CLOSE(67)

      IF(ICODE .EQ. 5) MAXCYC = 500

      IF(ICODE .GE. 6) THEN

C  SKIP THIS LINE, IT CONTAINS 'MAXCYC'
           READ(23,*)
           READ(23,*) MAXCYC
      ENDIF


C  SKIP THIS LINE, IT CONTAINS 'INCLUDPAST'
           READ(23,*)
           READ(23,*) INCLUDPAST

C  SKIP THIS LINE. IT CONTAINS 'IPASTFILE'
           READ(23,*)
           READ(23,*) IPASTFILE

C  SKIP THIS LINE. IT CONTAINS 'PASTFILEIN'
           READ(23,*)
           READ(23,2) PASTFILEIN
           READ(23,*)
C  THE ABOVE LINE WILL CONTAIN ICOVTYPE(.) INFO ONLY IF IPASTFILE = 1
C  AND NCOVA > 0. IF SO, IT WILL BE REREAD IN SUBROUTINE READBLOCK2. IF 
C  NOT, THIS LINE WILL BE UNNEEDED AND THEREFORE NOT REREAD. SEE CODE
C  IN READBLOCK2 REGARDING IGUI.

C  CHECK THAT PASTFILEIN IS AN EXISTING FILE, UNLESS INCLUDPAST = 0,
C  IN WHICH CASE THE USER IS NOT SUPPLYING A PAST FILE (NOTE IF 
C  IPASTFILE = 1, THE PAST FILE IS IN .CSV FORMAT; AND IF IPASTFILE = 0,
C  THE PAST FILE IS IN WORKING COPY FORMAT.

C  NOTE THAT, STARTING WITH BESTDOS106.FOR, AN NPAG RUN WILL BE DONE
C  WITH UP TO MAXCYC CYCLES WITH THE PRIOR DENSITY FILE NPAGDENFILE, ON
C  THE SUBJECT WHOSE PAST INFO IS IN PASTFILEIN, IF INCLUDPAST = 1 AND 
C  IPRIOROBS = 1 (SEE BELOW). OTHERWISE, THE NPAG DENSITY FILE INPUT 
C  ABOVE IN NPAGDENFILE WILL CONTAIN THE PARAMETER DENSITY TO BE USED
C  IN THE OPTIMIZATION OF DOSES. 


            IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 0) THEN

             TMPFILE = ' '
             TMPFILE = PASTFILEIN
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)
             OPEN(21,FILE=PATHFILE,ERR=9060,STATUS='OLD')
             GO TO 9075
 9060        WRITE(*,5316) PATHFILE
             WRITE(*,9126)


        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
         WRITE(47,9126)
        CLOSE(47)



             CALL PAUSE
             STOP
 9075        CONTINUE


C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

             CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

             CLOSE(21)
            

            ENDIF

C  ABOVE ENDIF IS FOR THE IF(INCLUDPAST .EQ. 1 .AND IPASTFILE .EQ. 0)
C   CONDITION.



C  IF IPASTFILE = 1, CREATE THE MULTIPLE DRUG WORKING COPY FILE 
C  XQZPJ001.PST IN THE WORKING COPY DIRECTORY FROM THE DATA OF THE 
C  FIRST SUBJECT IN PATHFILE. NOTE THAT READBLOCK2 BELOW IS BASED ON
C  READBLOCK IN NPBG15E1.FOR, BUT ONLY CREATES A WORKING COPY FILE FOR
C  THE FIRST SUBJECT.

            IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 1) THEN

             TMPFILE = ' '
             TMPFILE = PASTFILEIN
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)
             OPEN(87,FILE=PATHFILE,STATUS='OLD')

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV


C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT

C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE
             REWIND(66)
             CALL READBLOCK2(PATH,C0,C1,C2,C3,1,1)
             CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

             TMPFILE = ' '
             TMPFILE = 'XQZPJ001.PST'
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)
             OPEN(21,FILE=PATHFILE,ERR=9085,STATUS='OLD')
             GO TO 9080
 9085        WRITE(*,5466) PATHFILE,PASTFILEIN
             WRITE(*,9126)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5466) PATHFILE,PASTFILEIN
         WRITE(47,9126)
        CLOSE(47)


             CALL PAUSE
             STOP

 9080        CONTINUE


C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

             CLOSE(21)

            ENDIF

C  THE ABOVE ENDIF IS FOR THE  
C   IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 1) CONDITION.


C  SKIP THIS LINE. IT CONTAINS 'ICSVFILE'
         READ(23,*)
         READ(23,*) ICSVFILE

C  SKIP THIS LINE. IT CONTAINS 'FUTUREFILEIN'
         READ(23,*)
         READ(23,2) FUTUREFILEIN
         READ(23,*)
C  THE ABOVE LINE WILL CONTAIN ICOVTYPE(.) INFO ONLY IF ICSVFILE = 1,
C  AND NCOVA > 0. IF SO, IT WILL BE REREAD IN SUBROUTINE
C  READBLOCK2. IF NOT, THIS LINE WILL BE UNNEEDED AND THEREFORE NOT
C  REREAD. SEE CODE IN READBLOCK2 REGARDING IGUI.

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        IF(ICSVFILE .EQ. 0) THEN

         TMPFILE = ' '
         TMPFILE = FUTUREFILEIN
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)

         OPEN(21,FILE=PATHFILE,ERR=9140,STATUS='OLD')
         GO TO 9155
 9140    WRITE(*,5316) PATHFILE
         WRITE(*,9126)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
         WRITE(47,9126)
        CLOSE(47)

         CALL PAUSE
         STOP
 9155    CLOSE(21)

        ENDIF


C  IF ICSVFILE = 1, CREATE THE MULTIPLE DRUG WORKING COPY FILE 
C  XQZPJ001.FUT IN THE WORKING COPY DIRECTORY FROM THE DATA OF THE 
C  FIRST SUBJECT IN PATHFILE. NOTE THAT READBLOCK2 BELOW IS BASED ON
C  READBLOCK IN NPBG15E1.FOR, BUT ONLY CREATES A WORKING COPY FILE FOR
C  THE FIRST SUBJECT.

        IF(ICSVFILE .EQ. 1) THEN

         TMPFILE = ' '
         TMPFILE = FUTUREFILEIN
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(87,FILE=PATHFILE,STATUS='OLD')

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV


C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE
             REWIND(66)
             CALL READBLOCK2(PATH,C0,C1,C2,C3,2,1)
             CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

         TMPFILE = ' '
         TMPFILE = 'XQZPJ001.FUT'
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(21,FILE=PATHFILE,ERR=9165,STATUS='OLD')

         GO TO 9170

 9165    WRITE(*,5466) PATHFILE,FUTUREFILEIN
         WRITE(*,9126)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5466) PATHFILE,FUTUREFILEIN
         WRITE(47,9126)
        CLOSE(47)

         CALL PAUSE
         STOP

 9170    CLOSE(21)

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 1) CONDITION.

C  SKIP THIS LINE. IT CONTAINS 'TNEXT'.
         READ(23,*)
         READ(23,*) TNEXT

      IF(ICODE .LE. 6) IDELTA = 15

      IF(ICODE .GE. 7) THEN

C  SKIP THIS LINE. IT CONTAINS 'IDELTA'.
         READ(23,*)
         READ(23,*) IDELTA

      ENDIF



C  NOTE THAT NOFIX WAS OBTAINED ABOVE IN THE CALL TO USERPREP, BUT IT

C  MUST BE READ IN BELOW SO THE GUI WILL KNOW WHETHER THE 
C  FOLLOWING LINE CONTAINS FIXED VALUES OR NOT.

C  SKIP THIS LINE. IT CONTAINS 'NOFIX'.
         READ(23,*)
         READ(23,*) NOFIX

C  SKIP THIS LINE. IT CONTAINS 'VALFIX ARRAY IF NOFIX > 0'.
         READ(23,*)
         IF(NOFIX .GT. 0) READ(23,*) (VALFIX(I),I=1,NOFIX)

C  CHECK THAT NOFIX .LE. 20. IF NOT, PRINT MESSAGE TO USER AND STOP.

	 IF(NOFIX .GT. 20) THEN

	  WRITE(*,9177) NOFIX
 9177     FORMAT(/' NOFIX WAS READ IN FROM "GUICMDS.INX" TO '/
     1' BE ', I3,'. THIS IS > 20, THE MAXIMUM ALLOWED VALUE.'//
     2' PLEASE RERUN THE PROGRAM UNDER DOS WITH KEYBOARD ENTRY, OR USE'/
     3' AN INSTRUCTION FILE HAVING NOFIX .LE. 20.')

        OPEN(47,FILE=ERRFIL)
         WRITE(47,9177) NOFIX
        CLOSE(47)

	  CALL PAUSE
	  STOP

	 ENDIF


C  SKIP THIS LINE. IT CONTAINS 'TOLER'.
         READ(23,*)
         READ(23,*) TOLER
	   RTOL = TOLER

         DO I=1,NDIM
          ATOL(I) = TOLER
         END DO

         MF = 22


C  SKIP THIS LINE. IT CONTAINS 'NUMEQT'.
         READ(23,*)
         READ(23,*) NUMEQT


C  SKIP THIS LINE. IT CONTAINS 'NUMEQT LINES OF ASSAY COEFFICIENTS'.
         READ(23,*)

         DO IEQ=1,NUMEQT
          READ(23,*) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
         END DO

C  SKIP THIS LINE. IT CONTAINS 'IERRMOD'.
          READ(23,*)

          READ(23,*) IERRMOD

C  SKIP THIS LINE. IT CONTAINS 'GAMLAM
          READ(23,*)
          READ(23,*) GAMLAM      
   

C  SKIP THIS LINE. IT CONTAINS 'IASS(I),I=1,NUMEQT'.
         READ(23,*)
         READ(23,*) (IASS(I),I=1,NUMEQT)

C  SKIP THIS LINE. IT CONTAINS 'NDRUG'.
          READ(23,*)
          READ(23,*) NDRUG

C  SKIP THIS LINE. IT CONTAINS 'AF(I),I=1,NDRUG'.
          READ(23,*)
          READ(23,*) (AF(I),I=1,NDRUG)

      IF(ICODE .LE. 7) IOPTIMIZE = 1

      IF(ICODE .GE. 8) THEN

C  SKIP THIS LINE. IT CONTAINS 'IOPTIMIZE'.
         READ(23,*)
         READ(23,*) IOPTIMIZE

      ENDIF


      IF(ICODE .LE. 8) BIASWEIGHT = 0.D0

      IF(ICODE .GE. 9) THEN

C  SKIP THIS LINE. IT CONTAINS 'BIASWEIGHT'.
         READ(23,*)
         READ(23,*) BIASWEIGHT

      ENDIF

      IF(ICODE .LE. 9) ITARGET = 1

      IF(ICODE .GE. 10) THEN

C  SKIP THIS LINE. IT CONTAINS 'ITARGET'.
         READ(23,*)
         READ(23,*) ITARGET

      ENDIF



      CLOSE(23)

C  NOW PROCEED TO LABEL 1450 WHICH WILL RUN THE PROGRAM USING ALL THE
C  INFO READ IN FROM FILE 39 ... WITH NO USER INTERACTION (I.E., 
C  SUBROUTINE VERIF1 WILL NOT BE CALLED, AND THE USER WILL NOT BE ASKED
C  IF HE WANTS TO SAVE INFORMATION INTO A DIFFERENT INSTRUCTION FILE).

        GO TO 1450


 1210   CONTINUE

C  TO GET HERE MEANS THERE IS NO FILE, 'GUICMDS.INX' IN THE WORKING 
C  DIRECTORY, SO PROCEED AS USUAL TO OBTAIN INPUT INSTRUCTIONS FROM
C  THE USER.


C  CALL GETPATH TO GET FROM THE USER THE PATH WHERE THE INPUT FILES ARE
C  LOCATED (AND WHERE THE OUTPUT FILES WILL GO). NOTE THAT PATH IS THE
C  PATH WITH A TRAILING BACKSLASH, AND NOB IS THE NO. OF THE ENTRY WITH
C  THE LAST NON-BLANK ENTRY.

     	CALL GETPATH(PATH,NOB)

C  FIND xxxx, WHICH WILL BE THE 4-DIGIT EXTENSION ASSIGNED TO 
C  THE OUTPUT FILE AND ERROR FILE NAMES BELOW. NOTE THAT xxxx IS
C  THE 4-CHARACTER REPRESENTATION OF THE INTEGER
C  CURRENTLY IN THE FILE, EXTNUM, IN THE WORKING DIRECTORY. GET THIS
C  INTEGER NOW, AND REPLACE IT BY 1 MORE (UNLESS IT IS 9999, IN WHICH
C  CASE, REPLACE IT BY 1), AND THEN CLOSE EXTNUM. NOTE THAT AS OF
C  BESTDOS119.FOR, THE ACTUAL OUTPUT FILE IS OPENED LATER IN THE CODE.
C  FOR NOW, JUST ESTABLISH 'NAME'.

C  AS OF BESTDOS119.FOR, THE READING OF EXTNUM TO GET 'NAME' IS MOVED
C  HERE, TO THE TOP OF THE CODE. THE REASON IS THAT 'NAME' IS NEEDED
C  TO ESTABLISH ERRFIL, WHICH WILL NOW BE WRITTEN TO IF THE PROGRAM
C  TERMINATES ABNORMALLY.
 

C  OPEN FILE EXTNUM AND READ THE NO. THERE.

        TMPFILE = ' '
        TMPFILE = 'EXTNUM' 
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(25,FILE=PATHFILE,STATUS='OLD')
        READ(25,*) INUM
 
C  OBTAIN THE CHARACTER*4 EQUIVALENT TO INUM.
 
        CALL EQUIV(INUM,NAME)

 
C  REPLACE THE NO. IN 'EXTNUM' BY INUM+1 (EXCEPT INUM=9999 IS
C  TO BE REPLACED BY 1).
 
        JNUM=INUM+1
        IF(JNUM .EQ. 10000) JNUM=1
        BACKSPACE(25)
        WRITE(25,*) JNUM
        CLOSE(25)

C  ESTABLISH ERRFIL, WHICH WILL CONTAIN THE SAME MESSAGE THAT
C  IS WRITTEN TO THE SCREEN IN CASE THE PROGRAM STOPS ABNORMALLY.

       ERRFIL = 'ERROR'//NAME   


C  AS OF BESTDOS119.FOR, FORMAT 1416 INDICATES THAT STEADY STATE DOSES
C  MAY OCCUR IN THE "PAST", BUT ONLY AT THE BEGINNING OF A PATIENT 
C  FILE; I.E., DOSE RESETS ARE STILL NOT ALLOWED.

      WRITE(*,1416)
 1416 FORMAT(//' ******* WARNING *******'/
     1' STEADY STATE DOSE SETS AT THE BEGINNING OF THE PATIENT FILE'/
     2' ARE ALLOWED. BUT IF YOUR PATIENT INFORMATION INCLUDES DOSE '/
     3' RESETS, PLEASE STOP NOW. IF YOU CONTINUE, YOUR RESULTS WILL BE'/
     4' UNPREDICTABLE.'/
     5' ******* WARNING *******'//)



  145	WRITE(*,38)
   38   FORMAT(/' ENTER 0 IF INPUT IS TO BE FROM THE KEYBOARD; '/
     1' ENTER 1 IF INPUT IS TO BE FROM A FILE: ')
        READ(*,*,ERR=145) INOPT
        IF(INOPT .NE. 0 .AND. INOPT .NE. 1) GO TO 145 

	
        IF(INOPT .EQ. 1) THEN

         WRITE(*,39)
   39    FORMAT(/' ENTER THE NAME OF THE INSTRUCTION FILE; '/
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')

         READ(*,2) FILNFO
	   IF(FILNFO(1:3) .EQ. '-99') CALL SEEDIR(PATH,NOB,FILNFO)

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

         TMPFILE = ' '
         TMPFILE = FILNFO

         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(23,FILE=PATHFILE,ERR=6330,STATUS='OLD')
         GO TO 6335
 6330    WRITE(*,5316) PATHFILE
 5316    FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1' ',A73)
	 GO TO 145
 6335    CONTINUE


C  READ ALL INPUT DATA FROM FILE FILNFO, WHICH WAS FILLED FROM A
C  PREVIOUS RUNNING OF THIS PROGRAM.

C  THE 1ST LINE IN FILNFO IS THE CODE WHICH GIVES THE VERSION NO. OF 
C  THE PROGRAM. 


         READ(23,7123) CODE


 7123    FORMAT(A14)


         ICODE = 0
C        IF(CODE .EQ. 'BESTDOS JUN_11') ICODE = 01
C        IF(CODE .EQ. 'BESTDOS JUL_11') ICODE = 02
C        IF(CODE .EQ. 'BESTDOS AUG_11') ICODE = 03
C        IF(CODE .EQ. 'BESTDOS SEP_11') ICODE = 04
         IF(CODE .EQ. 'BESTDOS MAR_13') ICODE = 05
         IF(CODE .EQ. 'BESTDOS APR_13') ICODE = 06
         IF(CODE .EQ. 'BESTDOS MAY_13') ICODE = 07
         IF(CODE .EQ. 'BESTDOS JUN_13') ICODE = 08
         IF(CODE .EQ. 'BESTDOS SEP_13') ICODE = 09
         IF(CODE .EQ. 'BESTDOS OCT_13') ICODE = 10

         IF(ICODE .EQ. 0) THEN
          WRITE(*,7124)
 7124     FORMAT(/' THIS FILE IS NOT AN UP-TO-DATE INSTRUCTION FILE'/
     1' FOR THIS PROGRAM. '//
     2' YOU HAVE THE FOLLOWING 2 OPTIONS:'//
     3' YOU MAY USE A SAVED INSTRUCTION FILE FROM A PREVIOUS RUNNING '/
     4' OF THIS PROGRAM. THE 1ST LINE OF THE SAVED FILE MUST HAVE '/
     5' BESTDOS XXX_XX, WHERE XXX_XX IS MAR_13 OR A MORE RECENT DATE.'//
     6' OR YOU MAY SIMPLY ENTER DATA FROM THE KEYBOARD.'/)
          CALL PAUSE
          GO TO 145
         ENDIF

C  SKIP THIS LINE. IT CONTAINS 'MODEL FILENAME '
         READ(23,*)
         READ(23,2) FORFILE
         WRITE(*,1919) FORFILE
 1919    FORMAT(/' HAVE YOU ALREADY LINKED FILE ',A20,' WITH THIS '/
     1' PROGRAM, AND IS THIS FILE AN EDITED VERSION OF TSTMULTM.FOR?'//
     2' IF NOT, STOP NOW, AND RERUN THE PROGRAM AFTER VERIFYING BOTH '/
     3' ITEMS ABOVE.'/)
         CALL PAUSE



C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).


 7010    TMPFILE = ' '
         TMPFILE = FORFILE
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(28,FILE=PATHFILE,ERR=7050,STATUS='OLD',POSITION='APPEND')
         GO TO 7030
 7050    WRITE(*,4406) FORFILE
         READ(*,2) FORFILE
         IF(FORFILE(1:3) .EQ. '-99') CALL SEEDIR(PATH,NOB,FORFILE)
         GO TO 7010

 7030	   CALL USERPREP(NDIM,NP,NVAR,MAXDIM,PAR,NOFIX,PARFIX,IRAN,INOPT)


         CLOSE(28)

C  THE ABOVE CALL OBTAINS THE FOLLOWING VALUES:

C  NDIM = NO. OF STATES FOR THE O.D.E.
C  NP = TOTAL NO. OF PARAMETERS = NVAR + NOFIX.
C  NVAR = NO. OF R.V.'S (1 .LE. NVAR .LE. MAXDIM).
C  PAR(I),I=1,NVAR = NAMES OF THE RANDOM VARIABLES FOR THIS RUN.
C  NOFIX = NO. OF NON-RANDOM (FIXED) PARAMETERS WHOSE FIXED VALUES ARE 
C          TO BE SET BY THE USER. 
C  PARFIX(I),I=1,NOFIX = NAMES OF FIXED PARAMETERS FOR THIS RUN.
C  IRAN(I) = 1 IF PARAMATER I IS RANDOM;
C	       0 IF PARAMETER I IS FIXED; I = 1,NVAR+NOFIX.

C  SKIP THIS LINE. IT CONTAINS 'NPAG DENSITY FILE'
           READ(23,*)
           READ(23,2) NPAGDENFILE

C  NPAGDENFILE CONTAINS THE NAME OF AN NPAG DENSITY FILE; VERIFY THAT
C  THIS FILE EXISTS.

            TMPFILE = ' '
            TMPFILE = NPAGDENFILE
            CALL FULLNAME(PATH,TMPFILE,PATHFILE)
            OPEN(67,FILE=PATHFILE,ERR=9440,STATUS='OLD')
            GO TO 9455
 9440       WRITE(*,5316) PATHFILE

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
        CLOSE(47)

            CALL PAUSE
            STOP
 9455       CLOSE(67)


      IF(ICODE .EQ. 5) MAXCYC = 500

      IF(ICODE .GE. 6) THEN
    
C  SKIP THIS LINE, IT CONTAINS 'MAXCYC'
           READ(23,*)
           READ(23,*) MAXCYC

      ENDIF


C  SKIP THIS LINE, IT CONTAINS 'INCLUDPAST'
           READ(23,*)
           READ(23,*) INCLUDPAST

C  SKIP THIS LINE. IT CONTAINS 'IPASTFILE'
           READ(23,*)

           READ(23,*) IPASTFILE

C  SKIP THIS LINE. IT CONTAINS 'PASTFILEIN'
           READ(23,*)
           READ(23,2) PASTFILEIN

C  CHECK THAT PASTFILEIN IS AN EXISTING FILE, UNLESS INCLUDPAST = 0,
C  IN WHICH CASE THE USER IS NOT SUPPLYING A PAST FILE (NOTE IF 
C  IPASTFILE = 1, THE PAST FILE IS IN .CSV FORMAT; AND IF IPASTFILE = 0,
C  THE PAST FILE IS IN WORKING COPY FORMAT.


C  NOTE THAT, STARTING WITH BESTDOS106.FOR, AN NPAG RUN WILL BE DONE
C  WITH UP TO MAXCYC CYCLES WITH THE PRIOR DENSITY FILE NPAGDENFILE, ON
C  THE SUBJECT WHOSE PAST INFO IS IN PASTFILEIN, IF INCLUDPAST = 1 AND 
C  IPRIOROBS = 1 (SEE BELOW). OTHERWISE, THE NPAG DENSITY FILE INPUT 
C  ABOVE IN NPAGDENFILE WILL CONTAIN THE PARAMETER DENSITY TO BE USED

C  IN THE OPTIMIZATION OF DOSES. 

            IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 0) THEN

             TMPFILE = ' '
             TMPFILE = PASTFILEIN
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)

             OPEN(21,FILE=PATHFILE,ERR=8460,STATUS='OLD')
             GO TO 8475
8460         WRITE(*,5316) PATHFILE

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
        CLOSE(47)

             CALL PAUSE
             STOP

 8475        CONTINUE
    
C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE

C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

             CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

             CLOSE(21)

            ENDIF

C  ABOVE ENDIF IS FOR THE IF(INCLUDPAST .EQ. 1 .AND IPASTFILE .EQ. 0)
C   CONDITION.


C  IF IPASTFILE = 1, CREATE THE MULTIPLE DRUG WORKING COPY FILE 
C  XQZPJ001.PST IN THE WORKING COPY DIRECTORY FROM THE DATA OF THE 
C  FIRST SUBJECT IN PATHFILE. NOTE THAT READBLOCK2 BELOW IS BASED ON

C  READBLOCK IN NPBG15E1.FOR, BUT ONLY CREATES A WORKING COPY FILE FOR
C  THE FIRST SUBJECT.

           IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 1) THEN

             TMPFILE = ' '
             TMPFILE = PASTFILEIN
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)
             OPEN(87,FILE=PATHFILE,STATUS='OLD')

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO

C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE
             REWIND(66)
             CALL READBLOCK2(PATH,C0,C1,C2,C3,1,0)
             CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

             TMPFILE = ' '
             TMPFILE = 'XQZPJ001.PST'
             CALL FULLNAME(PATH,TMPFILE,PATHFILE)
             OPEN(21,FILE=PATHFILE,ERR=8485,STATUS='OLD')
             GO TO 8480
 8485        WRITE(*,5466) PATHFILE,PASTFILEIN

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5466) PATHFILE,PASTFILEIN
        CLOSE(47)


             CALL PAUSE
             STOP

 8480        CONTINUE


C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR

C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

             CLOSE(21)

            ENDIF


C  THE ABOVE ENDIF IS FOR THE  
C   IF(INCLUDPAST .EQ. 1 .AND. IPASTFILE .EQ. 1) CONDITION.

C  SKIP THIS LINE. IT CONTAINS 'ICSVFILE'
         READ(23,*)
         READ(23,*) ICSVFILE

C  SKIP THIS LINE. IT CONTAINS 'FUTUREFILEIN'
         READ(23,*)
         READ(23,2) FUTUREFILEIN

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        IF(ICSVFILE .EQ. 0) THEN

         TMPFILE = ' '
         TMPFILE = FUTUREFILEIN
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(21,FILE=PATHFILE,ERR=8440,STATUS='OLD')
         GO TO 8455
 8440    WRITE(*,5316) PATHFILE

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5316) PATHFILE
        CLOSE(47)


         CALL PAUSE
         STOP

 8455    CLOSE(21)

        ENDIF


C  IF ICSVFILE = 1, CREATE THE MULTIPLE DRUG WORKING COPY FILE 
C  XQZPJ001.FUT IN THE WORKING COPY DIRECTORY FROM THE DATA OF THE 
C  FIRST SUBJECT IN PATHFILE. NOTE THAT READBLOCK2 BELOW IS BASED ON
C  READBLOCK IN NPBG15E1.FOR, BUT ONLY CREATES A WORKING COPY FILE FOR
C  THE FIRST SUBJECT.

        IF(ICSVFILE .EQ. 1) THEN

         TMPFILE = ' '
         TMPFILE = FUTUREFILEIN
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(87,FILE=PATHFILE,STATUS='OLD')

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.


             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE
             REWIND(66)
             CALL READBLOCK2(PATH,C0,C1,C2,C3,2,0)
             CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

         TMPFILE = ' '
         TMPFILE = 'XQZPJ001.FUT'
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(21,FILE=PATHFILE,ERR=8465,STATUS='OLD')

         GO TO 8470
 8465    WRITE(*,5466) PATHFILE,FUTUREFILEIN

        OPEN(47,FILE=ERRFIL)
         WRITE(47,5466) PATHFILE,FUTUREFILEIN
        CLOSE(47)

         CALL PAUSE
         STOP

 8470    CLOSE(21)

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 1) CONDITION.


C  SKIP THIS LINE. IT CONTAINS 'TNEXT'.
         READ(23,*)
         READ(23,*) TNEXT


      IF(ICODE .LE. 6) IDELTA = 15

      IF(ICODE .GE. 7) THEN

C  SKIP THIS LINE. IT CONTAINS 'IDELTA'.
         READ(23,*)
         READ(23,*) IDELTA

      ENDIF


C  NOTE THAT NOFIX WAS OBTAINED ABOVE IN THE CALL TO USERPREP, BUT IT
C  MUST BE READ IN BELOW SO THE GUI WILL KNOW WHETHER THE 
C  FOLLOWING LINE CONTAINS FIXED VALUES OR NOT.

C  SKIP THIS LINE. IT CONTAINS 'NOFIX'.
         READ(23,*)


         READ(23,*) NOFIX

C  SKIP THIS LINE. IT CONTAINS 'VALFIX ARRAY IF NOFIX > 0'.
         READ(23,*)
         IF(NOFIX .GT. 0) READ(23,*) (VALFIX(I),I=1,NOFIX)

C  CHECK THAT NOFIX .LE. 20. IF NOT, PRINT MESSAGE TO USER AND STOP.

	 IF(NOFIX .GT. 20) THEN

	  WRITE(*,3177) NOFIX
 3177     FORMAT(/' NOFIX WAS READ IN FROM THE INSTRUCTION FILE TO '/
     1' BE ', I3,'. THIS IS > 20, THE MAXIMUM ALLOWED VALUE.'//


     2' PLEASE RERUN THE PROGRAM WITH KEYBOARD ENTRY, OR USE AN '/
     3' INSTRUCTION FILE HAVING NOFIX .LE. 20.')

        OPEN(47,FILE=ERRFIL)
         WRITE(47,3177) NOFIX  
        CLOSE(47)

	  CALL PAUSE
	  STOP

	 ENDIF


C  SKIP THIS LINE. IT CONTAINS 'TOLER'.
         READ(23,*)
         READ(23,*) TOLER
	   RTOL = TOLER

         DO I=1,NDIM
          ATOL(I) = TOLER


         END DO

         MF = 22

C  SKIP THIS LINE. IT CONTAINS 'NUMEQT'.
         READ(23,*)
         READ(23,*) NUMEQT

C  SKIP THIS LINE. IT CONTAINS 'NUMEQT LINES OF ASSAY COEFFICIENTS'.
         READ(23,*)

         DO IEQ=1,NUMEQT
          READ(23,*) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
         END DO

C  SKIP THIS LINE. IT CONTAINS 'IERRMOD'.
          READ(23,*)
          READ(23,*) IERRMOD

C  SKIP THIS LINE. IT CONTAINS 'GAMLAM
          READ(23,*)
          READ(23,*) GAMLAM      
   

C  SKIP THIS LINE. IT CONTAINS 'IASS(I),I=1,NUMEQT'.
         READ(23,*)
         READ(23,*) (IASS(I),I=1,NUMEQT)

C  SKIP THIS LINE. IT CONTAINS 'NDRUG'.
          READ(23,*)
          READ(23,*) NDRUG

C  SKIP THIS LINE. IT CONTAINS 'AF(I),I=1,NDRUG'.
          READ(23,*)
          READ(23,*) (AF(I),I=1,NDRUG)


      IF(ICODE .LE. 7) IOPTIMIZE = 1

      IF(ICODE .GE. 8) THEN

C  SKIP THIS LINE. IT CONTAINS 'IOPTIMIZE'.
         READ(23,*)
         READ(23,*) IOPTIMIZE

      ENDIF



      IF(ICODE .LE. 8) BIASWEIGHT = 0.D0

      IF(ICODE .GE. 9) THEN

C  SKIP THIS LINE. IT CONTAINS 'BIASWEIGHT'.
         READ(23,*)
         READ(23,*) BIASWEIGHT

      ENDIF


      IF(ICODE .LE. 9) ITARGET = 1

      IF(ICODE .GE. 10) THEN

C  SKIP THIS LINE. IT CONTAINS 'ITARGET'.
         READ(23,*)
         READ(23,*) ITARGET

      ENDIF


         CLOSE(23)

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INOPT .EQ. 1)  CONDITION.


        IF(INOPT .EQ. 0) THEN


        WRITE(*,919)
  919   FORMAT(/' HAVE YOU ALREADY MADE YOUR FORTRAN MODEL FILE AS AN'/
     1' EDITED VERSION OF THE TEMPLATE MODEL FILE, TSTMULTM.FOR, AND'/
     2' HAVE YOU COMPILED AND LINKED THIS FILE INTO THIS PROGRAM?'//
     4' IF NOT, STOP NOW, AND THEN RERUN THIS PROGRAM AFTER DOING SO.'/)

        CALL PAUSE


C  INPUT THE NAME OF THE FORTRAN FILE BASED ON THE TEMPLATE MODEL
C  FILE, TSTMULTM.FOR (AS OF BESTDOS119.FOR), WHICH IDENTIFIES THE 
C  MODEL AND THE PARAMETERS FOR THE USER'S ANALYSIS. THEN CALL 
C  SUBROUTINE USERPREP TO INPUT VALUES FROM THIS FILE.


        WRITE(*,5001)


 5001   FORMAT(/' ENTER THE NAME OF THE FORTRAN FILE (EDITED FROM '/
     1' TEMPLATE MODEL FILE, TSTMULTM.FOR, WHICH YOU LINKED TO THIS'/
     2' PROGRAM, AND WHICH CONTAINS THE CODE FOR THE MODEL YOU WOULD'/
     3' LIKE TO ANALYZE:  ')
     	  READ(*,2) FORFILE

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

 5010	TMPFILE = ' '
	TMPFILE = FORFILE


	CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(28,FILE=PATHFILE,ERR=50,STATUS='OLD',POSITION='APPEND')
	GO TO 30
   50   WRITE(*,4406) FORFILE
 4406     FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1'    ',A73/
     2' ENTER THE CORRECT FILENAME OR ... '/
     2' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ') 
	READ(*,2) FORFILE


	IF(FORFILE(1:3) .EQ. '-99') CALL SEEDIR(PATH,NOB,FORFILE)
	GO TO 5010

   30   CALL USERPREP(NDIM,NP,NVAR,MAXDIM,PAR,NOFIX,PARFIX,IRAN,INOPT)


	CLOSE(28)

C  THE ABOVE CALL OBTAINS THE FOLLOWING VALUES:

C  NDIM = NO. OF STATES FOR THE O.D.E.
C  NP = TOTAL NO. OF PARAMETERS = NVAR + NOFIX.
C  NVAR = NO. OF R.V.'S (1 .LE. NVAR .LE. MAXDIM).

C  PAR(I),I=1,NVAR = NAMES OF THE RANDOM VARIABLES FOR THIS RUN.
C  NOFIX = NO. OF NON-RANDOM (FIXED) PARAMETERS WHOSE FIXED VALUES ARE 
C          TO BE SET BY THE USER. 
C  PARFIX(I),I=1,NOFIX = NAMES OF FIXED PARAMETERS FOR THIS RUN.
C  IRAN(I) = 1 IF PARAMATER I IS RANDOM;
C	     0 IF PARAMETER I IS FIXED; I = 1,NVAR+NOFIX.


 8010 WRITE(*,8013)
 8013 FORMAT(/' THIS PROGRAM REQUIRES AN NPAG DENSITY FROM A PREVIOUS'/
     1' ANALYSIS OF A POPULATION. THIS NPAG DENSITY WILL BE USED AS'/
     2' THE PARAMETER DENSITY FOR THE OPTIMIZATION OVER THE DOSES IN'/
     3' THE "FUTURE" OF THE SUBJECT BEING CONSIDERED IN THIS RUN IF'/
     4' THERE IS NO "PAST" HISTORY FOR THE SUBJECT, OR IF THE "PAST"'/
     5' HISTORY INCLUDES NO OBSERVED VALUES.'//
     6' BUT IF THERE IS A "PAST" HISTORY FOR THE SUBJECT, AND IT '/
     7' INCLUDES OBSERVATIONS, THEN THE NPAG DENSITY WILL BE USED AS'/
     8' AS A PRIOR DENSITY FOR ANOTHER NPAG RUN WHICH WILL OBTAIN A'/
     9' POSTERIOR DENSITY FOR THE SUBJECT, AND THIS NEW DENSITY WILL'/
     1' THEN BE THE DENSITY FOR THE OPTIMIZATION. '//
     1' ENTER THE NAME OF THE FILE WHICH CONTAINS THE NPAG DENSITY'/
     2' FROM A PREVIOUS ANALYSIS OF A POPULATION (IT WILL PROBABLY'/
     3' BE DENxxxx, WHERE xxxx WAS THE JOB NUMBER): '//
     4' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	READ(*,2) NPAGDENFILE
      IF(NPAGDENFILE(1:3) .EQ. '-99') 
     1 CALL SEEDIR(PATH,NOB,NPAGDENFILE)



C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

      TMPFILE = ' '
      TMPFILE = NPAGDENFILE
      CALL FULLNAME(PATH,TMPFILE,PATHFILE)
      OPEN(21,FILE=PATHFILE,ERR=8020,STATUS='OLD')
      GO TO 8025
 8020 WRITE(*,5316) PATHFILE
      GO TO 8010
 8025 CLOSE(21)


 8030 WRITE(*,8031)
 8031 FORMAT(/' ENTER 1 IF THE CALCULATIONS ARE TO INCLUDE THE "PAST" '/
     1'         HISTORY FOR THE SUBJECT OF THIS RUN;'/
     2' ENTER 0 OTHERWISE: ')
      READ(*,*,ERR=8030) INCLUDPAST
      IF(INCLUDPAST .NE. 1 .AND. INCLUDPAST .NE. 0) GO TO 8030

      IF(INCLUDPAST .EQ. 0) THEN
       IPASTFILE = -1
       PASTFILEIN = 'NOT USED'
      ENDIF

8035   IF(INCLUDPAST .EQ. 1) THEN

        WRITE(*,8003)
8003    FORMAT(/' ENTER 1 IF THE FILE WHICH HAS THE "PAST" INFO FOR'/
     1'         THE SUBJECT OF THIS RUN IS A .CSV FILE (IN THIS CASE,'/
     2'         THE INFO FOR THE FIRST SUBJECT IN THE .CSV FILE WILL'/
     3'         BE USED); '/
     4' ENTER 0 IF THE FILE WHICH HAS THE "PAST" INFO FOR THE SUBJECT'/
     5'         OF THIS RUN IS A WORKING COPY FILE: ')
        READ(*,*,ERR=8035) IPASTFILE
        IF(IPASTFILE .NE. 1 .AND. IPASTFILE .NE. 0) GO TO 8035
 
         IF(IPASTFILE .EQ. 0) THEN

          WRITE(*,1021)
     	    READ(*,2) PASTFILEIN
          IF(PASTFILEIN(1:3) .EQ. '-99')CALL SEEDIR(PATH,NOB,PASTFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

          TMPFILE = ' '
          TMPFILE = PASTFILEIN
          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(21,FILE=PATHFILE,ERR=8050,STATUS='OLD')
          GO TO 8045

 8050     WRITE(*,5316) PATHFILE
          GO TO 8030

 8045     CONTINUE


C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

          CLOSE(21)

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IPASTFILE .EQ. 0) CONDITION.


         IF(IPASTFILE .EQ. 1) THEN

          WRITE(*,8021)
 8021    FORMAT(/' ENTER THE NAME OF THE BLOCK MATRIX .CSV FILE. ONLY'/
     1' THE DATA FROM THE FIRST SUBJECT IN THIS FILE WILL BE READ TO'/
     2' OBTAIN THE DOSE/COVARIATE INFORMATION FOR THIS SUBJECT.'//
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	    READ(*,2) PASTFILEIN
          IF(PASTFILEIN(1:3) .EQ. '-99')CALL SEEDIR(PATH,NOB,PASTFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.


C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

          TMPFILE = ' '
          TMPFILE = PASTFILEIN
          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(87,FILE=PATHFILE,ERR=8060,STATUS='OLD')

          GO TO 8055
 8060     WRITE(*,5316) PATHFILE
          GO TO 8030
 8055     CONTINUE

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.


        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE

C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE

C  CREATE THE MULTIPLE DRUG WORKING COPY FILE XQZPJ001.PST IN THE
C  WORKING COPY DIRECTORY FROM THE DATA OF THE FIRST SUBJECT IN 
C  PATHFILE. NOTE THAT READBLOCK2 IS COPIED FROM MONT101.FOR. 

          REWIND(66)

          CALL READBLOCK2(PATH,C0,C1,C2,C3,1,0)
          CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

          TMPFILE = ' '
          TMPFILE = 'XQZPJ001.PST'
          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(21,FILE=PATHFILE,ERR=8065,STATUS='OLD')
          GO TO 8070
 8065     WRITE(*,5466) PATHFILE,PASTFILEIN
          GO TO 8030

 8070     CONTINUE

C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.

          CLOSE(21)

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IPASTFILE .EQ. 1) CONDITION.


       ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INCLUDPAST .EQ. 1)  CONDITION.
 

      IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1) THEN


 8080  WRITE(*,8077)
 8077  FORMAT(/' FOR THE NPAG ANALYSIS WHICH WILL OBTAIN THE POSTERIOR'/
     1' DENSITY (WHICH WILL THEN BE THE DENSITY FOR THE OPTIMIZATION)'/
     2' SELECT THE MAXIMUM NO. OF CYCLES IT SHOULD RUN. THE DEFAULT'/
     3' IS A MAXIMUM OF 500 CYCLES. '//
     4' SELECT 1 FOR 500 CYCLE;'/
     5' SELECT 0 FOR A DIFFERERENT NO. OF MAXIMUM CYCLES: ')
       READ(*,*,ERR=8080) MAXCYC
       IF(MAXCYC .NE. 1 .AND. MAXCYC .NE. 0) GO TO 8080

       IF(MAXCYC .EQ. 1) MAXCYC = 500
   
       IF(MAXCYC .EQ. 0) THEN
 8090   WRITE(*,8091)
 8091   FORMAT(/' ENTER A POSITIVE NO. FOR THE MAXIMUM NO. OF CYCLES'/
     1' THE NPAG ANALYSIS SHOULD RUN: ')
        READ(*,*,ERR=8090) MAXCYC
        IF(MAXCYC .LT. 1) GO TO 8090
       ENDIF

      ENDIF

C  THE ABOVE ENDIF IS FOR THE
C   IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1)  CONDITION.

  

 5020  WRITE(*,5002)
 5002  FORMAT(/' THE FUTURE PATIENT INFO FOR THIS RUN CAN BE INPUT VIA'/
     1' A (MULTIPLE DRUG) WORKING COPY PATIENT DATA FILE OR A BLOCK '/
     2' MATRIX .CSV FILE (THE INFO WILL COME FROM THE DATA OF THE'/
     3' FIRST SUBJECT IN THIS CASE).'//
     5' ENTER 1 TO ENTER INFO USING A .CSV FILE; '/
     6' ENTER 0 TO ENTER INFO USING A WORKING COPY PATIENT DATA FILE: ')
        READ(*,*,ERR=5020) ICSVFILE
        IF(ICSVFILE .NE. 1 .AND. ICSVFILE .NE. 0) GO TO 5020


        IF(ICSVFILE .EQ. 0) THEN

        WRITE(*,1021)
 1021   FORMAT(/' ENTER THE NAME OF THE WORKING COPY PATIENT DATA FILE.'
     1//
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	  READ(*,2) FUTUREFILEIN
        IF(FUTUREFILEIN(1:3) .EQ. '-99') 
     1   CALL SEEDIR(PATH,NOB,FUTUREFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 

C  CURRENT DIRECTORY).


	TMPFILE = ' '
	TMPFILE = FUTUREFILEIN
	CALL FULLNAME(PATH,TMPFILE,PATHFILE)
	OPEN(21,FILE=PATHFILE,ERR=6440,STATUS='OLD')
	GO TO 6455
 6440   WRITE(*,5316) PATHFILE
	GO TO 5020
 6455   CONTINUE

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 0) CONDITION.


        IF(ICSVFILE .EQ. 1) THEN

        WRITE(*,3021)
 3021   FORMAT(/' ENTER THE NAME OF THE BLOCK MATRIX .CSV FILE. ONLY'/
     1' THE DATA FROM THE FIRST SUBJECT IN THIS FILE WILL BE READ TO'/
     2' OBTAIN THE DOSE/COVARIATE INFORMATION FOR THIS SUBJECT.'//
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	  READ(*,2) FUTUREFILEIN
        IF(FUTUREFILEIN(1:3) .EQ. '-99') 
     1   CALL SEEDIR(PATH,NOB,FUTUREFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        TMPFILE = ' '
        TMPFILE = FUTUREFILEIN
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(87,FILE=PATHFILE,ERR=5440,STATUS='OLD')

        GO TO 5455
 5440   WRITE(*,5316) PATHFILE
        GO TO 5020
 5455   CONTINUE

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,


C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF


C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE

C  CREATE THE MULTIPLE DRUG WORKING COPY FILE XQZPJ001.FUT IN THE
C  WORKING COPY DIRECTORY FROM THE DATA OF THE FIRST SUBJECT IN 
C  PATHFILE. NOTE THAT READBLOCK2 IS COPIED FROM MONT101.FOR. 

        REWIND(66)

        CALL READBLOCK2(PATH,C0,C1,C2,C3,2,0)
        CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.


        TMPFILE = ' '
        TMPFILE = 'XQZPJ001.FUT'
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(21,FILE=PATHFILE,ERR=5465,STATUS='OLD')
        GO TO 5470
 5465   WRITE(*,5466) PATHFILE,FUTUREFILEIN
 5466   FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1' ',A73/
     2' WHICH MEANS THAT YOUR .CSV FILE, ',A20,' WAS NOT READ '/
     3' PROPERLY. PLEASE CHECK THIS FILE TO MAKE SURE IT IS CORRECT.'//)
        GO TO 5020


 5470   CONTINUE


        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 1) CONDITION.

C  AT THIS POINT, FILE 21 CONTAINS THE WORKING COPY FILE TO BE USED
C  FOR THIS RUN (VIA EITHER THE ICSVFILE .EQ. 0 OR THE ICSVFILE .EQ. 1
C  BLOCK). CALL GETNUMEQ WHICH WILL READ THIS FILE 21 AND OBTAIN
C  NUMEQT AND NDRUG.

	CALL GETNUMEQ(NUMEQT,NDRUG)
	CLOSE(21)

C  IF INCLUDPAST = 0, IT MEANS THAT THE USER IS PROVIDING NO "PAST"
C  HISTORY FOR THE SUBJECT. IN THIS CASE, SET TNEXT = 0.0. OTHERWISE,
C  HAVE THE USER ENTER TNEXT.

      IF(INCLUDPAST .EQ. 0) TNEXT = 0.D0

      IF(INCLUDPAST .EQ. 1) THEN
 8040  WRITE(*,8041) PASTFILEIN,FUTUREFILEIN
 8041  FORMAT(/' YOUR ANALYSIS INCLUDES THE "PAST" HISTORY FOR THE'/
     1' SUBJECT IN FILE ',A20,' AND THE "FUTURE" IN FILE ',A20/
     2' IT WILL BE ASSUMED THAT THE "PAST" BEGINS AT TIME = 0, AND THE'/
     3' "FUTURE" BEGINS AT TIME = TNEXT. IN OTHER WORDS, THE "FUTURE"'/
     4' FILE SHOULD START AS USUAL WITH TIME = 0, BUT ALL THE TIMES IN'/
     5' THIS FILE WILL BE INCREASED BY TNEXT HOURS, AND THEN THIS FILE'/
     6' WILL BE CONCATENATED TO THE "PAST" TO PROVIDE A COMPLETE'/
     7' DOSING/OBSERVED VALUE PROFILE OF THE SUBJECT.'//
     8' BUT NOTE THAT OPTIMUM DOSES WILL BE FOUND ONLY IN THE "FUTURE"'/
     9' TO BEST ACHIEVE THE OBSERVED VALUES IN THE "FUTURE" ... BASED'/
     1' ON THE "PAST" HISTORY. '//
     2' ENTER TNEXT, A POSTIVE NO. OF HOURS, NOW: ')
       READ(*,*,ERR=8040) TNEXT
       IF(TNEXT .LE. 0.D0) GO TO 8040
      ENDIF
 
 8170 WRITE(*,8172)
 8172 FORMAT(/' THE OUTPUT FILE WILL INCLUDE, FOR EACH GRID POINT IN '/
     1' THE PARAMETER DENSITY (AND THE WEIGHTED MEAN OF THESE GRID'/
     2' POINTS), SIMULATED OBSERVED VALUES, BASED ON THE OPTIMAL DOSES'/
     3' WHICH THE PROGRAM CALCULATES.'//
     4' ENTER 1 IF THESE VALUES SHOULD BE SIMULATED EVERY 15 MINUTES'/
     5'       0 FOR A DIFFERENT NO. OF MINUTES BETWEEN SIMULATED VALUES:
     6 ')

      READ(*,*,ERR=8170) IDELTA
      IF(IDELTA .NE. 1 .AND. IDELTA .NE. 0) GO TO 8170

      IF(IDELTA .EQ. 1) IDELTA = 15


      IF(IDELTA .EQ. 0) THEN

       WRITE(*,8173)
 8173  FORMAT(/' ENTER THE NO. OF MINUTES BETWEEN SIMULATED VALUES: ')
       READ(*,*,ERR=8170) IDELTA
       IF(IDELTA .LE. 0) GO TO 8170
      ENDIF


C  ENTER THE FIXED VALUES FOR THE PARAMETERS.

        IF(NOFIX .GT. 0) THEN
         WRITE(*,4836) 
 4836    FORMAT(/' ENTER THE VALUE FOR EACH FIXED PARAMETER: ')
          DO I = 1,NOFIX
 4845      WRITE(*,34) PARFIX(I)
   34      FORMAT(/' ',A11,' : ')
 4840      READ(*,*,ERR=4845) VALFIX(I)
          END DO
         ENDIF


C  READ IN VALUES FOR MF, RTOL, AND ATOL, WHICH ARE NEEDED FOR THE 
C  O.D.E. SOLVER USED BY ROUTINE USERANAL.

C MF     = Method flag.  Standard values are..
C          10 for nonstiff (Adams) method, no Jacobian used.
C          21 for stiff (BDF) method, user-supplied full Jacobian.
C          22 for stiff method, internally generated full Jacobian.

C	   FOR NOW MF = 22 WILL BE HARDCODED (SINCE THERE IS NO
C	   JACOBIAN SUBROUTINE (JACOB HAS BEEN TAKEN OUT FOR NOW).

C          24 for stiff method, user-supplied banded Jacobian.
C          25 for stiff method, internally generated banded Jacobian.
C RTOL   = Relative tolerance parameter (scalar).
C ATOL   = Absolute tolerance parameter.
C          The estimated local error in X(i) will be controlled so as
C          to be roughly less (in magnitude) than
C             EWT(i) = RTOL*abs(X(i)) + ATOL(i)  SINCE ITOL = 2.

C          Thus the local error test passes if, in each component,
C          either the absolute error is less than ATOL (or ATOL(i)),
C          or the relative error is less than RTOL.
C          Use RTOL = 0.0 for pure absolute error control, and
C          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error
C          control.  Caution.. Actual (global) errors may exceed these
C          local tolerances, so choose them conservatively.



  915   WRITE(*,913)
  913   FORMAT(/' ENTER 1 TO SET ALL TOLERANCES (FOR THE O.D.E. '/
     1'         SOLVER) TO THE DEFAULT VALUE ... 1.D-4.'/
     2' ENTER 0 TO SELECT A DIFFERENT VALUE FOR THE TOLERANCES: ')
	READ(*,*,ERR=915) ITOL
	IF(ITOL .NE. 0 .AND. ITOL .NE. 1) GO TO 915

	TOLER = 1.D-4


	IF(ITOL .EQ. 0) THEN

  910	WRITE(*,914) 
  914  FORMAT(/' ENTER A POSITIVE VALUE FOR THE TOLERANCE PARAMETERS: ')
	READ(*,*,ERR=910) TOLER
	IF(TOLER .LE. 0.D0) GO TO 910

	ENDIF


	RTOL = TOLER
	DO I=1,NDIM
	 ATOL(I) = TOLER
	END DO

	MF = 22

C  ENTER IERRMOD AND GAMLAM HERE.

         CALL SYSTEM('CLS')

 1110    WRITE(*,118) NPAGDENFILE
  118   FORMAT(//' SELECT HOW YOU MODELED THE ASSAY ERROR FUNCTION IN '/
     1' THE NPAG RUN YOU DID WHICH PRODUCED THE DENSITY FILE, ',A20//
     1' RECALL THAT SD1 = C0+C1*Y+C2*Y**2+C3*Y**3; THEN ...'//
     2' ENTER 1 IF S.D. = SD1;'/
     3' ENTER 2 IF S.D. = GAMMA*SD1, WITH GAMMA TO BE ESTIMATED;'/
     4' ENTER 3 IF S.D. = SQRT(SD1**2 + LAMBDA**2), WITH LAMBDA TO BE ES
     5TIMATED;'/
     6' ENTER 4 IF S.D. = GAMMA, WITH GAMMA TO BE ESTIMATED: ')
         READ(*,*,ERR=1110) IERRMOD
         IF(IERRMOD .LT. 1 .OR. IERRMOD .GT. 4) GO TO 1110


         IF(IERRMOD .GE. 2) THEN

          ESTNAM = ' GAMMA'
          IF(IERRMOD .EQ. 3) ESTNAM = 'LAMBDA'
  225     WRITE(*,223) ESTNAM
  223     FORMAT(/' ENTER THE FINAL ESTIMATE FOR ',A6,' IN THE NPAG RUN:
     1 ')
           READ(*,*,ERR=225) GAMLAM

           IF(GAMLAM .LE. 0.D0) THEN
            WRITE(*,1223)
 1223       FORMAT(/' THIS VALUE MUST BE POSITIVE. '/)
            GO TO 225
           ENDIF

          ENDIF


      CALL SYSTEM('CLS')

      WRITE(*,119) 
  119 FORMAT(//' FOR EACH OUTPUT EQUATION(S), SELECT ONE OF THE FOLLOWIN
     1G'/
     5' OPTIONS FOR THE ASSAY COEFFICIENTS [C0,C1,C2,C3]: '//
     4' ENTER 1 FOR THE DEFAULT OPTION ...'/
     5'         IF THE PATIENT DATA FILE ALREADY INCLUDES '/
     6'         ASSAY COEFFICIENTS, THOSE COEFFICIENTS WILL BE USED. '/
     7'         OTHERWISE THE COEFFICIENTS YOU ENTER BELOW WILL BE '/
     8'         USED;'/
     7' ENTER 0 IF YOU WOULD LIKE THE ASSAY COEFFICIENTS TO BE THOSE'/
     1'         YOU ENTER BELOW (WHETHER OR NOT YOUR PATIENT FILE HAS'/
     2'         ASSAY COEFFICIENTS ALREADY: ')

	CALL PAUSE

C  FOR EACH OUTPUT, INPUT IASS AND [C0P,...,C3P]. 

	DO 2200 IEQ = 1,NUMEQT

 1120   WRITE(*,221) IEQ
  221   FORMAT(/' FOR OUTPUT EQUATION ',I1,':'//
     4' ENTER 1 FOR THE DEFAULT OPTION;'//
     7' ENTER 0 TO BE PROMPTED FOR ASSAY COEFFICIENTS: ')
	READ(*,*,ERR=1120) IAS
	IF(IAS .NE. 0 .AND. IAS .NE. 1) GO TO 1120	  
	IASS(IEQ) = IAS

	WRITE(*,1119) IEQ
 1119   FORMAT(/' ENTER THE GENERAL VALUES FOR [C0,C1,C2,C3] FOR '/
     1' OUTPUT EQUATION ',I1,'. THESE ')
	IF(IAS .EQ. 1) WRITE(*,1121)
	IF(IAS .EQ. 0) WRITE(*,1123)
 1121   FORMAT(' WILL BE USED IF YOUR PATIENT DATA FILE DOES NOT'/
     1' ALREADY INCLUDE ASSAY COEFFICIENTS: ')
 1123   FORMAT(' WILL BE USED EVEN IF YOUR PATIENT DATA FILE ALREADY'/
     1' INCLUDES ASSAY COEFFICIENTS: ')
 4140   READ(*,*,ERR=4145) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
   	GO TO 2200
 4145   WRITE(*,4146)
 4146   FORMAT(/' SEE ABOVE; PLEASE ENTER FOUR REAL NUMBERS: ')
	GO TO 4140


 2200   CONTINUE


 	WRITE(*,2119)
 2119   FORMAT(//' NOTE: DURING THIS PROGRAM, THE PATIENT DATA FILE'/

     1'      WILL HAVE ITS COEFFICIENTS WRITTEN TO THE END OF THE '/
     2'      WORKING COPY FILE. IF COEFFICIENTS ARE ALREADY THERE'/
     3'      FROM A PREVIOUS RUN, THEY WILL BE OVERWRITTEN.'//)
	CALL PAUSE


4150    WRITE(*,129)
  129   FORMAT(//' ENTER THE ACTIVE (SALT) FRACTION OF EACH DRUG. AS '/

     1' AN EXAMPLE, THE A.F. OF THEOPHYLLINE IS 1.0, WHILE THAT OF'/
     2' AMINOPHYLLINE IS TYPICALLY BETWEEN .79 AND .85, DEPENDING ON'/
     3' THE PREPARATION. '//
     4' EACH AF MUST BE A POSITIVE NUMBER LESS THAN OR EQUAL TO 1.0.'/)
       
        DO I = 1,NDRUG
         WRITE(*,1129) I
 1129    FORMAT(' AF FOR DRUG ',I1,': ')
         READ(*,*,ERR=4150) AF(I)
         IF(AF(I) .LE. 0.0 .OR. AF(I) .GT. 1.0) GO TO 4150
        END DO


 3130   WRITE(*,3129)
 3129   FORMAT(/' THE COMMENTS ABOVE HAVE ALL BEEN BASED ON THE '/
     1' ASSUMPTION THAT YOU WANT TO FIND THE OPTIMUM DOSES TO HIT THE'/
     2' TARGET CONCENTRATIONS IN THE "FUTURE" FILE.'//
     3' ENTER 1 IF THIS IS TRUE; '/
     4' ENTER 0 IF, INSTEAD, YOU WANT THE OUTPUT FILE TO SHOW '/
     5'         PREDICTED CONCENTRATIONS AND AUCs FOR THE DOSES IN '/
     6'         THE "FUTURE" FILE (I.E., NO OPTIMIZATION WILL BE DONE'/
     7'         IN THIS CASE): ')
        READ(*,*,ERR=3130) IOPTIMIZE
        IF(IOPTIMIZE .NE. 1 .AND. IOPTIMIZE .NE. 0) GO TO 3130

C  IF IOPTIMIZE = 0, NO OPTIMIZATION IS TO BE DONE, WHICH RENDERS THE
C  QUESTION ABOUT BIASWEIGHT BELOW MOOT. IN THIS CASE, SIMPLY SET 
C  BIASWEIGHT = 0. BUT IF IOPTIMIZE = 1, THEN QUESTION THE USER ABOUT 
C  HOW THE COST FUNCTION (WHICH ESTABLISHES THE BEST DOSES) SHOULD BE
C  CALCULATED. SIMILARLY FOR ITARGET. IT IS IRRELEVANT IF NO 
C  OPTIMIZATION IS TO BE DONE. SO SET IT = 1 IF IOPTIMIZE = 0.

      ITARGET = 1

      BIASWEIGHT = 0.D0


      IF(IOPTIMIZE .EQ. 1) THEN

 3140  WRITE(*,3139)
 3139  FORMAT(/' THE COST FUNCTION TO BE MINIMIZED IN FINDING THE'/
     1' "BEST" DOSES IS (1 - BIASWEIGHT)*V(U) + BIASWEIGHT*B(U), WHERE'/
     2' V(U) IS THE MEAN SQUARED ERROR ASSOCIATED WITH ALL THE '/
     3' GRID PTS. IN THE PARAMETER DENSITY; AND B(U) IS THE MEAN '/
     4' SQUARED ERROR DUE TO BIAS ABOUT THE MEAN RESPONSE.'//
     5' ENTER THE VALUE FOR BIASWEIGHT BETWEEN 0 AND 1, INCLUSIVE: ')
       READ(*,*,ERR=3140) BIASWEIGHT
       IF(BIASWEIGHT .LT. 0.D0 .OR. BIASWEIGHT .GT. 1.D0) GO TO 3140

3150  WRITE(*,3149)
 3149  FORMAT(/' ENTER 1 IF THE OBSERVED VALUES IN THE FUTURE PATIENT'/
     1'         FILE ARE TARGET CONCENTRATIONS; '/
     2' ENTER 2 IF THE OBSERVED VALUES ARE TARGET AUCs: ')
       READ(*,*,ERR=3150) ITARGET
       IF(ITARGET .NE. 1 .AND. ITARGET .NE. 2) GO TO 3150


      ENDIF
C  THE ABOVE ENDIF IS FOR THE  IF(IOPTIMIZE .EQ. 1)  CONDITION.



        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INOPT .EQ. 0) CONDITION.


C  AS OF BESTDOS105.FOR, THE IF(IAF .EQ. 0) CODE IS REMOVED SINCE
C  IAF IS ALWAYS 1 ... IN FACT, ALL CODE FOR IAF IS REMOVED SINCE IT IS
C  NO LONGER NEEDED.


C  PRINT TO THE SCREEN ALL INPUT INFO FOR VERIFICATION.

        CALL VERIF1(FORFILE,ICSVFILE,FUTUREFILEIN,PATH,NOB,C0P,C1P,C2P,
     1   C3P,NUMEQT,NOFIX,VALFIX,PARFIX,TOLER,ATOL,IASS,AF,MATFIL,
     2   NPAGDENFILE,INCLUDPAST,IPASTFILE,PASTFILEIN,IERRMOD,
     3   GAMLAM,NDRUG,IPRIOROBS,TNEXT,IDELTA,MAXOBDIM,MAXCYC,IOPTIMIZE,
     4   BIASWEIGHT,ITARGET)


C  GIVE USER OPTION TO SAVE INPUT DATA TO AN INPUT FILE (FOR ANOTHER
C  RUNNING OF THE PROGRAM).

 4610	WRITE(*,4601)
 4601   FORMAT(//' ENTER 1 TO SAVE THE INFORMATION FOR THIS RUN INTO'/
     1'		A FILE;'/
     1' ENTER 0 OTHERWISE: ')
        READ(*,*,ERR=4610) ISAVFL

     	IF (ISAVFL .NE. 0 .AND. ISAVFL .NE. 1) GO TO 4610

 
        IF(ISAVFL .EQ. 1) THEN

 1960	 WRITE(*,4616)
 4616	 FORMAT(/' ENTER THE DESIRED FILENAME: ')
	 READ(*,2) SAVFIL

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 

C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        TMPFILE = ' '
        TMPFILE = SAVFIL
	 CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(24,FILE=PATHFILE,ERR=1970,STATUS='NEW')
	 GO TO 1975

 1970    WRITE(*,9826) PATHFILE
 9826   FORMAT(/' THE FOLLOWING FILE ALREADY EXISTS ....'/
     1'    ',A73/
     1' ENTER 0 TO ENTER A NEW FILENAME;'/
     2' ENTER 1 TO OVERWRITE THIS FILE: ')
	 READ(*,*,ERR=1970) IFILE
	 IF(IFILE .NE. 0 .AND. IFILE .NE. 1) GO TO 1970
	 IF(IFILE .EQ. 0) GO TO 1960
	 IF(IFILE .EQ. 1) OPEN(24,FILE=PATHFILE)

 1975   WRITE(24,7123) 'BESTDOS OCT_13'

        WRITE(24,8111)  
 8111   FORMAT(' MODEL FILENAME')
	  WRITE(24,2) FORFILE


        WRITE(24,8112)
 8112   FORMAT(' IRAN INDICES')
        WRITE(24,*) (IRAN(I),I=1,NP)

        WRITE(24,9006)
 9006   FORMAT(' NPAG DENSITY FILE')
        WRITE(24,2) NPAGDENFILE


        WRITE(24,9017)
 9017   FORMAT(' MAXCYC')
        WRITE(24,*) MAXCYC

        WRITE(24,9004)
 9004   FORMAT(' INCLUDPAST')
        WRITE(24,*) INCLUDPAST

        WRITE(24,9008)
 9008   FORMAT(' IPASTFILE')
        WRITE(24,*) IPASTFILE

        WRITE(24,9011)
 9011   FORMAT(' PASTFILEIN')
        WRITE(24,2) PASTFILEIN

        WRITE(24,8116)
 8116   FORMAT(' ICSVFILE')
        WRITE(24,*) ICSVFILE

        WRITE(24,8117)
 8117   FORMAT(' FUTUREFILEIN')
	  WRITE(24,2) FUTUREFILEIN

        WRITE(24,8118)
 8118   FORMAT(' TNEXT')
        WRITE(24,*) TNEXT


        WRITE(24,8171)
 8171   FORMAT(' IDELTA')
        WRITE(24,*) IDELTA

        WRITE(24,8119)
 8119   FORMAT(' NOFIX')
	  WRITE(24,*) NOFIX

        WRITE(24,8121)
 8121   FORMAT(' VALFIX ARRAY IF NOFIX > 0')


	  IF(NOFIX .GT. 0) WRITE(24,2416) (VALFIX(I),I=1,NOFIX)
 2416   FORMAT(30(G14.7,1X))

        WRITE(24,8122)
 8122   FORMAT(' TOLER')
	  WRITE(24,*) TOLER

        WRITE(24,8123)
 8123   FORMAT(' NUMEQT')
	  WRITE(24,*) NUMEQT

        WRITE(24,8124)
 8124   FORMAT(' NUMEQT LINES OF ASSAY COEFFICIENTS')
	  DO IEQ=1,NUMEQT
	   WRITE(24,2416) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
	  END DO

        WRITE(24,8133)
 8133   FORMAT(' IERRMOD')
        WRITE(24,*) IERRMOD 

        WRITE(24,8134)

 8134   FORMAT(' GAMLAM')
        IF(IERRMOD .EQ. 1) WRITE(24,*)' -99'
        IF(IERRMOD .GE. 2) WRITE(24,*) GAMLAM        


        WRITE(24,8127)
 8127   FORMAT(' IASS(I),I=1,NUMEQT')
	  WRITE(24,*) (IASS(I),I=1,NUMEQT)

        WRITE(24,9131)

 9131   FORMAT(' NDRUG')
        WRITE(24,*) NDRUG

        WRITE(24,8131)
 8131   FORMAT(' AF(I),I=1,NDRUG')
        WRITE(24,*) (AF(I),I=1,NDRUG)

        WRITE(24,8132)

 8132   FORMAT(' IOPTIMIZE')
        WRITE(24,*) IOPTIMIZE

        WRITE(24,8136)
 8136   FORMAT(' BIASWEIGHT')
        WRITE(24,*) BIASWEIGHT

        WRITE(24,8138)
 8138   FORMAT(' ITARGET')
        WRITE(24,*) ITARGET


        CLOSE(24)


        ENDIF

C  ABOVE ENDIF IS FOR THE  IF(ISAVFL .EQ. 1)  CONDITION.


C  IF THE FILE 'GUICMDS.INX' EXISTS IN THE WORKING DIRECTORY, CONTROL
C  IS TRANSFERRED TO LABEL 1450 IMMEDIATELY AFTER THAT FILE HAS
C  BEEN READ ABOVE.

 1450   CONTINUE


C  SET NOFIXXX TO NOFIX, AND NDIMMM TO NDIM. THEY ARE SUPPLIED IN
C  DIFFERENT COMMON STATEMENTS, AND THEREFORE MUST HAVE DIFFERENT NAMES.


         NOFIXXX = NOFIX
         NDIMMM = NDIM


C  OPEN AND READ NPAGDENFILE. IF INCLUDPAST = 1 (WHICH MEANS THE USER
C  HAS PROVIDED A "PAST" HISTORY FILE (PASTFILEIN) FOR THE SUBJECT OF
C  THIS RUN, AND IF IPRIOROBS = 1 (WHICH MEANS THAT THIS FILE HAS 
C  NON-MISSING OBSERVED VALUES), THEN THE FOLLOWING CODE WILL BE USED
C  TO CALL ROUTINE NPAGFULL TO GET THE POSTERIOR DENSITY FOR THE
C  SUBJECT, WHICH WILL BE STORED INTO THE ARRAY, DENSITY. OTHERWISE, THE
C  ARRAY, DENSITY, IS GOTTEN DIRECTLY FROM NPAGDENFILE.

         TMPFILE = ' '
         TMPFILE = NPAGDENFILE
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)
         OPEN(34,FILE=PATHFILE)
         READ(34,7123) CODE

         IVER = 0
         IF(CODE .EQ. 'DENSITY APR_10') IVER = 1
         IF(CODE .EQ. 'DENSITY OCT_15') IVER = 2

         IF(IVER .EQ. 0) THEN

          WRITE(*,7126) NPAGDENFILE
 7126     FORMAT(/' YOUR DENSITY FILE, ',A20,' IS NOT AN UP-TO-DATE'/
     1' DENSITY FILE.'//
     2' PLEASE RERUN THE PROGRAM AFTER ENSURING THAT YOUR DENSITY '/
     3' FILE HAS "DENSITY APR_10" OR "DENSITY OCT_15" ON THE FIRST'/
     4' LINE.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7126) NPAGDENFILE
        CLOSE(47)

          CALL PAUSE
          STOP

         ENDIF


C  AS THE INFO OF THE DENSITY FILE IS BEING READ, VERIFY THAT IT
C  MATCHES THE INFO READ IN ABOVE. IF NOT, STOP THE PROGRAM, AND TELL
C  THE USER THE REASON.

         READ(34,*) NDIMM
         IF(NDIM .NE. NDIMM) THEN

          WRITE(*,7127) NPAGDENFILE,NDIMM,NDIM,FORFILE 
 7127     FORMAT(/' NDIM READ IN FROM YOUR DENSITY FILE, ',A20/
     1' IS ',I3,' WHICH DOES NOT MATCH THE VALUE OF ',I3,' READ IN '/
     2' FROM YOUR MODEL FILE, ',A20 //

     3' PLEASE RERUN THE PROGRAM AFTER ENSURING COMPATIBILITY BETWEEN'/
     4' THESE TWO FILES. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7127) NPAGDENFILE,NDIMM,NDIM,FORFILE 
        CLOSE(47)

          CALL PAUSE
          STOP

         ENDIF


         READ(34,*) INDPTS
         IF(INDPTS .EQ. 1) NGRID=2129
         IF(INDPTS .EQ. 2) NGRID=5003
         IF(INDPTS .EQ. 3) NGRID=10007
         IF(INDPTS .EQ. 4) NGRID=20011
         IF(INDPTS .EQ. 5) NGRID=40009
         IF(INDPTS .EQ. 6) NGRID=80021
         IF(INDPTS .GT. 6) NGRID = 80021*(INDPTS - 100)

         READ(34,*) NACTVE

         IF(NACTVE .GT. MAXGRD) THEN

          WRITE(*,7128) NPAGDENFILE,NACTVE,MAXGRD,MAXGRD
 7128     FORMAT(//' THE NO. OF ACTIVE GRID POINTS IN YOUR DENSITY'/
     1' FILE, ',A20,' IS ',I7,' WHICH IS MORE THAN THE MAXIMUM ALLOWED'/
     2' FOR THIS PROGRAM (',I7,'). PLEASE RERUN THE PROGRAM WITH A'/
     3' DENSITY FILE HAVING NO MORE THAN  ',I7,' ACTIVE GRID POINTS. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7128) NPAGDENFILE,NACTVE,MAXGRD,MAXGRD
        CLOSE(47)

          CALL PAUSE
          STOP


         ENDIF

         READ(34,*) NVARR

         IF(NVAR .NE. NVARR) THEN

          WRITE(*,7129) NPAGDENFILE,NVARR,NVAR,FORFILE 
 7129     FORMAT(/' NVAR READ IN FROM YOUR DENSITY FILE, ',A20/
     1' IS ',I3,' WHICH DOES NOT MATCH THE VALUE OF ',I3,' READ IN '/
     2' FROM YOUR MODEL FILE, ',A20 //
     3' PLEASE RERUN THE PROGRAM AFTER ENSURING COMPATIBILITY BETWEEN'/
     4' THESE TWO FILES. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7129) NPAGDENFILE,NVARR,NVAR,FORFILE 
        CLOSE(47)

          CALL PAUSE
          STOP

         ENDIF


C  AS OF BESTDOS121.FOR, THE DENSITY FILE CAN BE EITHER HAVE CODE
C  "DENSITY APR_10" OR "DENSITY OCT_15". IN THE FORMER CASE, THERE ARE
C  NO RANFIX PARAMETERS. IN THE LATTER CASE, THERE MAY BE RANFIX 
C  PARAMETERS (I.E., THOSE WHICH WERE FIXED BUT UNKNOWN, AND THEREFORE
C  ESTIMATED IN THE NPAG RUN WHICH PRODUCED THIS DENSITY FILE). IN
C  THIS LATTER CASE, THESE RANFIX PARAMETERS WERE ESTIMATED AND NOW
C  WILL BE TREATED AS IF THEY WERE FIXED AND KNOWN, I.E., THEY WILL
C  BE TREATED AS FIXED PARAMETERS. SO THEY WILL BE COMBINED WITH THE
C  OTHER FIXED PARAMETERS.

C  READ IN PAR, NOFIX, AND PARFIX. NOTE THAT NOFIX SHOULD MATCH NOFIX
C  READ IN ABOVE FROM THE MODEL FILE, BUT THAT IT IS POSSIBLE THE USER
C  HAS USED SLIGHTLY DIFFERENT NAMES FOR PAR AND PARFIX IN THE MODEL
C  FILE AND IN THE DENSITY FILE, SO THESE WILL NOT BE CHECKED FOR
C  CONSISTENCY. 

         READ(34,1717) (PAR(I),I=1,NVAR)
 1717    FORMAT(A11)

         READ(34,*) NOFIXX1
         READ(34,1717) (PARFIX(I),I=1,NOFIXX1)

         IF(IVER .EQ. 2) THEN
          READ(34,*) NRANFIX
          READ(34,1717) (PARRANFIX(I),I=1,NRANFIX)
         ENDIF

C  AS INDICATED ABOVE, SET THE NEW NO. OF FIXED PARAMETERS TO BE THE
C  NO. THAT WERE ORIGINALLY FIXED AND KNOWN (NOFIXX1) + THE NO. THAT
C  WERE ORIGINALLY FIXED AND UNKNOWN (NRANFIX) SINCE RANFIX
C  PARAMETERS ARE TREATED THE SAME AS FIXED PARAMETERS IN THIS PROGRAM.

         NOFIXX = NOFIXX1 + NRANFIX

         IF(NOFIXX .NE. NOFIX) THEN

          WRITE(*,7131) NPAGDENFILE,NOFIXX,NOFIX 
 7131     FORMAT(/' THE NO. OF FIXED PARAMETERS (WHICH INCLUDES THOSE'/
     1' WHICH WERE ORIGINALLY FIXED AND KNOWN AS WELL AS THOSE WHICH'/
     2' WERE ORIGINALLY FIXED AND UNKNOWN IN THE NPAG RUN) WHICH WERE'/
     3' READ IN FROM YOUR DENSITY FILE, ',A20/
     4' IS ',I3,' WHICH DOES NOT MATCH THE VALUE OF ',I3,' READ IN '/
     2' ABOVE FROM AN INSTRUCTION FILE OR THE KEYBOARD.' //
     3' PLEASE RERUN THE PROGRAM AFTER ENSURING COMPATIBILITY BETWEEN'/
     4' THESE TWO FILES. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7131) NPAGDENFILE,NOFIXX,NOFIX,FORFILE 
        CLOSE(47)

          CALL PAUSE
          STOP

         ENDIF


         DO I=1,NVAR
          READ(34,*) (AB(I,J),J=1,2)
         END DO

         READ(34,*) (VALFIXX(I),I=1,NOFIXX1)
         IF(IVER .EQ. 2) READ(34,*) (VALFIXX(I+NOFIXX1),I=1,NRANFIX)

C  VERIFY THAT ALL THE VALFIXX VALUES ARE THE SAME AS THOSE READ IN
C  ABOVE FOR VALFIX. NOTE THAT ISAME RETURNED FROM CALL TO THESAME
C  IS 1 IF THE TWO PRECEEDING ARGUMENTS ARE WITHIN 1.D-10 OF EACH 
C  OTHER (I.E., VIRTUALLY THE SAME VALUE); OTHERWISE IT RETURNS AS 0.

         DO I = 1,NOFIX

          CALL THESAME(VALFIXX(I),VALFIX(I),ISAME)

          IF(ISAME .EQ. 0 .AND. I .LE. NOFIXX1) THEN

           WRITE(*,7132) I,NPAGDENFILE,VALFIXX(I),VALFIX(I),VALFIXX(I)
 7132      FORMAT(/' FIXED VALUE NO. ',I2,' FROM YOUR DENSITY '/
     1' FILE,  ',A20,' IS ',G14.7,' WHICH DOES NOT MATCH THE VALUE '/
     2' OF ',G14.7,' READ IN ABOVE.'//
     3' THE VALUE USED IN THIS RUN WILL BE ',G14.7/)

           CALL PAUSE

          ENDIF

          CALL THESAME(VALFIXX(I),VALFIX(I),ISAME)

          IF(ISAME .EQ. 0 .AND. I .GT. NOFIXX1) THEN

           WRITE(*,7133) I,I-NOFIXX1,NPAGDENFILE,VALFIXX(I),VALFIX(I),
     1                   VALFIXX(I)
 7133      FORMAT(/' FIXED VALUE NO. ',I2,' WHICH WAS RANFIX VALUE'/
     1' NO. ',I2,' IN THE NPAG RUN WHICH PRODUCED YOUR DENSITY '/
     2' FILE,  ',A20,' IS ',G14.7,' WHICH DOES NOT MATCH THE VALUE '/
     2' OF ',G14.7,' READ IN ABOVE.'//
     3' THE VALUE USED IN THIS RUN WILL BE ',G14.7/)


           CALL PAUSE

          ENDIF


         END DO
C??? THE ABOVE END DO IS FOR THE  DO I = 1,NOFIX LOOP.



         READ(34,*)
         READ(34,*) 
         READ(34,*)

         DO I=1,NACTVE
          READ(34,*) (CORDEN(I,J),J=1,NVAR+1)
         END DO

         CLOSE(34)


      IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1) THEN


C  SINCE INCLUDPAST = 1 (WHICH MEANS THE USER HAS PROVIDED A "PAST" 
C  HISTORY FILE (PASTFILEIN) FOR THE SUBJECT OF THIS RUN, AND 
C  IPRIOROBS = 1 (WHICH MEANS THAT THIS FILE HAS NON-MISSING OBSERVED
C  VALUES), THE FOLLOWING CODE WILL BE USED TO CALL ROUTINE NPAGFULL TO
C  GET THE POSTERIOR DENSITY FOR THE SUBJECT, WHICH WILL BE 
C  STORED INTO THE ARRAY, DENSITY.

C  BEFORE CALLING NPAGFULL, PUT ("STACK") THE "PAST" SUBJECT FILE INTO
C  FILE 27, SO IT WILL BE READY TO GO IN SUBROUTINE NPAGFULL.


C  FIRST, ESTABLISH THIS "PAST" SUBJECT IN WORKING COPY FORMAT. 
C  TMPFILE WILL BE PASTFILEIN IF IPASTFILE = 0, AND IT WILL BE
C  'XQZPJ001.PST' IF IPASTFILE = 1.

            TMPFILE = ' '
            IF(IPASTFILE .EQ. 0) TMPFILE = PASTFILEIN
            IF(IPASTFILE .EQ. 1) TMPFILE = 'XQZPJ001.PST'

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        CALL FULLNAME(PATH,TMPFILE,PATHFILE)

C  CALL SUBROUTINE PUTASS TO MAKE SURE THAT THE WORKING COPY PATIENT
C  FILE HAS THE DESIRED ASSAY COEFFICIENTS WRITTEN AT THE END OF IT.

        CALL PUTASS(PATHFILE,IASS,C0P,C1P,C2P,C3P,NUMEQT)

C  OPEN THE PATIENT DATA FILE AND PUT IT INTO FILE (27).

        OPEN(27)

C  CALL SUBROUTINE STACK TO OPEN THE SUBJECT'S DATA FILE AND PUT THE
C  INFO INTO FILE 27. NOTE THAT THERE WILL BE ONLY ONE FILE READ IN
C  AND "STACKED" INTO FILE 27, BUT THE STRUCTURE OF DOING SO IS
C  MAINTAINED SO THAT OTHER CODE DOES NOT HAVE TO BE CHANGED.

C  AS OF BESTDOS108, USE PATFIL INSTEAD OF TMPFILE AS THE 3RD ARGUMENT
C  TO STACK (SEE REASON IN THE COMMENTS AT THE TOP OF BESTDOS108.FOR).

      PATFIL = TMPFILE
	CALL STACK(PATH,MAXOBDIM,PATFIL,AF)

C  NOW FILE 27 HAS THE PATIENT DATA INFO IN IT

C  REWIND FILE 27, WHICH HAS THE PATIENT DATA FILE ON IT.

        REWIND(27)

      WRITE(*,437)
 437  FORMAT(/' NPAG IS NOW OBTAINING THE POSTERIOR DENSITY ...')


C  AS OF BESTDOSTEMP.FOR (TO BE RENAMED BESTDOS112.FOR), TO OBTAIN THE
C  POSTERIOR DENSITY, DO AN EXTENDED PROCESS TO MAKE IT MORE LIKELY
C  THAT THERE WILL BE MORE THAN 1 PT. IN IT. INSTEAD OF JUST CALLING
C  NPAGFULL, WHICH ALWAYS RETURNS THE SINGLE BEST POINT WHICH IS 
C  COMPATIBLE WITH THE "PAST", THIS PROGRAM DOES A 2-STEP PROCESS:

C  1. IT CALLS NPAGFULL11, WHICH RETURNS ALL GRID PTS. FROM THE 
C  ORIGINAL PRIOR DENSITY WHICH ARE ARE REASONABLY COMPATIBLE WITH THE
C  "PAST" (I.E., THOSE WHOSE PROBABILITIES ARE WITHIN 1.D-100 OF THE
C  BEST GRID PT.). THIS IS THE BAYESIAN POSTERIOR OF THE PRIOR DENSITY,
C  BASED ON THE "PAST" OF THE SUBJECT.

C  2. FOR EACH OF THE GRID PTS. IN 1., IT CALLS NPAGFULL TO OBTAIN
C  THE SINGLE DAUGHTER PT. WHICH IS BEST. 

C  THE RESULT THEN WILL BE A POSTERIOR CONSISTING OF THE BEST DAUGHTER
C  POINT FOR EVERY GRID PT. WHICH SHOWED UP IN STEP 1.

      CALL NPAGFULL11(MAXSUB,MAXGRD,MAXDIM,NVAR,NUMEQT,WORK,WORKK,
     1 CORDEN,NDIM,MF,RTOL,ATOL,NOFIX,IRAN,VALFIX,AB,ierrmod,GAMLAM,
     2 NGRID,NACTVE,PYJGX,DENSTOR,CORDLAST)

C  THE BAYESIAN POSTERIOR = CORDEN(I,J),J=1,NVAR+1; I = 1,NACTVE.
C  FOR EACH OF THESE NACTVE GRID PTS., CALL NPAGFULL TO GET THE BEST
C  DAUGHTER POINT (VIS-A-VIS THIS SUBJECT'S "PAST").


      DO IACTIVE = 1,NACTVE

C  REWIND FILE 27, WHICH HAS THE PATIENT DATA FILE ON IT.

       REWIND(27)

C  STORE INTO CORD1 GRID PT. NO. IACTIVE. NOTE BELOW IN THE CALL TO
C  NPAGFULL, THE 20TH ARGUMENT IS 1, INDICATING THAT THERE IS JUST THIS
C  ONE GRID PT. IN THIS PRIOR.
C  NO! THE 20TH ARGUMENT CANNOT BE A CONSTANT SINCE THE DUMMY ARGUMENT
C  IN NPAGFULL IS NACTVE, WHICH IS RESET A COUPLE OF TIMES IN THE
C  NPAGFULL CODE. THIS IS FINE IF THE PROGRAM IS RUN UNDER LAHEY 
C  FORTRAN, BUT CAUSES THE PROGRAM TO BOMB IF THE PROGRAM IS RUN UNDER
C  gfortran. SO, INSTEAD SET NACTVE1 = 1, AND SUPPLY NACTVE1 AS THE
C  2OTH ARGUMENT.

       NACTVE1 = 1

       DO J = 1,NVAR+1
        CORD1(1,J) = CORDEN(IACTIVE,J)
       END DO  


       CALL NPAGFULL(MAXSUB,MAXGRD,MAXDIM,NVAR,NUMEQT,WORK,WORKK,CORD1,
     1  NDIM,MF,RTOL,ATOL,NOFIX,IRAN,VALFIX,AB,ierrmod,GAMLAM,NGRID,
     2  NACTVE1,PYJGX,DENSTOR,CORDLAST,MAXCYC)


C  ON INPUT TO NPAGFULL, CORD1 (IN ROW 1) CONTAINED THE SINGLE GRID
C  POINT IN THE PRIOR DENSITY. NOW, ON RETURN FROM NPAGFULL, ITS
C  FIRST ROW CONTAINS THE POSTERIOR DENSITY OF THE SUBJECT, GIVEN THIS
C  PRIOR. UPDATE ROW NO. IACTIVE OF CORDEN WITH THESE VALUES.

C  FOR BESTDOS112A.FOR, DO NOT SET CORDEN(IACTIVE,NVAR+1) = 
C  CORD1(1,NVAR+1). I.E., JUST RUN THE LOOP BELOW FROM 1 TO NVAR,
C  NOT TO NVAR+1. THE REASON IS THAT THE DENSITY VALUES FROM NPAGFULL11
C  SHOULD BE THE ONES USED BELOW IN THE CALL TO ELDERY. OTHERWISE,
C  THEY ALL GET SET = THE SAME VALUE, AS IF ALL OF THE ORIGINA GRID
C  PTS. FROM NPAGFULL ARE EQUALLY LIKELY.

       DO J = 1,NVAR
        CORDEN(IACTIVE,J) = CORD1(1,J)
       END DO        

      END DO
C  THE ABOVE END DO IS FOR THE DO IACTIVE = 1,NACTVE  LOOP.


C  NOW CORDEN HAS NACTVE GRID PTS. WHICH CONSTITUTES THE POSTERIOR 
C  FOR THIS RUN, IN THIS NEW 2-STEP ALGORITHM. IT WILL BE USED TO
C  ESTABLISH THE ARRAY DENSITY BELOW, WHICH WILL SUPPLIED IN 
C  COMMON/TOCALC TO SUBROUTINE CALCS, WHICH IS CALLED BY ELDERY.


      CLOSE(27)


        ENDIF

C  THE ABOVE ENDIF IS FOR THE  
C   IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1)  CONDITION.



C  NOTE THAT THE DENSITY VALUES MUST BE SET = CORDEN(.,.).


C  IF(INCLUDPAST .EQ. 0 .OR. IPRIOROBS .EQ. 0) THIS CORDEN COMES 
C  DIRECTLY FROM NPAGDENFILE SINCE THE USER HAS NOT PROVIDED A "PAST" 

C  HISTORY FILE (PASTFILEIN), OR IF HE HAS, THIS FILE HAS NO NON-MISSING
C  OBSERVATIONS. IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1), THIS
C  CORDEN COMES FROM THE CALL TO NPAGFULL ABOVE.

C  EITHER WAY, NOTE THAT CORDEN(I,NVAR+1) IS THE DENSITY FOR GRID POINT
C  I, AND THESE MUST BE NORMALIZED SO THAT THEY ALL SUM TO 0.0.


       SUMD = 0.D0
       DO I = 1,NACTVE
        SUMD = SUMD + CORDEN(I,NVAR+1)
         DO J = 1,NVAR
          DENSITY(I,J) = CORDEN(I,J)
         END DO
       END DO

       DO I = 1,NACTVE
        DENSITY(I,NVAR+1) = CORDEN(I,NVAR+1)/SUMD


       END DO

	
C  MUST SET NGRD = NACTVE SINCE IT MUST BE SUPPLIED IN COMMON/TOCALC.

       NGRD = NACTVE


C  THE ARRAY, DENSITY, HAS BEEN ESTABLISHED ABOVE. NOW ESTABLISH THIS 
C  SUBJECT'S COMPLETE PROFILE FOR THE OPTIMIZATION, AND PUT IT INTO THE
C  WORKING COPY FILE, TMPFILE. IT WILL CONSIST OF THE DOSES (BUT NOT THE

C  OBSERVATIONS) IN THE "PAST" ALONG WITH THE DOSES AND OBSERVATIONS IN
C  THE "FUTURE" (WITH ALL TIMES IN THE "FUTURE" INCREASED BY TNEXT).

C  IF INCLUDPAST = 0, TNEXT WILL = 0, AND THE COMPLETE PROFILE WILL
C  CONSIST ONLY OF JUST THE "FUTURE" FILE.

      IF(INCLUDPAST .EQ. 0) THEN

       TNEXT = 0
  
       TMPFILE = ' '
       IF(ICSVFILE .EQ. 0) TMPFILE = FUTUREFILEIN
       IF(ICSVFILE .EQ. 1) TMPFILE = 'XQZPJ001.FUT'

C  SET ND41 = 0. IT WILL BE USED BELOW (AND PUT INTO COMMON/TOCALC). IT
C  IS THE NO. OF DOSES IN THE "PAST" HISTORY OF THE SUBJECT, AND SO IN
C  THIS CASE WHERE THERE IS NO "PAST" HISTORY, IT WILL BE 0. ALSO, 
C  SET THIS VALUE TO NDD41 SINCE IT WILL BE PASSED IN COMMON/TOCALC,
C  AND MUST THEREFORE HAVE A DIFFERENT NAME.

       ND41 = 0

       NDD41 = ND41

C  ALSO, AS OF BESTDOS110, SET M41 = 0. THIS IS PASSED IN 
C  COMMON/TOCALCTP TO SUBROUTINE CALCTPRED SO THAT IT WILL KNOW THAT
C  THERE ARE NO OBSERVATION TIMES FROM THE "PAST".

       M41 = 0

      ENDIF


      IF(INCLUDPAST .EQ. 1) THEN

       TMPFILE1 = ' '
       IF(ICSVFILE .EQ. 0) TMPFILE1 = PASTFILEIN
       IF(ICSVFILE .EQ. 1) TMPFILE1 = 'XQZPJ001.PST'
  
       TMPFILE2 = ' '
       IF(ICSVFILE .EQ. 0) TMPFILE2 = FUTUREFILEIN
       IF(ICSVFILE .EQ. 1) TMPFILE2 = 'XQZPJ001.FUT'

C  SINCE THE FUTURE FILE AND THE PAST FILE HAVE TO OPEN AT THE SAME
C  TIME (IN ORDER TO COMBINE THEM INTO TMPFILE BELOW), THEY CANNOT
C  BE THE SAME FILE. IF THEY ARE, THE PROGRAM WILL STOP WITH A MESSAGE
C  TO THE USER THAT THESE FILES HAVE TO BE DIFFERENT.

       IF(ICSVFILE .EQ. 0 .AND. TMPFILE1 .EQ. TMPFILE2) THEN

        WRITE(*,317) TMPFILE1
  317   FORMAT(/' YOU HAVE CHOSEN THE "PAST" AND THE "FUTURE" FILES'/
     1' TO BE THE SAME FILE ... ',A20//
     2' THIS IS NOT ALLOWED. IF YOU REALLY WANT THE INFORMATION TO BE'/
     3' THE SAME IN THE "PAST" AS IN THE "FUTURE", YOU WILL HAVE TO'/
     4' COPY THE PATIENT FILE TO ANOTHER FILE, AND THEN USE ONE OF'/
     5' THESE FILES AS THE "PAST" AND ONE AS THE "FUTURE".'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,317) TMPFILE1
        CLOSE(47)

        CALL PAUSE
        STOP

       ENDIF 


       TMPFILE = ' '
       TMPFILE = 'BOTHFILES.ZPJ'

C??? DEBUG:
C  THIS FILE WILL BE LEFT IN THE WORKING DIRECTORY FOR NOW, SO THAT
C  IT CAN BE EXAMINED TO VERIFY THAT THE COMPLETE PATIENT PROFILE IS
C  WHAT WAS INTENDED. AT SOME POINT IN THE FUTURE, IF DESIRED, IT CAN
C  BE DELETED AT THE END OF THE RUN. 

       OPEN(41,FILE=TMPFILE1)
       OPEN(42,FILE=TMPFILE2)
       OPEN(43,FILE=TMPFILE)

C  NOW CALL MAKETMP TO COMBINE TMPFILE1 AND TMPFILE2 INTO TMPFILE, 
C  WHICH WILL CONSIST OF THE DOSES (BUT NOT THE OBSERVATIONS) IN 
C  TMPFILE1 (THE "PAST") ALONG WITH THE DOSES AND OBSERVATIONS IN 
C  TMPFILE2(THE "FUTURE"), WITH ALL TIMES IN TMPFILE2 INCREASED BY 
C  TNEXT.

C  AS OF BESTDOS119.FOR, ND42 IS RETURNED, RATHER THAN ND41 IN 
C  THE CALL TO MAKETMP.


       CALL MAKETMP(TNEXT,MAXOBDIM,ND42)

C  NOTE THAT TMPFILE = 'BOTHFILES.ZPJ' HAS A TOTAL OF ND DOSES, BUT
C  THE OPTIMIZATION BELOW WILL BE OVER ONLY THE LAST ND42 OF THEM.
C  THE FIRST ND41 WILL BE FIXED TO THEIR VALUES IN THE FILE.
C  IF THERE ARE NO STEADY STATE DOSE SETS IN THE "PAST", COULD SET
C  ND41 = ND - ND42 NOW. BUT SINCE THERE MAY BE STEADY STATE DOSE SETS
C  AS OF BESTDOS119.FOR, MUST WAIT TO ESTABLISH ND41 UNTIL AFTER
C  SUBROUTINE NEWWORK1 IS CALLED BELOW.


      ENDIF

C  THE ABOVE ENDIF IS FOR THE IF(INCLUDPAST .EQ. 1)  CONDITION.


C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

       CALL FULLNAME(PATH,TMPFILE,PATHFILE)


C  CALL SUBROUTINE PUTASS TO MAKE SURE THAT THE WORKING COPY PATIENT


C  FILE HAS THE DESIRED ASSAY COEFFICIENTS WRITTEN AT THE END OF IT.

       CALL PUTASS(PATHFILE,IASS,C0P,C1P,C2P,C3P,NUMEQT)


C  OPEN THE PATIENT DATA FILE AND PUT IT INTO FILE (27).

        OPEN(27)

C  CALL SUBROUTINE STACK TO OPEN THE SUBJECT'S DATA FILE AND PUT THE
C  INFO INTO FILE 27. NOTE THAT THERE WILL BE ONLY ONE FILE READ IN
C  AND "STACKED" INTO FILE 27, BUT THE STRUCTURE OF DOING SO IS 
C  MAINTAINED SO THAT OTHER CODE DOES NOT HAVE TO BE CHANGED.


C  AS OF BESTDOS108, USE PATFIL INSTEAD OF TMPFILE AS THE 3RD ARGUMENT
C  TO STACK (SEE REASON IN THE COMMENTS AT THE TOP OF BESTDOS108.FOR).

      PATFIL = TMPFILE
	CALL STACK(PATH,MAXOBDIM,PATFIL,AF)


C  NOW FILE 27 HAS THE PATIENT DATA INFO IN IT
C  REWIND FILE 27, WHICH HAS THE PATIENT DATA FILE ON IT.

	REWIND(27)


C  AS OF BESTDOS119.FOR, FILE 27 DATA MUST BE CONVERTED TO FILE 37
C  DATA AS FOLLOWS:

C  PUT THE SUBJECT'S DATA ONTO FILE 37 BY CALLING SUBROUTINE NEWWORK1
C  (SIMILAR ROUTINE TO THE ONE IN npageng25.f, EXCEPT IT READS FILE 27
C  AND WRITES TO FILE 37, RATHER THAN READING FROM FILE 23 AND WRITING
C  TO FILE 27). NOTE THAT IT HAS NO ARGUMENTS; NONE ARE NEEDED IN THIS
C  PROGRAM.

C  NOTE THAT IF THE SUBJECT FILE HAS NO STEADY STATE DOSE INDICATORS, IT
C  WILL NOT BE CHANGED; IF IT DOES, IT WILL BE ALTERED TO INCLUDE AN
C  EXTRA 100 DOSES SETS FOR EACH STEADY STATE DOSE INDICATOR. NOTE THAT
C  SUBROUTINE NEWWORK1 WILL LEAVE IN THE NEGATIVE DOSE TIME (WHICH IS
C  THE STEADY STATE DOSE INDICATOR) BECAUSE THE ID ROUTINES NEED TO SEE
C  THIS INDICATOR TO KNOW THAT A STEADY STATE DOSE SET IS COMING.


       OPEN(37,FILE='FILE37')
C???DEBUG. MAKE THIS TEMPORARY FILE PERMANENT WHILE DEBUGGING.

       CALL NEWWORK1
       REWIND(37)


	CALL FILRED(NOBSER,ND,NDRUG,RS,SIG,YO,C0,C1,C2,C3,MAXOBDIM)

C  YO(I),I=1,NOBSER; J=1,NUMEQT, ARE THE TARGET OBSERVED VALUES FOR 
C  THIS SUBJECT. FIND THE ASSAY STANDARD DEVIATIONS. FOR EACH 
C  OBSERVED VALUE, SI = (C0+C1*Y+C2*Y**2+C3*Y**3). THEN THE WEIGHT 
C  ASSOCIATED WITH OBSERVATION I WILL BE 1/SI**2.
C  NO! WEIGHT(.,.) ARE NO LONGER USED IN SUBROUTINE WSUMSQ. SO
C  COMMENT OUT THIS CODE.

C       DO I=1,NOBSER

C        DO J = 1,NUMEQT
C         Y=YO(I,J)
C         WEIGHT(I,J) = 
C    1     1.D0/(C0(J) + C1(J)*Y + C2(J)*Y*Y + C3(J)*Y**3)**2.D0
C        END DO
C       END DO

C  BEFORE CALL TO ELDERY, SET NVARR = NVAR (NVAR IS ALREADY IN A COMMON
C  STATEMENT, AND NVARR MUST BE SUPPLIED TO SUBROUTINE CALCS, CALLED
C  BY ELDERY).`

	NVARR = NVAR

C  AS OF BESTDOS113, ELDERY WILL BE CALLED TWICE, ONCE WITH THE DENSITY
C  AS IT NOW STANDS (I.E., THE WITH THE SAME VALUES AS CALCULATED
C  ORIGINALLY FROM NPAGFULL1), AS WAS DONE IN BESTDOS112A.FOR; AND ONCE
C  WITH THE DENSITY OF ALL THE GRID PTS. BEING THE SAME, AS WAS DONE IN
C  BESTDOS112.FOR.


C  NOTE THAT IF INCLUDPAST = 0, ND41 AND NDD41 WERE ALREADY SET = 0
C  ABOVE. BUT IF INCLUDPAST = 1, THEY HAVE NOT BEEN ESTABLISHED YET
C  FROM ND42 WHICH RETURNS FROM THE CALL TO MAKETMP, AND FROM ND WHICH
C  RETURNS FROM THE CALL TO FILRED ABOVE.

      IF(INCLUDPAST .EQ. 1) THEN     

       ND41 = ND - ND42

C  MUST SET ND41 TO BE NDD41 SINCE IT WILL BE PASSED IN COMMON/TOCALC,
C  AND MUST THEREFORE HAVE A DIFFERENT NAME.

       NDD41 = ND41

      ENDIF



C  *************** FIRST CALL TO ELDERY BELOW *************************

C  THE FIRST CALL TO ELDERY WILL BE WITH THE DENSITY VALUES AS
C  CALCULATED ORIGINALLY FROM NPAGFULL1 (AS WAS DONE IN 
C  BESTDOS112A.FOR). THESE VALUES ARE ALREADY IN DENSITY(.,.).

C  CALL SUBROUTINE ELDERY TO FIND THE BEST SET OF NDOS DOSES (AT THE 
C  TIMES READ IN FROM THE PATIENT DATA FILE BY SUBROUTINE FILRED - 
C  THESE TIMES ARE PUT INTO COMMON BY FILRED) TO MINIMIZE THE EXPECTED 
C  WEIGHTED SUM OF SQUARES OF DIFFERENCES BETWEEN OBSERVED AND TARGET 
C  CONCENTRATIONS (THE OBSERVATION TIMES AND TARGET CONCENTRATIONS ARE 
C  ALSO READ IN BY FILRED AND PUT INTO COMMONS TO BE USED BY SUBROUTINE 
C  CALCS WHICH IS CALLED BY SUBROUTINE ELDERY). THE EXPECTED VALUE IS 
C  OVER THE PRIOR DENSITY (HAVING PARAMETER VALUES AND CORRESPONDING 
C  DENSITIES) READ IN ABOVE.

C  IN PARTICULAR, ELDERY MINIMIZES EXPSUM = SUM, OVER I=1,NGRD, OF 
C  DENSITY(I,NVAR+1)*SUMSQ(I), WHERE SUMSQ(I) IS THE WEIGHTED SUM OF 
C  SQUARES OF DIFFERENCES W(k,l)*(O(I,k,l) -T(k,l))**2, WHERE O(I,k,l) 
C  IS THE CONCENTRATION AT TIME (k,l) ASSUMING THE ITH GRID POINT; 
C  T(k,l) IS THE TARGET CONCENTRAIION OF THE lth EQUATION AT TIME k, AND
C  W(k,l) IS THE CORRESPONDING WEIGHT CALCULATED ABOVE.


C  PREPARE TO CALL ELDERY.

C  THE IV DOSE VALUES IN THE PATIENT DATA FILE ARE IN RS(I,2*J-1), 
C  I=1,ND; J=1,NDRUG; AND THE BOLUS VALUES IN THE PATIENT DATA FILE
C  ARE IN RS(I,2*J), ALL RETURNED FROM THE CALL TO FILRED ABOVE. BUT
C  NOTE THAT ONLY THE NON-0 IVs AND BOLUSES FROM DOSE EVENTS ND41+1
C  TO ND WILL BE THE DOSES OVER WHICH THE OPTIMIZATION WILL TAKE PLACE
C  BELOW. THE REASON IS THAT THE FIRST ND41 DOSE EVENTS WERE IN THE
C  "PAST", WHILE THE DOSES STARTING WITH NO. ND41+1 ARE IN THE "FUTURE"
C  (SEE SUBROUTINE MAKETMP). THESE VALUES ARE TO BE USED AS THE INITIAL
C  GUESSES TO INITIATE THE NELDER MEED ALGORITHM.



C  AS OF BESTDOS111.FOR, IF IOPTIMIZE = 0, IT MEANS THAT THE USER DOES
C  NOT WANT TO FIND THE BEST DOSES TO HIT THE TARGETS. INSTEAD HE 
C  SIMPLY WANTS TO USE THE DOSES SPECIFIED IN THE "FUTURE" FILE. THIS
C  CAN BE ACHIEVED BY SETTING STEP(.) VALUUES BELOW TO 0. THAT WAY,
C  ELDERY WILL SIMPLY SETTLE FOR THE INITIAL VALUES, AS DESIRED.

	IDOS = 0

      DO I = ND41+1,ND

       DO J = 1,NDRUG
        IF(RS(I,2*J-1) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         START(IDOS) = RS(I,2*J-1)
         STEP(IDOS)= -.2D0*START(IDOS)
         IF(IOPTIMIZE .EQ. 0) STEP(IDOS) = 0.D0
        ENDIF

        IF(RS(I,2*J) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         START(IDOS) = RS(I,2*J)
         STEP(IDOS)= -.2D0*START(IDOS)
         IF(IOPTIMIZE .EQ. 0) STEP(IDOS) = 0.D0
        ENDIF
       END DO
      END DO


C  NOTE THAT THE TOTAL NO. OF DOSES OVER WHICH THE MINIMIZATION WILL 
C  BE DONE IS NDOS = IDOS FROM THE ABOVE LOOP. THIS VALUE MUST 

C  BE .LE. 5000.
   
      NDOS = IDOS

	IF(NDOS .GT. 5000) THEN

	 WRITE(*,103) NDOS
  103    FORMAT(/' THE MAXIMUM NO. OF DOSES OVER WHICH THE'/
     1' MINIMIZATION CAN BE RUN IS 5000. IN YOUR PATIENT DATA FILE,'/
     2' THE NO. OF NON-ZERO DOSES (IV OR  BOLUS) OVER WHICH THE '/
     3' OPTIMIZATION TAKES PLACE IS ',I8,' WHICH IS MORE THAN 5000. '/
     4' SO THE PROGRAM STOPS.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,103) NDOS
        CLOSE(47)

	 CALL PAUSE
	 STOP

	ENDIF



C  HARDCODE IPRINTOUT = 1 FOR NOW, SO THAT THE CONVERGENCE INFO WILL
C  PRINT TO THE SCREEN IN SUBROUTINE ELDERY. IF THIS INFO SHOULD BE
C  SUPPRESSED IPRINTOUT WILL BE CHANGED TO 0.

        IPRINTOUT = 1


        IF(IOPTIMIZE .EQ. 0) IPRINTOUT = 0

	CALL ELDERY(NDOS,START,DOSEBEST,VALMIN,1.D-10,STEP,1000,CALCS,
     1  0,ICONV,NITER,ICNT,IPRINTOUT)


C  NOTE THAT ELDERY CALLS CALCS TO WHICH THE FOLLOWING VALUES ARE 
C  SUPPLIED VIA COMMON TOCALC (NDOS AND THE CANDIDATE OF DOSES ARE 
C  SUPPLIED AS CALLING ARGUMENTS FROM SUBROUTINE ELDERY).

C   1. NOBSER = NO. OF OBSERVED VALUES IN THE PATIENT DATA FILE.
C   2. NUMEQT = NO. OF OUTPUT EQUATIONS IN THE PATIENT DATA FILE.
C   3. NGRD = NO. OF GRID POINTS OVER WHICH THE ABOVE EXPECTED VALUE
C             IS TO BE CALCULATED.
C   4. NVAR = NO. OF DIMENSIONS IN THE RANDOM PARAMETER VECTOR.
C   5. DENSITY(I,J) = VALUE OF THE JTH RANDOM VARIABLE FOR GRID POINT I,
C                    J=1,NVAR; I=1,NGRD.
C      DENSITY(I,NVAR+1) = DISCRETE DENSITY ASSOCIATED WITH GRID PT. I.
C   6. NDD41 IS NO. OF DOSE EVENTS IN THE "PAST"
C   7. BIASWEIGHT = WEIGHT FOR THE BIAS TERM IN THE CALCULATION OF THE
C             COST FUNCTION; (1-BIASWEIGHT) = WEIGHT FOR THE MEAN SQUARE
C             ERROR TERM.


C  RETURNING FROM ELDERY ARE:

C  DOSEBEST(I),I=1,NDOS = THE DOSES WHICH MINIMIZE THE EXPECTED 
C    WEIGHTED SUM OF SQUARES DESCRIBED ABOVE.

C  VALMIN = MIN. VALUE OF THE FUNCTION ACHIEVED.

C  ICONV = 1 IF THE CONVERGED; 0 OTHERWISE.

C  NOTE THAT PREDMIN, PASSED TO THIS ROUTINE VIA COMMON/PREDVAL, WHERE
C  IT WAS STORED BY SUBROUTINE CALCS (THE ROUTINE CALLED BY ELDERY),
C  CONTAINS, FOR EACH GRID POINT, THE PREDICTED VALUES. THESE VALUES
C  WILL BE WRITTEN, ALONG WITH THE TARGET CONCENTRATIONS, THE BEST SET
C  OF DOSES, AND THE ASSOCIATED VALMIN, INTO DOSEROUTxxxx BELOW ... IF
C  THIS CALL TO ELDERY PRODUCES A VALMIN WHICH IS LOWER THAN THE NEXT
C  CALL. STORE THESE VALUES FOR NOW.

C  STORE PREDMIN, VALMIN, DOSEBEST, DENSITY FROM THIS RUN.

      VALMIN1 = VALMIN

      DO IGRD = 1,NGRD
       DO I = 1,NOBSER
        DO J = 1,NUMEQT
         PREDMIN1(IGRD,I,J) = PREDMIN(IGRD,I,J)
        END DO
       END DO
      END DO

      DO I = 1,NACTVE
       DO J = 1,NVAR+1
        DENSITY1(I,J) = DENSITY(I,J)
       END DO
      END DO

      DO I = 1,NDOS
       DOSEBEST1(I) = DOSEBEST(I)
      END DO



C  *************** FIRST CALL TO ELDERY ABOVE *************************


C  *************** SECOND CALL TO ELDERY BELOW ************************

C  THE SECOND CALL TO ELDERY WILL BE WITH DENSITY VALUES WHICH ARE
C  ALL THE SAME (AS WAS DONE IN BESTDOS112.FOR). THESE VALUES WILL
C  BE ESTABLISHED NOW.

      DO I = 1,NACTVE
       DENSITY(I,NVAR+1) = 1.D0/NACTVE
      END DO

C  CALL SUBROUTINE ELDERY TO FIND THE BEST SET OF NDOS DOSES (AT THE 
C  TIMES READ IN FROM THE PATIENT DATA FILE BY SUBROUTINE FILRED - 
C  THESE TIMES ARE PUT INTO COMMON BY FILRED) TO MINIMIZE THE EXPECTED 
C  WEIGHTED SUM OF SQUARES OF DIFFERENCES BETWEEN OBSERVED AND TARGET 
C  CONCENTRATIONS (THE OBSERVATION TIMES AND TARGET CONCENTRATIONS ARE 
C  ALSO READ IN BY FILRED AND PUT INTO COMMONS TO BE USED BY SUBROUTINE 
C  CALCS WHICH IS CALLED BY SUBROUTINE ELDERY). THE EXPECTED VALUE IS 
C  OVER THE PRIOR DENSITY (HAVING PARAMETER VALUES AND CORRESPONDING 
C  DENSITIES) READ IN ABOVE.

C  IN PARTICULAR, ELDERY MINIMIZES EXPSUM = SUM, OVER I=1,NGRD, OF 
C  DENSITY(I,NVAR+1)*SUMSQ(I), WHERE SUMSQ(I) IS THE WEIGHTED SUM OF 
C  SQUARES OF DIFFERENCES W(k,l)*(O(I,k,l) -T(k,l))**2, WHERE O(I,k,l) 
C  IS THE CONCENTRATION AT TIME (k,l) ASSUMING THE ITH GRID POINT; 
C  T(k,l) IS THE TARGET CONCENTRAIION OF THE lth EQUATION AT TIME k, AND
C  W(k,l) IS THE CORRESPONDING WEIGHT CALCULATED ABOVE.


C  PREPARE TO CALL ELDERY.

C  THE IV DOSE VALUES IN THE PATIENT DATA FILE ARE IN RS(I,2*J-1), 
C  I=1,ND; J=1,NDRUG; AND THE BOLUS VALUES IN THE PATIENT DATA FILE
C  ARE IN RS(I,2*J), ALL RETURNED FROM THE CALL TO FILRED ABOVE. BUT


C  NOTE THAT ONLY THE NON-0 IVs AND BOLUSES FROM DOSE EVENTS ND41+1
C  TO ND WILL BE THE DOSES OVER WHICH THE OPTIMIZATION WILL TAKE PLACE
C  BELOW. THE REASON IS THAT THE FIRST ND41 DOSE EVENTS WERE IN THE
C  "PAST", WHILE THE DOSES STARTING WITH NO. ND41+1 ARE IN THE "FUTURE"
C  (SEE SUBROUTINE MAKETMP). THESE VALUES ARE TO BE USED AS THE INITIAL
C  GUESSES TO INITIATE THE NELDER MEED ALGORITHM.

C  AS OF BESTDOS111.FOR, IF IOPTIMIZE = 0, IT MEANS THAT THE USER DOES
C  NOT WANT TO FIND THE BEST DOSES TO HIT THE TARGETS. INSTEAD HE 
C  SIMPLY WANTS TO USE THE DOSES SPECIFIED IN THE "FUTURE" FILE. THIS
C  CAN BE ACHIEVED BY SETTING STEP(.) VALUUES BELOW TO 0. THAT WAY,
C  ELDERY WILL SIMPLY SETTLE FOR THE INITIAL VALUES, AS DESIRED.

C  NOTE THAT THE RS(.,.) VALUES HAVE CHANGED FROM THEIR READ IN VALUES
C  FROM SUBROUTINE FILRED (IN THE FIRST CALL TO ELDERY ABOVE). SO,
C  RESET THESE VALUES BEFORE ESTABLISHING START(.) AND STEP(.) FOR THE
C  2ND CALL TO ELDERY BELOW. DO THIS BY CALLING FILRED AGAIN.


C  AS OF BESTDOS119.FOR, THE PATIENT DATA ARE ON FILE 37 INSTEAD OF
C  FILE 27 (SEE NOTES ABOVE WHERE SUBROUTINE NEWWORK1 IS CALLED).

C  REWIND FILE 37, WHICH HAS THE PATIENT DATA FILE ON IT.

	REWIND(37)

	CALL FILRED(NOBSER,ND,NDRUG,RS,SIG,YO,C0,C1,C2,C3,MAXOBDIM)


	IDOS = 0

      DO I = ND41+1,ND
       DO J = 1,NDRUG
        IF(RS(I,2*J-1) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         START(IDOS) = RS(I,2*J-1)
         STEP(IDOS)= -.2D0*START(IDOS)
         IF(IOPTIMIZE .EQ. 0) STEP(IDOS) = 0.D0
        ENDIF
        IF(RS(I,2*J) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         START(IDOS) = RS(I,2*J)
         STEP(IDOS)= -.2D0*START(IDOS)
         IF(IOPTIMIZE .EQ. 0) STEP(IDOS) = 0.D0

        ENDIF
       END DO
      END DO


C  NOTE THAT THE TOTAL NO. OF DOSES OVER WHICH THE MINIMIZATION WILL 
C  BE DONE IS NDOS = IDOS FROM THE ABOVE LOOP. THIS VALUE MUST 
C  BE .LE. 5000.
   
      NDOS = IDOS


	IF(NDOS .GT. 5000) THEN

	 WRITE(*,103) NDOS

        OPEN(47,FILE=ERRFIL)
         WRITE(47,103) NDOS
        CLOSE(47)

	 CALL PAUSE
	 STOP

	ENDIF


C  HARDCODE IPRINTOUT = 1 FOR NOW, SO THAT THE CONVERGENCE INFO WILL
C  PRINT TO THE SCREEN IN SUBROUTINE ELDERY. IF THIS INFO SHOULD BE
C  SUPPRESSED IPRINTOUT WILL BE CHANGED TO 0.

        IPRINTOUT = 1
        IF(IOPTIMIZE .EQ. 0) IPRINTOUT = 0

	CALL ELDERY(NDOS,START,DOSEBEST,VALMIN,1.D-10,STEP,1000,CALCS,
     1  0,ICONV,NITER,ICNT,IPRINTOUT)

C  NOTE THAT ELDERY CALLS CALCS TO WHICH THE FOLLOWING VALUES ARE 
C  SUPPLIED VIA COMMON TOCALC (NDOS AND THE CANDIDATE OF DOSES ARE 
C  SUPPLIED AS CALLING ARGUMENTS FROM SUBROUTINE ELDERY).

C   1. NOBSER = NO. OF OBSERVED VALUES IN THE PATIENT DATA FILE.
C   2. NUMEQT = NO. OF OUTPUT EQUATIONS IN THE PATIENT DATA FILE.
C   3. NGRD = NO. OF GRID POINTS OVER WHICH THE ABOVE EXPECTED VALUE
C             IS TO BE CALCULATED.
C   4. NVAR = NO. OF DIMENSIONS IN THE RANDOM PARAMETER VECTOR.
C   5. DENSITY(I,J) = VALUE OF THE JTH RANDOM VARIABLE FOR GRID POINT I,
C                    J=1,NVAR; I=1,NGRD.
C      DENSITY(I,NVAR+1) = DISCRETE DENSITY ASSOCIATED WITH GRID PT. I.
C   6. NDD41 IS NO. OF DOSE EVENTS IN THE "PAST"
C   7. BIASWEIGHT = WEIGHT FOR THE BIAS TERM IN THE CALCULATION OF THE
C             COST FUNCTION; (1-BIASWEIGHT) = WEIGHT FOR THE MEAN SQUARE
C             ERROR TERM.

C  RETURNING FROM ELDERY ARE:

C  DOSEBEST(I),I=1,NDOS = THE DOSES WHICH MINIMIZE THE EXPECTED 
C    WEIGHTED SUM OF SQUARES DESCRIBED ABOVE.

C  VALMIN = MIN. VALUE OF THE FUNCTION ACHIEVED.

C  ICONV = 1 IF THE CONVERGED; 0 OTHERWISE.

C  NOTE THAT PREDMIN, PASSED TO THIS ROUTINE VIA COMMON/PREDVAL, WHERE

C  IT WAS STORED BY SUBROUTINE CALCS (THE ROUTINE CALLED BY ELDERY),
C  CONTAINS, FOR EACH GRID POINT, THE PREDICTED VALUES. THESE VALUES
C  WILL BE WRITTEN, ALONG WITH THE TARGET CONCENTRATIONS, THE BEST SET
C  OF DOSES, AND THE ASSOCIATED VALMIN, INTO DOSEROUTxxxx BELOW ... IF
C  THIS CALL TO ELDERY PRODUCES A VALMIN WHICH IS LOWER THAN THE 
C  PREVIOUS CALL. STORE THESE VALUES FOR NOW.

C  STORE PREDMIN, VALMIN, DOSEBEST, DENSITY FROM THIS RUN.

      VALMIN2 = VALMIN


C  *************** SECOND CALL TO ELDERY ABOVE ***********************

C  IF VALMIN2 .LE. VALMIN1, THEN THE VALUES IN PREDMIN, DENSITY,
C  AND DOSEBEST ARE CORRECT. OTHERWISE, THE FIRST CALL TO ELDERY 
C  RESULTED IN THE MINIMUM SUM OF SQUARES. IN THIS CASE, RESET THESE
C  VALUES TO WHAT THEY WERE AFTER THAT FIRST CALL TO ELDERY.

      IF(VALMIN2 .GT. VALMIN1) THEN

       VALMIN = VALMIN1

       DO IGRD = 1,NGRD
        DO I = 1,NOBSER
         DO J = 1,NUMEQT
          PREDMIN(IGRD,I,J) = PREDMIN1(IGRD,I,J)
         END DO
        END DO
       END DO

       DO I = 1,NACTVE
        DO J = 1,NVAR+1
         DENSITY(I,J) = DENSITY1(I,J)
        END DO
       END DO

       DO I = 1,NDOS
        DOSEBEST(I) = DOSEBEST1(I)
       END DO


      ENDIF
C  ABOVE ENDIF IS FOR THE  IF(VALMIN2 .GT. VALMIN1)  CONDITION. 

C  REWIND FILE 27, AND CALL FILRED AGAIN. THIS IS DONE TO RE-ESTABLISH
C  THE ORIGINAL DOSE VALUES INTO THE RS(.,.) ARRAY. THE REASON IS THAT 
C  ELDERY CALLS CALCS, WHICH CALLS WSUMSQ, WHICH SETS THE RS(.,.) VALUES
C  TO THE CURRENT CANDIDATES SUPPLIED BY ELDERY. AND IF THESE VALUES 
C  HAPPEN TO BE SET = 0, THEN THE CODE TO WRITE OUT THE OPTIMAL DOSES
C  BELOW (WHICH DEPEND ON RS(I,2*J-1) OR RS(I,2*J) BEING > 0 TO 
C  IDENTIFY AN IV OR A BOLUS, RESPECTIVELY) WILL NOT BE ENGAGED. AND
C  THEN THE #OPTIMAL DOSES LINE WILL BE FOLLOWED BY NO DOSES AT ALL.
C  IN ADDITION, THE CODE TO ESTABLISH THE BEST DOSES INTO RS(.,.) FOR
C  THE PURPOSE OF WRITING THE PREDICTED VALUES FOR THESE BEST DOSES,
C  FOR EACH GRID PT. IN THE PARAMETER DENSITY, WILL NOT BE ENGAGED
C  EITHER.


C  AS OF BESTDOS119.FOR, THE PATIENT DATA ARE ON FILE 37 INSTEAD OF
C  FILE 27 (SEE NOTES ABOVE WHERE SUBROUTINE NEWWORK1 IS CALLED).

C  REWIND FILE 37, WHICH HAS THE PATIENT DATA FILE ON IT.

	REWIND(37)
      CALL FILRED(NOBSER,ND,NDRUG,RS,SIG,YO,C0,C1,C2,C3,MAXOBDIM)

C  CREATE OUTPUT FILE WHICH HAS 'DOSEROUT' AS ITS 1ST 8 CHARACTERS AND
C  NAME AS ITS LAST 4. NOTE THAT NAME WAS ESTABLISHED ABOVE WHEN 
C  FILE 'EXTNUM' WAS READ. 

        OUTFIL = 'DOSEROUT'//NAME
        TMPFILE = ' '
        TMPFILE = OUTFIL
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(56,FILE=PATHFILE)

C  FIRST, WRITE ALL INPUT INSTRUCTIONS TO THE OUTPUT FILE.

        WRITE(56,8151)
 8151   FORMAT(/' INSTRUCTIONS FOR THIS RUN WERE AS FOLLOWS: '/)

        WRITE(56,8137)
 8137   FORMAT(/' THE PATH FOR THE WORKING DIRECTORY WAS ')
        WRITE(56,2221) PATH


        WRITE(56,8111) 
	  WRITE(56,2) FORFILE

        WRITE(56,8112)
        WRITE(56,*) (IRAN(I),I=1,NP)

        WRITE(56,9006)
        WRITE(56,2) NPAGDENFILE

        WRITE(56,9017)
        WRITE(56,*) MAXCYC    

        WRITE(56,9008)
        WRITE(56,*) IPASTFILE

        WRITE(56,9011)
        IF(INCLUDPAST .EQ. 0) WRITE(56,9007)
 9007   FORMAT(' N/A')
        IF(INCLUDPAST .EQ. 1) WRITE(56,2) PASTFILEIN

        WRITE(56,8116)
        WRITE(56,*) ICSVFILE

        WRITE(56,8117)
	  WRITE(56,2) FUTUREFILEIN

        WRITE(56,8118)
        WRITE(56,*) TNEXT

        WRITE(56,8119)
	  WRITE(56,*) NOFIX

        WRITE(56,8121)
	  IF(NOFIX .GT. 0) WRITE(56,2416) (VALFIX(I),I=1,NOFIX)

        WRITE(56,8122)
	  WRITE(56,*) TOLER

        WRITE(56,8123)
	  WRITE(56,*) NUMEQT

        WRITE(56,8124)
	  DO IEQ=1,NUMEQT
	   WRITE(56,2416) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
	  END DO

        WRITE(56,8127)
	  WRITE(56,*) (IASS(I),I=1,NUMEQT)

        WRITE(56,9131)
        WRITE(56,*) NDRUG


        WRITE(56,8131)
        WRITE(56,*) (AF(I),I=1,NDRUG)

        WRITE(56,8132)
        WRITE(56,*) IOPTIMIZE

        WRITE(56,8136)
        WRITE(56,*) BIASWEIGHT

        WRITE(56,8138)
        WRITE(56,*) ITARGET


        WRITE(56,8152)
 8152   FORMAT(/'-----------------------------------------------------')


C  NOW, WRITE THE RESULTS TO THE OUTPUT FILE.

      WRITE(56,206) EEXPSUMMIN,BIASWEIGHT,SUMMIN,BIASMIN

      WRITE(*,206) EEXPSUMMIN,BIASWEIGHT,SUMMIN,BIASMIN
  206 FORMAT(/' THE MIMIMUM ACHIEVED COST FUNCTION IS ',G14.6//
     1' WHICH = (1 - BIASWEIGHT)*SUMMIN + BIASWEIGHT*BIASMIN, WHERE '//


     2' BIASWEIGHT = ',G14.6/
     3' SUMMIN = ',G14.6/
     4' BIASMIN = ',G14.6)

	WRITE(56,201) NOBSER,NUMEQT
  201   FORMAT(//' THE NEXT ',I4,' LINES GIVE THE TARGET VALUES, EACH'/
     1' LINE HAVING THE VALUES FOR EACH OF THE ',I2,' OUTPUT EQUATION(S)
     2.')

	DO I = 1,NOBSER
	 WRITE(56,1212) (YO(I,J),J=1,NUMEQT)
	END DO
 1212   FORMAT(1X,6(G12.5,1X))
 

      WRITE(56,717) NVAR,NACTVE
  717 FORMAT(//' FOR THE DENSITY USED IN THE CALCULATIONS OF THE '/
     1' SIMULATED VALUES BELOW (AND USED TO ESTABLISH THE OPTIMAL'/
     2' DOSES IF THAT WAS REQUESTED) ...'/
     3' THE NO. OF RANDOM PARAMETERS IS ',I8/
     4' THE NO. OF GRID POINTS IS ',I8/
     5' THE DENSITY ARRAY ITSELF NOW FOLLOWS, ONE LINE (PERHAPS '/
     6' WRAPPED) FOR EACH GRID PT. WITH THE PARAMETER VALUES FOLLOWED'/
     7' BY THE PROB. FOR EACH POINT')
      
      DO I = 1,NACTVE
       WRITE(56,*) (DENSITY(I,J),J=1,NVAR+1)
      END DO

        WRITE(56,202) NGRD,NGRD,NOBSER,NUMEQT
  202   FORMAT(//' THE FOLLOWING ',I5,' SET(S) OF LINES GIVE THE'/
     1' ACHIEVED OBSERVED VALUES FOR EACH OF THE ',I5,' GRID PT(S).'/

     2' EACH SET HAS ',I4,' ROW(S), (ONE ROW FOR EACH OBSERVATION TIME)'
     3/
     4' AND ',I2,' COLUMN(S) (EACH COLUMN RESPRESENTS AN OUTPUT EQ.)'/)

	 DO IGRD = 1,NGRD
	  DO I = 1,NOBSER
	   WRITE(56,1212) (PREDMIN(IGRD,I,J),J=1,NUMEQT)
	  END DO
         END DO

	IF(ICONV .EQ. 0) WRITE(*,7134) 
	IF(ICONV .EQ. 0) WRITE(56,7134) 
 7134 FORMAT(//' THE NELDER MEED ESTIMATE FOR THE BEST SET OF DOSES'/
     1' DID NOT CONVERGE. '/)


      WRITE(56,101)
  101 FORMAT(//' THE FOLLOWING MATRIX GIVES THE OPTIMAL DOSES. EACH'/
     1' HAS, IN ORDER, TIME, DURATION, TOTAL DOSE, AND DRUG NO.')

C  BUT NOTE THAT ALL TIMES IN THE "FUTURE" HAD TNEXT ADDED TO THEM WHEN
C  THE "FUTURE" WAS CONCATENATED TO THE "PAST". SO NOW, DECREASE ALL
C  THESE "FUTURE" TIMES BY TNEXT BEFORE WRITING THEM TO THE OUTPUT FILE.

      WRITE(56,102)
  102 FORMAT(/'#OPTIMAL DOSES')

	IDOS = 0

	DO I = ND41+1,ND
	 DO J = 1,NDRUG

        IF(RS(I,2*J-1) .GT. 0.D0) THEN

         IDOS = IDOS + 1

C  SINCE RS(I,2*J-1) > 0, IT MEANS THAT THE IV FOR DRUG J DURING TIME
C  INTERVAL SIG(I+1) - SIG(I) WAS OPTIMIZED AND FOUND TO BE 
C  DOSEBEST(IDOS). WRITE OUT FOR THIS DOSE, THE START TIME, THE DURATION
C  OF THE IV, THE TOTAL DOSE AMOUNT, AND THE DRUG NO. 


C  NOTE THAT, FOR NOW, IT IS ASSUMED
C  THAT I .NE. ND, BECAUSE IF IT IS, IT MEANS THAT AN IV STARTED AT 
C  THE LAST DOSE EVENT AND CONTINUED FOREVER (I.E., IT WILL BE ASSUMED
C  THE USER ALWAYS INCLUDED A FINAL DOSE EVENT IN HIS PATIENT'S FILE
C  THAT TURNED OFF ALL IVs). IF THIS IS NOT THE CASE, SET DURATION(.)
C  TO -1 AND WRITE A MESSAGE TO THE USER.

         TSTART = SIG(I) - TNEXT

C  AS OF BESTDOS119.FOR, THERE MAY BE A STEADY STATE DOSE SET AT THE
C  BEGINNING OF THE PATIENT'S REGIMEN. IN THIS CASE SIG(1) < 0. FOR
C  EXAMPLE, SIG(1) = -2 --> THERE IS A STEADY STATE DOSE SET UNTIL
C  100*2 = TIME = 200. IN THIS CASE, SIG(I) ABOVE IS THE ACTUAL
C  TIME OF THE BEGINNING OF THE DOSE, NOT THE RELATIVE TIME (RELATIVE
C  TO THE END OF THE STEADY STATE DOSE SET). SINCE ALL THE TIMES
C  WRITTEN BELOW FOR THE PREDICTED Y'S AND THE AUC'S ARE RELATIVE
C  TIMES, THE OPTIMUM DOSE TIMES SHOULD BE ALSO. SO ADJUST TSTART
C  HERE:

         IF(SIG(1) .LT. 0.D0) TSTART = TSTART + 100.D0*SIG(1)


         IF(I .LT. ND) DURIV = SIG(I+1) - SIG(I)


         IF(I .EQ. ND) THEN
          DURIV = -1
          WRITE(56,1053) J

          WRITE(*,1053) J
 1053   FORMAT(/' DRUG ',I3,' HAS AN IV WHICH IS NEVER TURNED OFF.'/
     1' AS A RESULT, ITS DURATION WILL BE ARBIRTRARILY SET = -1 SO'/
     2' IT WILL BE CLEAR IN THE OUTPUT FILE THAT THE TOTAL DOSE IS'/
     3' NOT AVAILABLE. INSTEAD THE IV RATE IS THE ABS. VALUE OF THE'/
     4' VALUE IN THE OUTPUT FILE.'/)
          CALL PAUSE
         ENDIF    

         DOSTOT = DOSEBEST(IDOS)*DURIV

         WRITE(56,104) TSTART,DURIV,DOSTOT,J
  104    FORMAT(1X,G14.4,2X,G14.4,2X,G18.6,2X,I3)        


        ENDIF
C  THE ABOVE ENDIF IS FOR THE  IF(RS(I,2*J-1) .GT. 0.D0)  CONDITION.


        IF(RS(I,2*J) .GT. 0.D0) THEN

         IDOS = IDOS + 1

C  SINCE RS(I,2*J) > 0, IT MEANS THAT THE BOLUS FOR DRUG J AT TIME
C  SIG(I) WAS OPTIMIZED AND FOUND TO BE DOSEBEST(IDOS).WRITE OUT FOR
C  THIS DOSE, THE START TIME, THE DURATION (WHICH IS 0.0), THE TOTAL
C  DOSE AMOUNT (WHICH IS JUST THE BOLUS), AND THE DRUG NO. ALSO,
C  AS OF BESTDOS119.FOR, ADJUST TSTART TO BE A RELATIVE TIME, RATHER
C  THAN AN ACTUAL TIME (SEE COMMENTS ABOVE).

         TSTART = SIG(I) - TNEXT
         IF(SIG(1) .LT. 0.D0) TSTART = TSTART + 100.D0*SIG(1)
         DURIV = 0.D0
         DOSTOT = DOSEBEST(IDOS)

         WRITE(56,104) TSTART,DURIV,DOSTOT,J


        ENDIF
C  THE ABOVE ENDIF IS FOR THE  IF(RS(I,2*J) .GT. 0.D0)  CONDITION.


	 END DO
C  THE ABOVE END DO IS FOR THE  DO J = 1,NDRUG  LOOP.

	END DO
C  THE ABOVE END DO IS FOR THE  DO I = ND41+1,ND  LOOP. 



C  NOW, FOR EACH GRID POINT IN THE PARAMETER DENSITY, MUST FIND THE
C  PREDICTED OBSERVED VALUES EVERY IDELTA MINUTES, GIVEN THE BEST DOSES
C  THIS PROGRAM OBTAINED ABOVE.

C  FIRST RESTORE INTO THE RS ARRAY THE BEST DOSES FOUND BY THE CALL TO
C  ELDERY ABOVE. AND THEN ESTABLISH THE BOLUS VALUES SINCE THEY WILL
C  ALSO BE PASSED TO SUBROUTINE IDCALCYY/FUNC3 BELOW, VIA COMMON/OBSER.

      IDOS = 0

      DO I = ND41+1,ND
       DO J = 1,NDRUG
        IF(RS(I,2*J-1) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         RS(I,2*J-1) = DOSEBEST(IDOS)
        ENDIF
        IF(RS(I,2*J) .GT. 0.D0) THEN
         IDOS = IDOS + 1
         RS(I,2*J) = DOSEBEST(IDOS)
        ENDIF        
       END DO
      END DO

      DO I=1,ND
       DO J=1,NDRUG
        BS(I,J)=RS(I,2*J)
       END DO
      END DO


C  CALL CALCTPRED TO CALCULATE THE NUMT TIMES TO BE IN TPRED.

      CALL CALCTPRED(IDELTA,NOBSER,TNEXT,NUMT,TPRED,TPREDREL)


C  AS OF BESTDOS109.FOR, TPREDREL AND OTHER ARRAYS RELATED TO TIME

C  RESETS AND STEADY STATE DOSE SETS ARE REMOVED FROM THIS PROGRAM,
C  ... SINCE THIS PROGRAM DOES NOT ALLOW TIME RESETS/STEADY STATE
C  DOSING.

C  NOTE THAT TPRED NOW CONTAINS THE NUMT PREDICTED TIMES, IDELTA
C  MINUTES APART, ALONG WITH THE OBSERVATION AND DOSE TIMES (BUT
C  DUPLICATE TIMES HAVE BEEN REMOVED).


C  FOR EACH GRID PT. IN THE PARAMETER DENSITY, CALCULATE AND WRITE
C  TO THE OUTPUT FILE, SIMULATED OBSERVED VALUES AT THE TIMES IN
C  TPRED (SEE CALCTPRED ABOVE), ASSUMING THE OPTIMAL DOSES CALCULATED 
C  BY ELDERY ABOVE.

      WRITE(56,2133) NGRD,NUMT,IDELTA
2133  FORMAT(//'# SIMULATED OBSERVED VALUES AND AUCs FOLLOW, ONE TABLE'/
     1'  FOR EACH GRID POINT, AND A FINAL TABLE WITH THE WEIGHTED '/
     2'  OBSERVED VALUES AND AUCs, FOR EACH OUTPUT EQUATION. NOTE THAT'/
     3'  THERE ARE:'/
     2I6,'   NO. OF GRID POINTS'/
     3I6,'   NO. OF SIMULATED OBSERVED VALUES AND AUCs FOR EACH TABLE'/
     4I6,'   NO. OF MINS BETWEEN SIMULATED VALUES, EXCEPT FOR EXTRA OBS/
     5DOSE TIMES')

C  INITIALIZE THE MEAN OBSERVATION AT EACH OF THE NUMT TIMES, FOR EACH
C  OUTPUT EQ. TO BE 0. AT THE END OF THE DO IGRD LOOP, YBAR(J,IEQ)
C  WIL BE THE MEAN OBSERVATION OVER ALL THE GRID PTS. FOR TIME J
C  AND OUTPUT EQ. IEQ. SIMILARLY FOR AUCBAR(J,IEQ), WHICH WILL BE THE
C  MEAN AUC OVER ALL THE GRID PTS. FOR TIME J AND OUTPUT EQ. IEQ.

      DO J = 1,NUMT
       DO IEQ = 1,NUMEQT
        YBAR(J,IEQ) = 0.D0
        AUCBAR(J,IEQ) = 0.D0
       END DO
      END DO


      DO IGRD = 1,NGRD


C  STORE INTO THETA THE PARAMETER VALUES FOR GRID POINT IGRD.

       DO J=1,NVAR
        THETA(J) = DENSITY(IGRD,J)
       END DO

C  ESTABLISH THE COMBINED RANDOM AND FIXED PARAMETER VALUES INTO
C  PX -- IN THE CORRECT ORDER AS INDICATED BY VECTOR IRAN. CALL
C  MAKEVEC TO DO THIS.
 
	CALL MAKEVEC(NVAR,NOFIX,IRAN,THETA,VALFIX,PX)

C  CALL SUBROUTINE IDCALCYY FOR THIS GRID PT. IN THE PARAMETER DENSITY.
C  THIS IS A VERSION OF THE ID PROGRAM WHICH CALCULATES THE PREDICTED
C  VALUES OF Y(I,J) (OUTPUT CONCENTRATION OF THE JTH OUTPUT EQ. AT TIME
C  TPRED(I),I=1,NUMT), ASSUMING THE GIVEN GRID PT. NOTE THAT IN 
C  IDCALCYY, THE PREDICTED VALUES ARE SUPPLIED IN TPRED, RATHER THAN
C  INPUT VIA COMMON/OBSER FROM THE PATIENT'S DATA FILE. ALSO, THE NO. 
C  OF OBSERVED TIMES IS NUMT, RATHER THAN M WHICH IS SUPPLIED VIA
C  COMMON/SUM2. AND NOTE THAT NUMT AND TPRED(.) ARE FOUND FROM THE CALL
C  TO CALCTPRED ABOVE.

	CALL IDCALCYY(NVAR+NOFIX,NDIM,PX,TPRED,NUMT,YYPRED,NUMEQT)


       DO IEQ = 1,NUMEQT

C  FOR GRID PT. IGRD, AND OUTPUT EQ. IEQ, WRITE THE TABLE OF PREDICTED
C  VALUES AND AUCs AT THE END OF EACH OF THE NUMT TIME PERIODS.

C  FIRST WRITE THE HEADER FOR THE TABLE.

        WRITE(56,2131) IGRD,DENSITY(IGRD,NVAR+1),IEQ
 2131 FORMAT(//'# GRID PT., ASSOCIATED PROB., AND OUTPUT EQ. NO. ARE: '/
     1 I5,2X,G16.10,2X,I2/)


C  THE AUC STARTS AT 0 AT TPREDREL(1), WHICH WILL BE 0. THEN IT WILL
C  BE UPDATED FOR EACH INTERVAL, USING THE TRAPEZOIDAL RULE.

        DO J = 1,NUMT

         IF(J .EQ. 1) AUC = 0.D0

C  AS OF BESTDOS116.FOR, AUCs IN THE "FUTURE" ARE RELATIVE TO THE
C  BEGINNING OF THE "FUTURE", WHICH OCCURS AT TNEXT. SO SET AUC BACK
C  TO 0 AT TIME TNEXT.

C  NO! AS OF BESTDOS118.FOR, EVEN THOUGH THE CODE IN WSUMSQ (IN
C  CALCBST14.FOR) IS UNCHANGED, SO THAT AUCs IN THE "FUTURE" ARE
C  RELATIVE TO THE BEGINNING OF THE "FUTURE", AND ARE RESET TO 0 AT
C  TIME TNEXT, THE AUCs IN THE DOSEROUTxxxx FILE WILL BE CUMULATIVE
C  FROM TIME 0 IN THE "PAST". SO COMMENT OUT THE CODE BELOW TO CALL
C  THESAME, AND COMMENT OUT THE RESETTING OF AUC IF ISAME = 1.

C         CALL THESAME(TPREDREL(J),TNEXT,ISAME)

C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, TPREDREL(I) = TNEXT,
C  OR AT LEAST, THEY ARE WITHIN 1.D-10 OF EACH OTHER. IN THIS CASE,
C  SET AUC BACK TO 0.

         IF(J .GT. 1) THEN
          DELTA = TPREDREL(J) - TPREDREL(J-1)
          AUC = AUC + (YYPRED(J,IEQ) + YYPRED(J-1,IEQ))/2.D0 * DELTA
C         IF(ISAME .EQ. 1) AUC = 0
         ENDIF

         WRITE(56,*) TPREDREL(J),YYPRED(J,IEQ),AUC

C  ADD THIS YYPRED(J,IEQ) TO THE OVERALL WEIGHTED OBSERVATION. SIMILARLY
C  FOR THE OVERALL WEIGHTED AUC.
 
         YBAR(J,IEQ) = YBAR(J,IEQ) + DENSITY(IGRD,NVAR+1)*YYPRED(J,IEQ)
         AUCBAR(J,IEQ) = AUCBAR(J,IEQ) + DENSITY(IGRD,NVAR+1)*AUC

        END DO
C  THE ABOVE END DO IS FOR THE  DO J = 1,NUMT  LOOP.

       END DO
C  THE ABOVE END DO IS FOR THE  DO IEQ = 1,NUMEQT  LOOP.

      END DO
C  THE ABOVE END DO IS FOR THE  DO IGRD = 1,NGRD  LOOP.


C  NOW ADD THE TABLE FOR THE WEIGHTED MEANS OF THE OBSERVATIONS AND
C  AUCs.

       DO IEQ = 1,NUMEQT

C  FOR THIS WEIGHTED MEAN GRID PT., AND OUTPUT EQ. IEQ, WRITE THE TABLE
C  OF PREDICTED VALUES AND AUCs AT THE END OF EACH OF THE NUMT TIME
C  PERIODS.

C  FIRST WRITE THE HEADER FOR THE TABLE.

      WRITE(56,2134) IEQ
 2134 FORMAT(//'# WEIGHTED OBSERVED VALUES AND AUCs; OUTPUT EQ ',I2/)

        DO J = 1,NUMT
         WRITE(56,*) TPREDREL(J),YBAR(J,IEQ),AUCBAR(J,IEQ)
        END DO

       END DO

C  THE ABOVE END DO IS FOR THE  DO IEQ = 1,NUMEQT  LOOP.


C  NOTE THAT FOR BESTDOS107.FOR, THE PREDICTED TIMES AND AUCs ARE
C  CALCULATED FOR THE ENTIRE PATIENT PROFILE (UP TO 24 HOURS AFTER THE
C  MAXIMUM OBSERVED TIME). I.E., THESE VALUES START WITH TIME 0 IN THE
C  "PAST" HISTORY IF THERE IS A "PAST". THIS MAY CHANGE IN A SUBSEQUENT
C  PROGRAM SO THAT THESE VALUES ARE ONLY WRITTEN STARTING IN THE 
C  "FUTURE" OF THE PATIENT.


	CLOSE(56)



	STOP
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETPATH(PATH,NOB)

C  THIS ROUTINE OBTAINS FROM THE USER THE PATH WHERE THE INPUT FILES 
C  ARE LOCATED (AND WHERE THE OUTPUT FILES WILL BE SENT). NOTE THAT

C  PATH RETURNS AS THE PATH WITH A TRAILING BACKSLASH.

C  NOB RETURNS AS THE NO. OF THE LAST NON-BLANK ENTRY IN PATH.

	CHARACTER PATH*60

   10	WRITE(*,1)
    1   FORMAT(/' ENTER 1 IF THE FILES FOR THIS RUN ARE IN THE CURRENT D
     1IRECTORY; '/
     1' ENTER 0 OTHERWISE: ')
	READ(*,*,ERR=10) IPATH
	IF(IPATH .NE. 0 .AND. IPATH .NE. 1) GO TO 10

	IF(IPATH .EQ. 1) PATH = ' '
	NOB = 0

C  IF THE USER ENTERS A NON-NULL PATH BELOW, NOB WILL BE THE NO. OF
C  CHARACTERS IN THE PATH. IF HE ENTERS NOTHING, NOB STAYS 0, WHICH IS

C  THE CORRECT NO. OF CHARACTERS IN A NULL PATH.

	IF(IPATH .EQ. 0) THEN

	 WRITE(*,3)
    3    FORMAT(/' ENTER THE LOCATION (PATH) OF YOUR INPUT FILES. NOTE'/
     1' THAT THE PATH IS LIMITED TO 60 CHARACTERS AND THAT EACH SUB-DIRE
     2CTORY'/
     3' CAN HAVE AT MOST 8 CHARACTERS (E.G, INSTEAD OF " \DIRECTORY ", U
     4SE '/
     5' THE DOS-EQUIVALENT NAME, WHICH MIGHT BE " \DIRECT~1 "). '//
     6' ENTER THE PATH NOW: ')
	 READ(*,2) PATH

    2    FORMAT(A60)

C  IF THE USER DIDN'T END HIS PATH WITH A '\', PUT ONE IN FOR PATH.

C  NOTE THAT IF THE USER ENTERED A BLANK PATH, IT WILL BE ASSUMED THAT
C  HE WANTS THE CURRENT (WORKING) DIRECTORY.

	 DO I=1,60

	  J = 60 + 1 - I
	  IF(PATH(J:J) .NE. ' ') THEN

	   NOB = J
	   IF(PATH(J:J) .NE. '\') THEN
	    PATH(J+1:J+1) = '\'
	    NOB = J+1
	   ENDIF
	   RETURN
	  ENDIF
	 END DO


	ENDIF


	
	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C
	SUBROUTINE FULLNAME(PATH,FILE,FILE2)

C  FULLNAME CONVERTS FILE TO FILE2, THE COMPLETE NAME OF
C  THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE CURRENT

C  DIRECTORY).


	CHARACTER PATH*60,FILE2*73,FILE*13,FILE1*73

C  INITIALIZE FILE1 AND FILE2 AS ALL BLANKS, IN CASE THE USER IS 
C  RE-ENTERING HIS FILENAME (SO THERE WON'T BE SOMETHING ALREADY IN 
C  THESE FILENAMES).

	FILE2 = ' '
	FILE1 = ' '
	FILE1 = PATH//FILE

C  ESTABLISH FILE2 AS FILE1 WITHOUT ANY BLANKS.

	J = 0
        DO I=1,73
	 IF(FILE1(I:I) .NE. ' ') THEN
	  J= J+1
	  FILE2(J:J) = FILE1(I:I)
	 ENDIF
	END DO

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C

	SUBROUTINE SEEDIR(PATH,NOB,FILENAME)
	CHARACTER FILENAME*20,PATH*60,PRTDIR*47,TEMP*72,PRTDIR2*47

C  NOTE THAT PATH(1:NOB) IS THE CONDENSED (WITHOUT BLANKS) PATH.

   10	PRTDIR = ' '
	WRITE(*,6)
    6   FORMAT(/' PRESS THE ENTER KEY TO SEE YOUR ENTIRE DIRECTORY;'//
     1' ENTER A PARTIAL FILENAME (WITH THE * WILDCARD) TO SEE A '/
     2'       PARTICULAR SUBSET OF FILENAMES IN YOUR DIRECTORY. '/
     3'       e.g., ENTER  "TO*.INS TO SEE A LIST OF ALL FILES WHICH'/
     4'       BEGIN WITH "TO" AND HAVE A .INS SUFFIX '//

     5' NOTE THAT THE FILES WILL AUTOMATICALLY BE TIME-ORDERED FROM '/
     6' OLDEST TO NEWEST.'//
     7' ENTER YOUR CHOICE NOW: ')
	READ(*,1) PRTDIR
    1   FORMAT(A47)


C  REMOVE ANY BLANKS FROM PRTDIR SINCE THERE CAN BE NO BLANKS BETWEEN
C  THE END OF THE PATH AND THE BEGINNING OF THE "OBJECT" OF THE 
C  DIR COMMAND FOR SUBDIRECTORIES. PRTDIR, WITHOUT BLANKS, WILL BE 
C  PRTDIR2.

	IF(PRTDIR .EQ. ' ') TEMP = 'DIR/OD '//PATH(1:NOB)//' |MORE'

	IF(PRTDIR .NE. ' ') THEN
	 PRTDIR2 = ' '
	 J = 0
	 DO I=1,47
	  IF(PRTDIR(I:I) .NE. ' ') THEN
	   J = J+1

	   PRTDIR2(J:J) = PRTDIR(I:I)

	  ENDIF
	 END DO
	 TEMP = 'DIR/OD '//PATH(1:NOB)//PRTDIR2(1:J)//' |MORE'
	ENDIF


        CALL SYSTEM(TEMP)

     	WRITE(*,3)
    3   FORMAT(/' ENTER THE NAME OF THE DESIRED FILE (WITHOUT THE PATH);
     1'/
     2' ENTER -99 TO ENTER A DIFFERENT FILE SPECIFICATION: ')
	READ(*,2) FILENAME
    2   FORMAT(A20)
	IF(FILENAME(1:3) .EQ. '-99') GO TO 10

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE PUTASS(PATHFILE,IASS,C0P,C1P,C2P,C3P,NUMEQT)

        IMPLICIT REAL*8(A-H,O-Z)

      PARAMETER(MAXNUMEQ=7)

      DIMENSION IASS(MAXNUMEQ),C0P(MAXNUMEQ),C1P(MAXNUMEQ),
     1 C2P(MAXNUMEQ),C3P(MAXNUMEQ)


      CHARACTER PATHFILE*73,READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  THIS ROUTINE READS THE INFO IN FILE PATHFILE, AND MAKES SURE THE 
C  CORRECT ASSAY ERROR COEFFICIENTS ARE AT THE END OF THE FILE, AS 
C  FOLLOWS:

C  IASS(I) = 1 --> IF THE FILE ALREADY HAS C'S, THEY REMAIN;
C	        IF THE FILE DOESN'T HAVE C'S, 
C               [C0P(I),C1P(I),C2P(I),C3P(I)] ARE PUT INTO THE FILE
C		FOR OUTPUT EQUATION I; I=1,NUMEQT.


C  IASS(I) = 0 --> [C0P(I),C1P(I),C2P(I),C3P(I)] ARE PUT INTO THE FILE
C		FOR OUTPUT EQUATION I; I=1,NUMEQT, REGARDLESS OF WHETHER
C		THE FILE ALREADY HAS ASSAY C'S OR NOT.




C  FIRST, DETERMINE IF FILE 21 HAS ASSAY COEFFICIENTS AT THE END. OPEN

C  THE FILE AND READ UNTIL THE LINE STARTING WITH 
C  "ASSAY COEFFICIENTS ..." IS ENCOUNTERED. IF THE NEXT WORD IS 
C  "FOLLOWS", THE LAST NUMEQT LINES CONTAIN ASSAY COEFFICIENTS.

    3   FORMAT(A1000)

	OPEN(21,FILE=PATHFILE,STATUS='OLD')
    5	READ(21,3,IOSTAT=IEND) READLINE
	
C  IF THERE IS NO LINE WITH "ASSAY COE" ON IT, THIS IS NOT AN
C  ACCEPTABLE WORKING COPY FILE.

	IF(IEND .LT. 0) THEN



	 WRITE(*,56) PATHFILE
   56    FORMAT(//' PATIENT FILE '/
     1'    ',A73/
     2' IS NOT AN ACCEPTABLE WORKING COPY FILE. SUCH A FILE MUST HAVE '/
     2' "ASSAY COEFFICIENTS ... " NEAR THE BOTTOM OF THE FILE.'//
     3' THE PROGRAM STOPS. '//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,56) PATHFILE
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

	IF(READLINE(1:9) .NE. 'ASSAY COE') GO TO 5

	IF(READLINE(20:25) .EQ. 'FOLLOW' ) ICOFF = 1
	IF(READLINE(20:25) .NE. 'FOLLOW' ) ICOFF = 0

C  NOTE THAT ICOFF = 1 IF ASSAY COEFFS. ARE AT THE END OF FILE 21;
C	             0 IF ASSAY COEFFS. ARE NOT AT END OF THE FILE.

C  IF ICOFF=0, WRITE ALL OF FILE 21 TO FILE 27;
C  IF ICOFF=1, WRITE ALL OF FILE 21, EXCEPT FOR ASSAY COEFFICIENT INFO,
C	       TO FILE 27.

	OPEN(27)
	REWIND(21)

   10	READ(21,3,IOSTAT=IEND) READLINE
	IF(IEND .LT. 0 .OR. READLINE(1:5) .EQ. 'ASSAY' ) GO TO 25
	WRITE(27,3) READLINE

	GO TO 10

   25	READLINE = 'ASSAY COEFFICIENTS FOLLOW, ONE SET FOR EACH OUTPUT E
     1QUATION:'
        WRITE(27,3) READLINE

C  NOW PUT IN THE APPROPRIATE C'S, DEPENDING ON THE VALUE OF ICOFF.


C********** PUT C'S IN FILE CURRENTLY HAVING NO C'S (BELOW) ************

	IF(ICOFF .EQ. 0) THEN

	 DO IEQ = 1,NUMEQT

	  WRITE(27,16) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)

	 END DO

   16    FORMAT(4(F16.8,2X))

	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICOFF .EQ. 0) CONDITION.

C********** PUT C'S IN FILE CURRENTLY HAVING NO C'S (ABOVE) ************



C********** PUT C'S IN FILE CURRENTLY HAVING C'S (BELOW) ***************

	IF(ICOFF .EQ. 1) THEN

	
	 DO IEQ = 1,NUMEQT

C  THIS FILE HAS C'S ON THE NEXT LINE.

	 READ(21,*) C0,C1,C2,C3


	 IF(IASS(IEQ) .EQ. 1) WRITE(27,16) C0,C1,C2,C3
	 IF(IASS(IEQ) .EQ. 0) WRITE(27,16) C0P(IEQ),C1P(IEQ),C2P(IEQ),
     1   C3P(IEQ)

	END DO


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICOFF .EQ. 1) CONDITION.

C********** PUT C'S IN FILE CURRENTLY HAVING C'S (ABOVE) ***************

C  NOW COPY FILE 27 BACK INTO FILE 21.

	CLOSE(21)
        OPEN(21,FILE=PATHFILE)
	REWIND(27)

   60	READ(27,3,IOSTAT=IEND) READLINE

	IF(IEND .LT. 0) THEN
	 CLOSE(27)
         CLOSE(21)
	 RETURN
	ENDIF

	WRITE(21,3) READLINE
	GO TO 60
	

	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE FILRED(NOBSER,NDD,NNDRUG,RSS,SIGG,YO,C0,C1,C2,C3,
     1 MAXOBDIM)

C  FILRED IS CALLED BY SUBROUTINE PREVRUN TO READ THE PORTION OF 
C  SCRATCH FILE 37 WHICH APPLIES TO THE SUBJECT UNDER CONSIDERATION. THE

C  'POINTER' FOR FILE 37 IS IN THE PROPER POSITION TO BEGIN READING THE
C  INFO FOR THE DESIRED SUBJECT.

        IMPLICIT REAL*8(A-H,O-Z)

      PARAMETER(MAXNUMEQ=7)



      DIMENSION SIG(5000),RS(5000,34),YO(MAXOBDIM,MAXNUMEQ),
     1 BS(5000,7),C0(MAXNUMEQ),C1(MAXNUMEQ),C2(MAXNUMEQ),
     2 C3(MAXNUMEQ),YOO(594,MAXNUMEQ),TIM(594),RSS(5000,34),SIGG(5000)


C  THE MAJOR CHANGE AS OF NPBIG11.FOR (WHICH ALLOWS MULTIPLE DRUGS)
C  OCCURS IN THE DOSAGE REGIMEN BLOCK WHICH WILL NOW HAVE THE FOLLOWING 
C  COLUMNS, IN ORDER:

C     COL 1 = TIME
C     COL 2 = IV FOR DRUG 1; COL 3 = PO FOR DRUG 1;
C     COL 4 = IV FOR DRUG 2; COL 5 = PO FOR DRUG 2;
C     ... EACH SUCCEEDING DRUG HAS AN IV FOLLOWED BY A PO COLUMN.
C     NEXT NADD COLUMNS = ONE FOR EACH ADDITIONAL COVARIATE.

	CHARACTER SEX*1,READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.



        COMMON/OBSER/ TIM,SIG,RS,YOO,BS
        COMMON /CNST/ N,ND,NI,NUP,NUIC,NP
        COMMON /CNST2/ NPL,NUMEQT,NDRUG,NADD
        COMMON /SUM2/ M,NPNL
        COMMON/DESCR/AGE,HEIGHT,ISEX,IETHFLG


C  INPUT IS: SCRATCH FILE 37, WHICH IS POSITIONED AT THE BEGINNING OF
C  THE INFO FOR THE SUBJECT DESIRED.

C  OUTPUT ARE:

C  NOBSER = THE NO. OF OBSERVATIONS FOR THIS SUBJECT.
C  YO(I,J),I=1,M; J=1,NUMEQT = NO. OF OUTPUT EQS; I=1,M, WHERE M = NO.
C	OF OBSERVATION TIMES.
C  [C0(J),C1(J),C2(J),C3(J)] = ASSAY NOISE COEFFICIENTS FOR OUTPUT EQ.
C	J; J=1,NUMEQT.


C  AGE, SEX, HEIGHT, AND ETHNICITY FLAG ARE ON LINES 8-11.

	DO I=1,7
	 READ(37,*)
	END DO
	 
	READ(37,*) AGE
	READ(37,2) SEX
    2   FORMAT(A1)
	ISEX=1
	IF(SEX .EQ. 'F') ISEX=2

	READ(37,*) HEIGHT
	READ(37,*) IETHFLG


C  READ THE NO. OF DRUGS FROM THE LINE WITH 'NO. OF DRUGS' AS ENTRIES
C  12:23. THEN READ NO. OF ADDITIONAL COVARIATES, AND THE NO. OF DOSE 
C  EVENTS, ETC.

    1   FORMAT(A1000)
   10	READ(37,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF DRUGS') GO TO 10
	BACKSPACE(37)

    3   FORMAT(T2,I5)
        READ(37,3) NDRUG


	IF(NDRUG .GT. 7) THEN



	 WRITE(*,124)
  124    FORMAT(' YOUR PATIENT DATA FILES CANNOT HAVE MORE THAN 7'/
     1' DRUGS. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,124) 
        CLOSE(47)



	 CALL PAUSE


	 STOP




	ENDIF


        READ(37,3) NADD

C  NOTE THAT THE NO. OF "RATES" INCLUDES 2 FOR EACH DRUG (THE IV AND

C  THE PO COLUMNS) + NADD (1 COLUMN FOR EACH ADDITIONAL COVARIATE 
C  BEYOND THE FIRST 4 ABOVE, AGE, SEX, HEIGHT, AND ETHNICITY FLAG).

	NI = 2*NDRUG + NADD

	IF(NI .GT. 34) THEN



  	 WRITE(*,123)
  123    FORMAT(/' YOUR PATIENT DATA FILES HAVE TOO MANY COLUMNS IN '/
     1' THE DOSAGE REGIMEN BLOCK. THE NO. OF ADDITIONAL COVARIATES '/
     2' PLUS TWICE THE NO. OF DRUGS CANNOT EXCEED 34. THE PROGRAM IS'/
     3' NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,123)     
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF


        READ(37,3) ND

	IF(ND .GT. 5000) THEN



	 WRITE(*,125)
  125    FORMAT(' YOUR PATIENT DATA FILES CANNOT HAVE MORE THAN 5000'/
     1' DOSE EVENTS. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,125) 
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

C  ND*NDRUG IS THE TOTAL NO. OF IV RATES OVER WHICH THE PROGRAM WILL 
C  DO ITS MINIMIZATION. THESE VALUES ARE RETURNED TO MAIN IN THE 
C  ARGUMENT LIST.

	READ(37,*)
	READ(37,*)


        IF(ND.EQ.0) GO TO 40

	DO I = 1,ND
         READ(37,*) SIG(I),(RS(I,J),J=1,NI)
	END DO	


C  ESTABLISH RSS = RS; ONE IS A DUMMY ARGUMENT; THE OTHER IS USED IN
C  A COMMON. SIMILARLY SET NDD = ND, AND NNDRUG = NDRUG. AND ALSO
C  SET SIGG(.) = SIG(.)



      NNDRUG = NDRUG
      NDD = ND
      DO I=1,ND
       SIGG(I) = SIG(I)

       DO J=1,NI
        RSS(I,J) = RS(I,J)
       END DO
      END DO



C  ASSIGN THE VALUES IN EACH DRUG'S PO COLUMN TO THE CORRESPONDING
C  COLUMN IN ARRAY BS.

      DO I=1,ND
       DO J=1,NDRUG
        BS(I,J)=RS(I,2*J)
       END DO
      END DO

C  READ THE NO. OF OUTPUT EQUATIONS FROM THE LINE WITH 'NO. OF TOTAL'
C  AS ENTRIES 12:23. THEN READ NO. OF OBSERVED VALUE TIMES, ETC.

   40	READ(37,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF TOTAL') GO TO 40
	BACKSPACE(37)

        READ(37,3) NUMEQT
        READ(37,3) M

	IF(M .GT. MAXOBDIM) THEN



  	 WRITE(*,126) MAXOBDIM
  126    FORMAT(/' AT LEAST ONE OF YOUR PATIENT DATA FILES HAS TOO'/
     1' MANY OBSERVED VALUE TIMES. THIS NO. CANNOT EXCEED ',I5,'.'/
     2' THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,126) MAXOBDIM
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF



	IF(NUMEQT .GT. MAXNUMEQ) THEN

  	 WRITE(*,127) MAXNUMEQ
  127    FORMAT(/' AT LEAST ONE OF YOUR PATIENT DATA FILES HAS TOO'/
     1' MANY OUTPUT EQUATION COLUMNS. THIS NO. CANNOT EXCEED ',I2,'.'/
     2' THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,127) MAXNUMEQ
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

        
	DO I=1,M
         READ(37,*) TIM(I),(YO(I,J),J=1,NUMEQT)
	END DO

C  PUT YO VALUES INTO YOO BECAUSE A DUMMY ARGUMENT CANNOT BE IN A
C  COMMON STATEMENT.
 
	DO I=1,M
	 DO J=1,NUMEQT
	  YOO(I,J) = YO(I,J)
	 END DO
	END DO


	NOBSER = M


C  AT THIS POINT, MUST SKIP THE COVARIATE INFO IN THE FILE, AND PROCEED
C  TO READ THE ASSAY NOISE COEFFICIENTS BELOW THAT.


C  READ THE NUMEQT SETS OF ASSAY COEFFICIENTS JUST BELOW THE LINE
C  WHICH HAS "ASSAY COEFFICIENTS FOLLOW" IN ENTRIES 1:25.


   50	READ(37,1) READLINE
	IF(READLINE(1:25) .NE. 'ASSAY COEFFICIENTS FOLLOW') GO TO 50

	DO IEQ = 1,NUMEQT

	 READ(37,*) C0(IEQ),C1(IEQ),C2(IEQ),C3(IEQ)
	END DO

	RETURN
	END


C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE STACK(PATH,MAXOBDIM,PATFIL,AF)

C  THIS ROUTINE, CALLED BY MAIN, READS THE INFO IN FILE PATFIL, AND
C  APPENDS IT ONTO THE END OF FILE 27.

        IMPLICIT REAL*8(A-H,O-Z)

        PARAMETER(MAXNUMEQ=7)




        DIMENSION SIG(5000),RS(5000,34),AF(7)
        CHARACTER PATFIL*20,READLINE*1000,PATH*60,TMPFILE*13,
     1   PATHFILE*73,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.

C  SEE SUBROUTINE FILRED FOR SOME DETAILS ON THE MAJOR CHANGES AS
C  OF NPBIG11.FOR.

C  INPUT IS: 


C  PATH = LOCATION (DIRECTORY) OF PATIENT DATA FILES.
C  PATFIL = PATIENT DATA FILE.


C  AF = ACTIVE FRACTION OF THE DRUG. EACH IV RATE AND BOLUS VALUE
C       MUST BE MULTIPLIED BY AF.


C  OUTPUT IS: 

C  FILE 27 WHICH NOW HAS PATFIL APPENDED ONTO ITS END.
C  COPY LINE-BY-LINE PATFIL TO FILE 27 EXCEPT FOR THE DOSAGE REGIMEN

C  (BECAUSE EACH IV RATE AND BOLUS INPUT MUST BE MULTIPLIED BY AF BEFORE
C  BEING WRITTEN TO FILE 27).

    1   FORMAT(A1000)

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

     	TMPFILE = ' '
	TMPFILE = PATFIL
	CALL FULLNAME(PATH,TMPFILE,PATHFILE)
      OPEN(21,FILE=PATHFILE)
   10	READ(21,1,IOSTAT=IEND) READLINE


C  NOTE THAT IEND .LT. 0 --> END OF FILE REACHED.

	IF(IEND .LT. 0) THEN

	 WRITE(*,128) PATFIL
  128    FORMAT(/' PATIENT DATA FILE ',A20,' HAS AN OLD-STYLE WORKING'/
     1' COPY FORMAT.'//
     2' TO BE ACCEPTABLE TO THIS PROGRAM, A PATIENT DATA FILE MUST'/
     3' HAVE BEEN MADE BY A RECENT BOXES PROGRAM. THE FILE MUST HAVE'/
     4' "NO OF DRUGS" IN ENTRIES 12 THROUGH 23 ON OR NEAR LINE 18.'//
     5' THE PROGRAM STOPS. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,128) PATFIL
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

	WRITE(27,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF DRUGS') GO TO 10

C  READLINE NOW CONTAINS THE NO. OF DRUGS, NDRUG. BACKSPACE AND READ 
C  NDRUG; THEN READ THE NO. OF ADDITIONAL COVARIATES, AND THE NO. OF
C  DOSE EVENTS.


	BACKSPACE(21)
    3 FORMAT(T2,I5)

	READ(21,3) NDRUG

	IF(NDRUG .GT. 7) THEN

	 WRITE(*,124) PATFIL
  124    FORMAT(' PATIENT DATA FILE ',A20,' HAS TOO MANY DRUGS'/
     1' (I.E, MORE THAN 7). THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,124) PATFIL
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

        READ(21,3) NADD


C  NOTE THAT THE NO. OF "RATES" INCLUDES 2 FOR EACH DRUG (THE IV AND
C  THE PO COLUMNS) + NADD (1 COLUMN FOR EACH ADDITIONAL COVARIATE).

	NI = 2*NDRUG + NADD

	IF(NI .GT. 34) THEN



  	 WRITE(*,123) PATFIL
  123    FORMAT(/' PATIENT DATA FILE ',A20,' HAS TOO MANY COLUMNS IN '/
     1' THE DOSAGE REGIMEN BLOCK. THE NO. OF ADDITIONAL COVARIATES '/
     2' PLUS TWICE THE NO. OF DRUGS CANNOT EXCEED 34. THE PROGRAM IS'/
     3' NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,123) PATFIL
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

        READ(21,3) ND

	IF(ND .GT. 5000) THEN



	 WRITE(*,125) PATFIL

  125    FORMAT(' PATIENT DATA FILE ',A20,' HAS TOO MANY DOSE EVENTS'/
     1' (I.E., MORE THAN 5000). THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,125) PATFIL
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF


C  BACKSPACE TWICE AND PUT THE LAST TWO LINES, AND THE NEXT TWO LINES
C  ONTO FILE 27 (THE NEXT LINE AFTER THAT STARTS THE DOSAGE REGIMEN).

	BACKSPACE(21)
	BACKSPACE(21)

	DO I=1,4

	 READ(21,1) READLINE
	 WRITE(27,1) READLINE
	END DO

        IF(ND.EQ.0) GO TO 40

C  THE FIRST NDRUG*2 COLUMNS OF R HAVE THE IV AND BOLUS VALUES FOR
C  THE NDRUG DRUGS IN THE FILE. THESE VALUES MUST BE MULTIPLIED BY 
C  AF(I), WHERE I IS THE DRUG NO.

        DO I = 1,ND

         READ(21,*) SIG(I),(RS(I,J),J=1,NI)

         DO J = 1,2*NDRUG

C  THE DRUG NO., IDRUG, IS THE INTEGER VALUE OF (J+1)/2. EX: (J+1)/2
C  WILL BE 1 IF J = 1 OR 2 SINCE INTEGER ARITHMETIC TRUNCATES.

          IDRUG = (J+1)/2
          RS(I,J) = RS(I,J)*AF(IDRUG)


         END DO
        
         WRITE(27,*) SIG(I),(RS(I,J),J=1,NI)

        END DO

C  READ THE NO. OF OUTPUT EQUATIONS FROM THE LINE WITH 'NO. OF TOTAL'
C  AS ENTRIES 12:23. THEN READ NO. OF OBSERVED VALUE TIMES, ETC. CHECK
C  THAT THESE ENTRIES ARE NOT TOO BIG. IF NOT, WRITE THE REST OF THE
C  FILE 21 TO FILE 27.


   40	READ(21,1) READLINE
	WRITE(27,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF TOTAL') GO TO 40

	BACKSPACE(21)

        READ(21,3) NUMEQT
        READ(21,3) M

	IF(M .GT. MAXOBDIM) THEN



	 WRITE(*,126) PATFIL,M,MAXOBDIM,MAXOBDIM
  126    FORMAT(/' PATIENT ',A20,' HAS ',I3,' OBSERVATION TIMES. THIS '/
     1' IS MORE THAN THE ALLOWABLE MAXIMUM OF ',I3,'. PLEASE RERUN THE'/
     2' PROGRAM AFTER ENSURING THAT ALL YOUR PATIENTS HAVE NO MORE '/
     3' THAN ',I3,' OBSERVATION TIMES. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,126) PATFIL,M,MAXOBDIM,MAXOBDIM 
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF



	IF(NUMEQT .GT. MAXNUMEQ) THEN

	 WRITE(*,127) PATFIL,NUMEQT,MAXNUMEQ,MAXNUMEQ
  127    FORMAT(/' PATIENT ',A20,' HAS ',I3,' OUTPUT EQUATION COLUMNS,'/
     1' WHICH IS MORE THAN THE MAXIMUM ALLOWABLE NO. OF ',I2,'.'/
     2' PLEASE RERUN THE PROGRAM AFTER ENSURING THAT ALL YOUR PATIENTS'/
     3' HAVE NO MORE THAN ',I2,' OUTPUT EQUATION COLUMNS. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,127) PATFIL,NUMEQT,MAXNUMEQ,MAXNUMEQ 
        CLOSE(47)



	 CALL PAUSE


	 STOP



	ENDIF

C  BACKSPACE JUST ONCE TO THE LINE WITH M ON IT, SINCE THE LINE WITH 
C  NUMEQT ON IT WAS ALREADY PUT INTO FILE 27. THEN COPY LINE FOR LINE 
C  THE REST OF THE FILE TO FILE 27. NOTE THAT IEND .LT. 0 --> END OF 
C  FILE REACHED.

	BACKSPACE(21)

   20	READ(21,1,IOSTAT=IEND) READLINE
	IF(IEND .LT. 0) GO TO 100
	WRITE(27,1) READLINE
	GO TO 20
  100	CLOSE(21)

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE ELDERY(N,START,XMIN,YNEWLO,REQMIN,STEP,
     X  ITMAX,FUNC,IPRINT,ICONV,NITER,ICOUNT,IPRINTOUT)



C  ELDERX DIFFERS FROM ELDER (DESCRIBED BELOW) ONLY IN THAT N, THE
C  DIMENSION OF START (THE NO. OF UNKNOWN PARAMETERS OVER WHICH THE
C  MINIMIZATION IS DONE) IS PASSED TO THE SUBROUTINE FUNC IN THE CALLING
C  STATEMENTS.


C  ELDER IS A PROGRAM TO MINIMIZE A FUNCTION USING THE NELDER-MEED
C  ALGORITM.
C    THE CODE WAS ADAPTED FROM A PROG. IN J. OF QUALITY TECHNOLOGY VOL. 
C    JAN. 1974. BY D.M. OLSSON.
C  CALLING ARGUMENTS:
C    N     -NUMBER OF UNKNOWN PARAMS. UP TO 99.
C    START -A VECTOR WITH THE INITIAL QUESSES OF THE SOLUTION PARAMS.
C    ITMAX -THE MAXIMUM NUMBER OF ITERATIONS.
C             (KCOUNT IS THE MAX NUM OF FUNC CALLS.SET AT 1000000)
C    STEP  -THE STEP SIZE VECTOR FOR DEFINING THE N ADDITIONAL 
C             VERTICIES.
C    REQMIN-THE STOP TOLERANCE.

C    XMIN   -THE SOLUTION VECTOR.
C    YNEWLO-THE FUCTION VALUE AT XMIN.


C    IPRINT-SWITCH WHICH DETERMINES IF INTERMEDIATE ITERATIONS
C              ARE TO BE PRINTED. (0=NO,1=YES).
C    ICONV -FLAG INDICATING WHETHER OR NOT CONVERGENCE HAS BEEN
C             ACHEIVED. (0=NO,1=YES).
C    NITER -THE NUMBER OF ITERATIONS PERFORMED.
C    ICOUNT-THE NUMBER OF FUNCTION EVALUATIONS.
C    FUNC  -THE NAME OF THE SUBROUTINE DEFINING THE FUNCTION.

C             THIS SUBROUTINE MUST EVALUATE THE FUNCTION GIVEN A
C             VALUE FOR THE PARAMETER VECTOR. THE ROUTINE IS OF
C             THE FOLLOWING FORM:
C               FUNC(P,FV), WHERE P IS THE PARAMETER VECTOR,
C                             AND FV IS THE FUNCTION VALUE.

C  A SUBROUTINE TO PRINT THE RESULTS OF ITERMEDIATE ITERATIONS
C    MUST ALSO BE SUPPLIED. ITS NAME AND CALLING SEQUENCE ARE 
C    DEFINED AS FOLLOWS:
C      PRNOUT(P,N,NITER,NFCALL,FV).
C  OTHER PROGRAM VARIABLES OF INTEREST ARE;
C    XSEC  -THE COORDINATES OF THE VETEX WITH THE 2ND SMALLEST FUNCTION
C             VALUE. NOTE: XSEC IS NOT USED. REMOVED IN BESTDOS7.FOR, IT 
C             IS REMOVED FROM THE DIMENSION STATEMENT, AND IS NOT 

C             ASSIGNED VALUES ABOVE LABEL 26.


C    YSEC  - THE FUNCTION VALUE AT XSEC.

	PARAMETER(NMAX=5000)
	IMPLICIT REAL*8(A-H,O-Z)
        DIMENSION START(N),STEP(N),XMIN(N),
     X  P(NMAX,NMAX+1),PSTAR(NMAX),P2STAR(NMAX),PBAR(NMAX),Y(NMAX+1)
        EXTERNAL FUNC
        DATA RCOEFF/1.0D0/,ECOEFF/2.0D0/,CCOEFF/.5D0/
        KCOUNT=1000000
        ICOUNT=0

        NITER=0
        ICONV=0
C
C  CHECK INPUT DATA AND RETURN IF AN ERROR IS FOUND.
C

        IF(REQMIN.LE.0.0D0) ICOUNT=ICOUNT-1
        IF(N.LE.0) ICOUNT=ICOUNT-10
        IF(N.GT.99) ICOUNT=ICOUNT-10
        IF(ICOUNT.LT.0) RETURN
C
C  SET INITIAL CONSTANTS
C
        DABIT=2.04607D-35
        BIGNUM=1.0D+38
        KONVGE=5
C       XN=FLOAT(N)
        DN=FLOAT(N)

        NN=N+1


C
C  CONSTRUCTION OF INITIAL SIMPLEX.
C
1001    DO 1 I=1,N
1       P(I,NN)=START(I)

        CALL FUNC(N,START,FN)
        Y(NN)=FN
        ICOUNT=ICOUNT+1
C       CALL PRNOUT(START,N,NITER,ICOUNT,FN)
        IF(ITMAX.NE.0) GO TO 40
        DO 45 I=1,N
45      XMIN(I)=START(I)
        YNEWLO=FN
        RETURN
40      DO 2 J=1,N
        DCHK=START(J)
        START(J)=DCHK+STEP(J)
        DO 3 I=1,N
3       P(I,J)=START(I)
        CALL FUNC(N,START,FN)
        Y(J)=FN
        ICOUNT=ICOUNT+1
2       START(J)=DCHK
C
C  SIMPLEX CONSTRUCTION COMPLETE.
C
C    FIND THE HIGHEST AND LOWEST VALUES. YNEWLO (Y(IHI)) INDICATES THE
C     VERTEX OF THE SIMPLEX TO BE REPLACED.
C
1000    YLO=Y(1)
        YNEWLO=YLO
        ILO=1
        IHI=1


        DO 5 I=2,NN
        IF(Y(I).GE.YLO) GO TO 4
        YLO=Y(I)
        ILO=I
4       IF(Y(I).LE.YNEWLO) GO TO 5

        YNEWLO=Y(I)
        IHI=I
5       CONTINUE
C

        IF(ICOUNT.LE.NN) YOLDLO=YLO

        IF(ICOUNT.LE.NN) GO TO 2002
        IF(YLO.GE.YOLDLO) GO TO 2002
        YOLDLO=YLO
        NITER=NITER+1
        IF(NITER.GE.ITMAX) GO TO 900
        IF(IPRINT.EQ.0) GO TO 2002
C       CALL PRNOUT(P(1,ILO),N,NITER,ICOUNT,YLO)
C
C  PERFORM CONVERGENCE CHECKS ON FUNCTIONS.
C
2002    DCHK=(YNEWLO+DABIT)/(YLO+DABIT)-1.0D0

C  PRINT OUT NITER (ITERATION NO.) AND ITMAX (MAX. NO. OF ITERATIONS) 

C  STARTING WITH THE BESTDOS4.FOR PROGRAM, BECAUSE THIS PROGRAM SOLVES 
C  D.E.'S WHICH MEANS IT CAN TAKE A LONG TIME, AND NITER AND ITMAX
C  GIVE AT LEAST SOME INDICATION OF HOW LONG THE PROGRAM HAS GONE AND 

C  HOW LONG IT COULD GO. SIMILARLY, PRINT OUT DABS(DCHK) AN REQMIN,

C  THE MEASURE OF HOW CLOSE TO CONVERGENCE THE PROGRAM IS AND THE
C  REQUIRED TOLERANCE FOR CONVERGENCE.


C  THE FOLLOWING CONVERGENCE INFO IS ONLY WRITTEN IF IPRINTOUT = 1.


      IF(IPRINTOUT .EQ. 1) WRITE(*,1234) NITER,ITMAX,DABS(DCHK),REQMIN
 1234 FORMAT('+ ',' ITER ',I5,' (MAX = ',I5,')  TOL = ',G10.4,' (CONV.
     1 TOL = ',G10.4,')')

        IF(DABS(DCHK).GT. REQMIN) GO TO 2001

        ICONV=1
        GO TO 900
C
2001    KONVGE=KONVGE-1
        IF(KONVGE.NE.0) GO TO 2020
        KONVGE=5

C
C  CHECK CONVERGENCE OF COORDINATES ONLY EVERY 5 SIMPLEXES.
C
        DO 2015 I=1,N

        COORD1=P(I,1)
        COORD2=COORD1
        DO 2010 J=2,NN
        IF(P(I,J).GE.COORD1) GO TO 2005
        COORD1=P(I,J)
2005    IF(P(I,J).LE.COORD2) GO TO 2010
        COORD2=P(I,J)
2010    CONTINUE
        DCHK=(COORD2+DABIT)/(COORD1+DABIT)-1.0D0
        IF(DABS(DCHK).GT.REQMIN) GO TO 2020
2015    CONTINUE
        ICONV=1
        GO TO 900
2020    IF(ICOUNT.GE.KCOUNT) GO TO 900
C
C  CALCULATE PBAR, THE CENTRIOD OF THE SIMPLEX VERTICES EXCEPTING THAT
C   WITH Y VALUE YNEWLO.
C
        DO 7 I=1,N
        Z=0.0D0
        DO 6 J=1,NN
6       Z=Z+P(I,J)
        Z=Z-P(I,IHI)
7       PBAR(I)=Z/DN
C
C  REFLECTION THROUGH THE CENTROID.
C
        DO 8 I=1,N

8       PSTAR(I)=(1.0D0+RCOEFF)*PBAR(I)-RCOEFF*P(I,IHI)
        CALL FUNC(N,PSTAR,FN)
        YSTAR=FN
        ICOUNT=ICOUNT+1
        IF(YSTAR.GE.YLO) GO TO 12
        IF(ICOUNT.GE.KCOUNT) GO TO 19
C
C  SUCESSFUL REFLECTION SO EXTENSION.

C
        DO 9 I=1,N

9       P2STAR(I)=ECOEFF*PSTAR(I)+(1.0D0-ECOEFF)*PBAR(I)
        CALL FUNC(N,P2STAR,FN)
        Y2STAR=FN

        ICOUNT=ICOUNT+1
C

C  RETAIN EXTENSION OR CONTRACTION.

C
        IF(Y2STAR.GE.YSTAR) GO TO 19
10      DO 11 I=1,N
11      P(I,IHI)=P2STAR(I)

        Y(IHI)=Y2STAR
        GO TO 1000
C
C  NO EXTENSION.
C
12      L=0
        DO 13 I=1,NN
        IF(Y(I).GT.YSTAR) L=L+1
13      CONTINUE
        IF(L.GT.1) GO TO 19
        IF(L.EQ.0) GO TO 15
C

C  CONTRACTION ON REFLECTION SIDE OF CENTROID.
C
        DO 14 I=1,N
14      P(I,IHI)=PSTAR(I)
        Y(IHI)=YSTAR
C
C  CONTRACTION ON THE Y(IHI) SIDE OF THE CENTROID.
C
15      IF(ICOUNT.GE.KCOUNT) GO TO 900
        DO 16 I=1,N
16      P2STAR(I)=CCOEFF*P(I,IHI)+(1.0D0-CCOEFF)*PBAR(I)
        CALL FUNC(N,P2STAR,FN)
        Y2STAR=FN
        ICOUNT=ICOUNT+1

        IF(Y2STAR.LT.Y(IHI)) GO TO 10
C
C  CONTRACT THE WHOLE SIMPLEX
C
        DO 18 J=1,NN
        DO 17 I=1,N
        P(I,J)=(P(I,J)+P(I,ILO))*0.5D0
17      XMIN(I)=P(I,J)
        CALL FUNC(N,XMIN,FN)
        Y(J)=FN

18      CONTINUE
        ICOUNT=ICOUNT+NN
        IF(ICOUNT.LT.KCOUNT) GO TO 1000
        GO TO 900
C
C  RETAIN REFLECTION.
C
19      CONTINUE
        DO 20 I=1,N
20      P(I,IHI)=PSTAR(I)
        Y(IHI)=YSTAR
        GO TO 1000
C
C  SELECT THE TWO BEST FUNCTION VALUES (YNEWLO AND YSEC) AND THEIR
C    COORDINATES (XMIN AND XSEC)>. XSEC NOT SET AS OF BESTDOS7.FOR.
C
900     DO 23 J=1,NN
        DO 22 I=1,N
22      XMIN(I)=P(I,J)
        CALL FUNC(N,XMIN,FN)
        Y(J)=FN
23      CONTINUE
        ICOUNT=ICOUNT+NN
        YNEWLO=BIGNUM
        DO 24 J=1,NN
        IF(Y(J).GE.YNEWLO) GO TO 24
        YNEWLO=Y(J)
        IBEST=J
24      CONTINUE

        Y(IBEST)=BIGNUM
        YSEC=BIGNUM
        DO 25 J=1,NN
        IF(Y(J).GE.YSEC) GO TO 25
        YSEC=Y(J)
C       ISEC=J  ... ISEC NOT USED. REMOVED IN BESTDOS7.FOR.
25      CONTINUE
        DO 26 I=1,N
        XMIN(I)=P(I,IBEST)
26      CONTINUE
        RETURN
        END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE USERPREP(NDIM,NP,NVAR,MAXDIM,PAR,NOFIX,
     1  PARFIX,IRAN,INOPT)

C  THIS SUBROUTINE, CALLED BY MAIN, READS THE FORTRAN FILE, FORFILE,
C  OPENED IN MAIN (FILE 28), WHICH WAS CREATED BY A 'BOXES'- TYPE 
C  PROGRAM, AND RETURNS THE VALUES IN THE ABOVE ARGUMENT LIST. 

C ???
C  NOTE: WHEN THIS PROGRAM STARTS READING THE NEW BOXES PROGRAM, MAKE
C     	 SURE THAT THE MICHAELIS-MENTIN EQUATION IS CORRECT - IT SHOULD
C	 BE  (SEE PAGE *1 OF M2_7/m2_7calc.f NOTES OR NOTES FROM PG. 5.
C  	 OF PHARMACOKINETICS AND PHARMACODYNAMICS, VOL 2).

C	 dX/dT = (VM x X) / (KM x V1 + X), WHERE VM = V1 * Vmax, AND
C	  THE UNITS ARE: X --> grams; T --> hours; VM --> grams/hour;

C			 V1 --> liters; KM --> grams/liter;
C			 Vmax --> grams/(liter * hour)

C  NOTE: THE ABOVE EQUATION IS EXACTLY THE SAME AS
C	 dC/dT = (Vmax * C)/(KM + C), WHERE C = X/V1, WHICH IS
C	  EQUATION 3 ON PG. 5 OF PHARMACOKINETICS AND PHARMACODYNAMICS, 
C         VOL 2, WHERE:
C	  Vmax = dC/dT AS C--> infinity;
C	  KM = C WHEN dC/dT = Vmax/2.


C	  ABOVE COMMENTS WERE IMPROVED 7/27/99 AFTER 
C         CONVERSATION WITH ROGER AND DARRYL CLARDY.
C ???

        IMPLICIT REAL*8(A-H,O-Z)
	DIMENSION IRAN(32)

        CHARACTER PAR(30)*11,PARFIX(20)*11,READLINE*1000,
     1  PSYM(32)*11,RR*1,TEMP*11,C*1,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  FILE 28 WAS OPENED (IN MAIN) AT THE END OF THE FILE. BACKSPACE AND 
C  THEN READ IN NDIM, NP AND PSYM(I),I=1,NP.

    2   FORMAT(A1000)

   30	BACKSPACE(28)

	BACKSPACE(28)
	READ(28,2) READLINE
	IF(READLINE(8:9) .NE. 'N=') GO TO 30
	BACKSPACE(28)
	READ(28,3) NDIM
    3   FORMAT(T10,I3)

   40	READ(28,2) READLINE
	IF(READLINE(8:9) .NE. 'NP') GO TO 40
	BACKSPACE(28)
	READ(28,4) NP
    4   FORMAT(T11,I3)

   50	READ(28,2) READLINE

	IF(READLINE(8:11) .NE. 'PSYM') GO TO 50
	BACKSPACE(28)

	DO 70 I=1,NP

	IF(I .LE. 9) READ(28,14) TEMP
	IF(I .GE. 10 .AND. I .LE. 99) READ(28,6) TEMP

C  WRITE TEMP INTO PSYM, STRIPPING OFF THE ENDING QUOTE MARK, IF ONE
C  IS THERE.

	C = ''''

	PSYM(I) = TEMP

	DO J=1,11

	 IF(TEMP(J:J) .EQ. C) THEN
	  PSYM(I) = TEMP(1:J-1)
	  GO TO 70
	 ENDIF	  

	END DO



   70   CONTINUE

   14   FORMAT(T17,A11)
    6   FORMAT(T18,A11)


C  IF INOPT .EQ. 3 (MEANING THE PROGRAM HAS ALREADY OPENED THE 
C  FILE, 'GUICMDS.INX'), THE NEXT LINE IN THE INSTRUCTION FILE HAS
C  THE VALUES FOR IRAN(I),I=1,NP. READ THIS LINE, CALCULATE NVAR AND
C  NOFIX AND ... THAT'S IT. THERE IS NO USER INTERACTION IF 
C  INOPT .EQ. 3.

        IF(INOPT .EQ. 3) THEN

         READ(23,*)
C  SKIP THIS LINE. IT CONTAINS 'IRAN INDICES'.


         READ(23,*) (IRAN(I),I=1,NP)

         NVAR = 0
         NOFIX = 0
	
         DO I = 1,NP


	    IF(IRAN(I) .EQ. 1) THEN
           NVAR = NVAR+1
           PAR(NVAR) = PSYM(I)
          ENDIF

          IF(IRAN(I) .EQ. 0) THEN
           NOFIX = NOFIX + 1
           PARFIX(NOFIX) = PSYM(I)
          ENDIF

         END DO

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INOPT .EQ. 3)  CONDITION.


C  IF INOPT .EQ. 1 (MEANING THE PROGRAM HAS ALREADY OPENED AN 
C  INSTRUCTION FILE) THE NEXT LINE IN THE INSTRUCTION FILE HAS THE
C  VALUES FOR IRAN(I),I=1,NP. READ THIS LINE AND PRESENT THE INFO TO
C  THE USER. 

        IF(INOPT .EQ. 1) THEN

         READ(23,*)
C  SKIP THIS LINE. IT CONTAINS 'IRAN INDICES'.
         
        READ(23,*) (IRAN(I),I=1,NP)
        WRITE(*,201)
  201    FORMAT(/' YOU HAVE SELECTED YOUR PARAMETERS TO BE RANDOM'/
     1' OR FIXED AS INDICATED BELOW. IF YOU WANT TO CHANGE THIS, YOU'/
     2' WILL HAVE TO RERUN THIS PROGRAM WITHOUT AN INSTRUCTION FILE'/
     3' SINCE THE REST OF THIS INSTRUCTION FILE (BOUNDARIES AND/OR'/
     4' FIXED VALUES WILL NOT BE COMPATIBLE WITH YOUR CHANGED '/
     5' DESIGNATIONS.'/)

         CALL PAUSE



	 NVAR = 0
	 NOFIX = 0
	

	 DO I = 1,NP


	  IF(IRAN(I) .EQ. 1) THEN
	   TEMP = 'RANDOM'
	   NVAR = NVAR+1
	   PAR(NVAR) = PSYM(I)
	  ENDIF

	  IF(IRAN(I) .EQ. 0) THEN
	   TEMP = 'FIXED'

	   NOFIX = NOFIX + 1
	   PARFIX(NOFIX) = PSYM(I)
	  ENDIF

	  WRITE(*,202) PSYM(I),TEMP
  202   FORMAT(2X,A11,2X,A11)

	 END DO

  210	 WRITE(*,203)
  203  FORMAT(/' ENTER 1 IF THE ABOVE DESIGNATIONS ARE CORRECT;'/
     1' ENTER 0 OTHERWISE: ')


	 READ(*,*,ERR=210) ICORRECT
	 IF(ICORRECT .NE. 1 .AND. ICORRECT .NE. 0) GO TO 210
	 

	 IF(ICORRECT .EQ. 0) THEN



	  WRITE(*,204)
  204   FORMAT(//' PLEASE RERUN THE PROGRAM WITH KEYBOARD ENTRY.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,204)                                 
        CLOSE(47)



        CALL PAUSE
	  STOP



	 ENDIF

C  IF NVAR .GT. MAXDIM, PRINT MESSAGE TO USER AND HAVE HIM TRY AGAIN.
C  SIMILARLY IF NOFIX .GT. 20, OR IF NVAR + NOFIX .GT. 32.

  	IF(NVAR .GT. MAXDIM) THEN



	 WRITE(*,207) NVAR,MAXDIM
  207    FORMAT(//' SOMEHOW, YOUR INSTRUCTION FILE HAS ',I2,/
     1' PARAMETERS DESIGNATED TO BE RANDOM VARIABLES. THE LIMIT IS '/
     2' CURRENTLY ',I2,'. PLEASE USE A CURRENT INSTRUCTION FILE OR'/
     3' RERUN THE PROGRAM WITH KEYBOARD ENTRY.'//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,207) NVAR,MAXDIM                     
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

	IF(NOFIX .GT. 20) THEN



	 WRITE(*,208) NOFIX
  208    FORMAT(//' SOMEHOW, YOUR INSTRUCTION FILE HAS ',I2,/
     1' PARAMETERS DESIGNATED TO BE FIXED. THE LIMIT IS CURRENTLY 20.'/
     2' PLEASE USE A CURRENT INSTRUCTION FILE OR RERUN THE PROGRAM'/
     3' WITH KEYBOARD ENTRY.'//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,208) NOFIX                          
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF


	IF(NVAR + NOFIX .GT. 32) THEN

	 WRITE(*,209) NVAR + NOFIX
  209    FORMAT(//' SOMEHOW, YOUR INSTRUCTION FILE HAS ',I2,' TOTAL'/
     1' PARAMETERS. THE LIMIT IS CURRENTLY 32. PLEASE USE A CURRENT '/
     2' INSTRUCTION FILE OR RERUN THE PROGRAM WITH KEYBOARD ENTRY.'//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,209) NVAR + NOFIX                   
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF



	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INOPT .EQ. 1) CONDITION.




C  THE CODE BELOW IS FOR THE INOPT .EQ. 0 CASE. 

	IF(INOPT .EQ. 0) THEN


C  NOW QUIZ THE USER TO SEE WHICH PARAMETERS ARE FIXED, AND WHICH ARE
C  RANDOM. 

C  SET IRAN(I) = 1 IF PSYM(I) = RANDOM;
C		 0 IF PSYM(I) = FIXED.

   80	WRITE(*,7) NP
    7   FORMAT(/' FOR EACH OF THE ',I2,' PARAMETERS, '//
     1' ENTER "R" IF IT IS TO BE A RANDOM VARIABLE;'/
     2' ENTER "F" IF IT IS TO BE A FIXED PARAMETER.'//)

	NVAR = 0
	NOFIX = 0


	DO I=1,NP


   8     FORMAT(1X,A11,':  ')
   60	 WRITE(*,8) PSYM(I)
	 READ(*,9) RR

    9    FORMAT(A1)
	 IF(RR .NE. 'R' .AND. RR .NE. 'r' .AND. RR .NE. 'F' 
     1      .AND. RR .NE. 'f') GO TO 60

	 IF(RR .EQ. 'R' .OR. RR .EQ. 'r') THEN
	  NVAR = NVAR+1


C  NOTE THAT THIS PROGRAM RESETS NP TO A VERY LARGE VALUE
C  IF NVAR > THE DIMENSION LIMIT OF PAR. THIS IS BIZARRE. IT DOESN'T

C  HAPPEN IF NOFIX > THE DIMENSION LIMIT OF PARFIX, AND IT DOESN'T
C  HAPPEN IN MONTBIG8.FOR WHICH HAS THE SAME CODE AS HERE. 
C  BUT SINCE IT HAPPENS HERE, CHECK TO SEE IF NVAR > MAXDIM, AND IF
C  SO TRANSFER CONTROL TO LABEL 110 WITHOUT SETTING PAR(MAXDIM+1) TO
C  PSYM(I).

	  IF(NVAR .GT. MAXDIM) GO TO 110
	  PAR(NVAR) = PSYM(I)

	  IRAN(I) = 1
	 ENDIF

	 IF(RR .EQ. 'F' .OR. RR .EQ. 'f') THEN
	  NOFIX = NOFIX+1
	  PARFIX(NOFIX) = PSYM(I)
	  IRAN(I) = 0
	 ENDIF


	END DO

C  IF NVAR .GT. MAXDIM, PRINT MESSAGE TO USER AND HAVE HIM TRY AGAIN.
C  SIMILARLY IF NOFIX .GT. 20, OR IF NVAR + NOFIX .GT. 32.

  110	IF(NVAR .GT. MAXDIM) THEN
	 WRITE(*,111) NVAR,MAXDIM
  111    FORMAT(//' YOU HAVE SELECTED ',I2,' PARAMETERS TO BE RANDOM'/
     1' VARIABLES. THE LIMIT IS CURRENTLY ',I2,'. PLEASE RESELECT YOUR'/

     2' RANDOM VARIABLES WITH THIS LIMIT IN MIND.'//)
	 GO TO 80
	ENDIF

	IF(NOFIX .GT. 20) THEN
	 WRITE(*,112) NOFIX
  112    FORMAT(//' YOU HAVE SELECTED ',I2,' PARAMETERS TO BE FIXED'/
     1' PARAMETERS. THE LIMIT IS CURRENTLY 20. PLEASE RESELECT YOUR'/
     2' RANDOM VARIABLES WITH THIS LIMIT IN MIND.'//)
	 GO TO 80
	ENDIF

	IF(NVAR + NOFIX .GT. 32) THEN



	 WRITE(*,113) NVAR + NOFIX
  113    FORMAT(//' YOUR MODEL FILE HAS A TOTAL OF ',I2,' PARAMETERS.'/
     1' THE LIMIT IS CURRENTLY 32. PLEASE EDIT YOUR MODEL FILE SO '/
     2' THAT IT HAS .LE. 32 PARAMETERS. '//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,113) NVAR + NOFIX                    
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INOPT .EQ. 0)  CONDITION.



	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE DETECT(NOB,PATH,FORFILE,IVERS) - REMOVED.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE CHECKLIN(READLINE,TARGET,IYES) - REMOVED.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE WRITEDIF(IVERS) - REMOVED.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE WRITEOUT(IVERS) - REMOVED.



CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE WRITESYM(IVERS) - REMOVED.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C  SUBROUTINE SKIPLINE(READLINE,IYES) - REMOVED.
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C

	SUBROUTINE GETNUMEQ(NUMEQT,NDRUG)

	IMPLICIT REAL*8(A-H,O-Z)
	CHARACTER READLINE*78,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.

C  THIS SUBROUTINE READS THE PATIENT DATA FILE (FILE 21) TO FIND THE 
C  NO. OF OUTPUT EQUATIONS (NUMEQT), AND THE NO. OF DRUGS (NDRUG).

C  PRINT MESSAGE TO THE USER THAT IF HE CHANGES HIS WORKING COPY 
C  FILE IN SUBROUTINE VERIF1, HE MUST MAKE SURE THAT THE NEW WORKING
C  COPY FILE HAS THE SAME NO. OF OUTPUT EQUATIONS AS THE FILE.

	WRITE(*,4)
    4   FORMAT(//' YOUR WORKING COPY FILE WILL NOW BE OPENED TO'/
     1' READ THE NUMBER OF OUTPUT EQUATIONS, AND THE NUMBER OF DRUGS.'/

     2' LATER, YOU WILL HAVE THE OPTION TO CHANGE YOUR WORKING COPY'/
     3' FILE. IF YOU DO THIS, MAKE SURE THAT THE NEW FILE HAS THE SAME'/

     4' NUMBER OF OUTPUT EQUATIONS AND THE SAME NUMBER OF DRUGS.'//)

	CALL PAUSE

C  NOTE THAT NUMEQT IS ON THE LINE WITH "NO. OF TOTAL OUTPUT EQUATIONS"
C  IN COLUMNS 12:40. IF NO LINE HAS THESE WORDS, THIS PATIENT DATA
C  FILE IS NOT A NEW-STYLE WORKING COPY FILE FROM ANDREAS' NEW
C  BOXES PROGRAM.

    3  FORMAT(A78)
   35	 READ(21,3,IOSTAT=IEND) READLINE

        IF(IEND .LT. 0) THEN



         WRITE(*,58)
   58    FORMAT(//' YOUR WORKING COPY FILE IS NOT A CURRENT MULTIPLE'/
     1' DRUG WORKING COPY FILE. SUCH A FILE MUST HAVE A LINE WITH '/
     2' "NO. OF DRUGS" IN COLUMNS 12:23.'//
     3' THE PROGRAM STOPS. '//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,58)                                 
        CLOSE(47)



         CALL PAUSE
         STOP



        ENDIF

        IF(READLINE(12:23) .NE. 'NO. OF DRUGS') GO TO 35
        BACKSPACE(21)
   13   FORMAT(T2,I5)
        READ(21,13) NDRUG


   45	  READ(21,3,IOSTAT=IEND) READLINE

        IF(IEND .LT. 0) THEN



         WRITE(*,59) 
   59    FORMAT(//' YOUR WORKING COPY FILE IS NOT A CURRENT MULTIPLE'/
     1' DRUG WORKING COPY FILE. SUCH A FILE MUST HAVE A LINE WITH '/
     2' "NO. OF TOTAL OUTPUT EQUATIONS IN COLUMNS 12:40.'//
     3' THE PROGRAM STOPS. '//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,59)                                 
        CLOSE(47)




         CALL PAUSE
         STOP



        ENDIF

        IF(READLINE(12:40) .NE. 'NO. OF TOTAL OUTPUT EQUATIONS') 
     1   GO TO 45
        BACKSPACE(21)
        READ(21,13) NUMEQT
        CLOSE(21)

        RETURN
        END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE PAUSE

C  THIS ROUTINE IS USED TO REPLACE A PAUSE STATEMENT, WHICH CAUSES 
C  WARNINGS WHEN THIS PROGRAM IS COMPILED AND LINKED USING gfortran
C  (AND FORCES THE USER TO TYPE "go" INSTEAD OF SIMPLY HITTING THE
C  ENTER KEY).

        WRITE(*,1)
    1   FORMAT(' HIT ANY KEY TO CONTINUE: ')
        READ(*,*,ERR=10) IKEY
        IF(IKEY .EQ. 1) RETURN
   10   RETURN

        END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE VERIF1(FORFILE,ICSVFILE,FUTUREFILEIN,PATH,NOB,C0P,
     1   C1P,C2P,C3P,NUMEQT,NOFIX,VALFIX,PARFIX,TOLER,ATOL,IASS,AF,
     2   MATFIL,NPAGDENFILE,INCLUDPAST,IPASTFILE,PASTFILEIN,
     3   IERRMOD,GAMLAM,NDRUG,IPRIOROBS,TNEXT,IDELTA,MAXOBDIM,MAXCYC,
     4   IOPTIMIZE,BIASWEIGHT,ITARGET)

        PARAMETER(MAXDIM=25) 
        IMPLICIT REAL*8(A-H,O-Z)
 
        PARAMETER(MAXNUMEQ=7)

       DIMENSION C0P(MAXNUMEQ),C1P(MAXNUMEQ),C2P(MAXNUMEQ),
     1  C3P(MAXNUMEQ),VALFIX(20),IASS(MAXNUMEQ),IRAN(32),ATOL(20),AF(7)

        CHARACTER FORFILE*20,MATFIL*20,FUTUREFILEIN*20,PARFIX(20)*11,
     1   TMPFILE*13,PATHFILE*73,PAR(30)*11,PATH*60,NPAGDENFILE*20,
     2   PASTFILEIN*20,ESTNAM*6

C  SUBROUTINE VERIF1 IS CALLED BY MAIN TO PRINT TO THE SCREEN THE INPUT
C  INFO, SO THE USER CAN VERIFY THAT THE VALUES WERE ENTERED CORRECTLY,

C  OR CHANGE VALUES AS DESIRED.


C  NOTE: SUBROUTINE CHANGE BELOW IS CALLED SEVERAL TIMES. ITS ARGUMENT,
C        ICHANG, RETURNS AS 1 IF THE PREVIOUS INFORMATION PRINTED TO THE
C        SCREEN IS VALIDATED BY THE USER; IT RETURNS AS 0 IF THE USER
C        WANTS TO CHANGE SOMETHING. 



  102   FORMAT(A20)
  103   FORMAT(A3)

 8040   WRITE(*,1)
    1   FORMAT(///' THE FOLLOWING INFO WAS READ IN; IF ANY OF IT IS '/
     1' INCORRECT, MAKE THE DESIRED CHANGES.')

        WRITE(*,2) FORFILE
    2   FORMAT(/' THE MODEL FILE WHICH IS ALREADY LINKED WITH THIS '/
     1' PROGRAM, AND IS AN EDITED VERSION OF TSTMULTM.FOR, IS ',A20)


        CALL CHANGE(ICHANG)

        IF(ICHANG .EQ. 0) THEN

         WRITE(*,3)
    3    FORMAT(/' ENTER THE NAME OF THE MODEL FILE WHICH IS ALREADY'/
     1' LINKED WITH THIS PROGRAM (IF THIS FILE IS NOT AN EDITED '/
     2' VERSION OF TSTMULTM.FOR, STOP THE PROGRAM NOW): ')
         READ(*,102) FORFILE


C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

 5010	   TMPFILE = ' '
         TMPFILE = FORFILE
         CALL FULLNAME(PATH,TMPFILE,PATHFILE)

         OPEN(28,FILE=PATHFILE,ERR=50,STATUS='OLD',POSITION='APPEND')

         GO TO 30
   50    WRITE(*,4406) FORFILE
 4406    FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1'    ',A73/
     2' ENTER THE CORRECT FILENAME OR ... '/
     2' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ') 
         READ(*,102) FORFILE
         IF(FORFILE(1:3) .EQ. '-99') CALL SEEDIR(PATH,NOB,FORFILE)
         GO TO 5010

   30   CALL USERPREP(NDIM,NP,NVAR,MAXDIM,PAR,NOFIX,PARFIX,IRAN,0)

         CLOSE(28)

C  THE ABOVE CALL OBTAINS THE FOLLOWING VALUES:

C  NDIM = NO. OF STATES FOR THE O.D.E.
C  NP = TOTAL NO. OF PARAMETERS = NVAR + NOFIX.
C  NVAR = NO. OF R.V.'S (1 .LE. NVAR .LE. MAXDIM).
C  PAR(I),I=1,NVAR = NAMES OF THE RANDOM VARIABLES FOR THIS RUN.
C  NOFIX = NO. OF NON-RANDOM (FIXED) PARAMETERS WHOSE FIXED VALUES ARE 
C          TO BE SET BY THE USER. 
C  PARFIX(I),I=1,NOFIX = NAMES OF FIXED PARAMETERS FOR THIS RUN.

C  IRAN(I) = 1 IF PARAMATER I IS RANDOM;
C	     0 IF PARAMETER I IS FIXED; I = 1,NVAR+NOFIX.

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0)  CONDITION FOR THE
C  FORFILE FILE.

      IF(INCLUDPAST .EQ. 0) WRITE(*,9001) NPAGDENFILE
 9001 FORMAT(/' YOUR RUN DOES NOT INCLUDE A "PAST" HISTORY FOR THE '/
     1' SUBJECT BEING ANALYZED. THEREFORE, THE NPAG DENSITY FILE YOU'/
     2' ENTERED ABOVE, ',A20,', WILL BE USED AS THE PARAMETER DENSITY'/
     3' FOR THE OPTIMIZATION OVER THE DOSES IN THE "FUTURE" FILE.')
  
      IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 0) 
     1 WRITE(*,9004) PASTFILEIN,NPAGDENFILE
 9004 FORMAT(/' YOUR RUN INCLUDES A "PAST" HISTORY FOR THE SUBJECT'/
     1' BEING ANALYZED (IN FILE ',A20,'). BUT THIS FILE DOES NOT HAVE'/
     2' ANY NON-MISSING OBSERVED VALUES, AND SO THE NPAG DENSITY FILE'/
     3' YOU ENTERED ABOVE, ',A20,', WILL BE USED AS THE PARAMETER'/
     4' DENSITY FOR THE OPTIMIZATION OVER THE DOSES IN THE "FUTURE" '/
     5' FILE.')


      IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1) THEN
       
       IF(IPASTFILE .EQ. 0) WRITE(*,9002) PASTFILEIN,NPAGDENFILE
9002   FORMAT(/' YOUR RUN INCLUDES A "PAST" HISTORY FOR THE SUBJECT'/
     1' BEING ANALYZED (IN WORKING COPY FILE ',A20,'), AND THIS FILE'/
     2' HAS NON-MISSING OBSERVED VALUES. THEREFORE, THE NPAG DENSITY'/
     3' FILE YOU ENTERED ABOVE, ',A20,', WILL BE USED AS A PRIOR'/
     4' DENSITY FOR ANOTHER NPAG RUN WHICH WILL OBTAIN A '/
     5' POSTERIOR DENSITY WHICH WILL BE USED AS THE PARAMETER DENSITY'/
     6' FOR THE OPTIMIZATION OVER THE DOSES IN THE "FUTURE" FILE.')


       IF(IPASTFILE .EQ. 1) WRITE(*,9003) PASTFILEIN,NPAGDENFILE
9003   FORMAT(/' YOUR RUN INCLUDES A "PAST" HISTORY FOR THE SUBJECT'/
     1' BEING ANALYZED (IT IS THE INFO OF THE FIRST SUBJECT IN THE'/
     2' .CSV FILE, ',A20,'), AND THIS FILE HAS NON-MISSING OBSERVED'/
     3' VALUES. THEREFORE, THE NPAG DENSITY FILE YOU ENTERED ABOVE,'/
     4' ',A20,' WILL BE USED AS A PRIOR DENSITY FOR ANOTHER NPAG RUN'/
     5' WHICH WILL OBTAIN A POSTERIOR DENSITY WHICH WILL BE'/
     6' USED AS THE PARAMETER DENSITY FOR THE OPTIMIZATION OVER THE'/
     7' DOSES IN THE "FUTURE" FILE.')


      WRITE(*,8092) MAXCYC
 8092 FORMAT(//' AND THIS NEW NPAG ANALYSIS WILL RUN A MAXIMUM '/
     1' OF ',I6,' CYCLES.')


      ENDIF

C  THE ABOVE ENDIF IS FOR THE  
C   IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1)  CONDITION.
 

        CALL CHANGE(ICHANG)

        IF(ICHANG .EQ. 0) THEN


 8010 WRITE(*,8013)
 8013 FORMAT(/' THIS PROGRAM REQUIRES AN NPAG DENSITY FROM A PREVIOUS'/
     1' ANALYSIS OF A POPULATION. THIS NPAG DENSITY WILL BE USED AS'/
     2' THE PARAMETER DENSITY FOR THE OPTIMIZATION OVER THE DOSES IN'/
     3' THE "FUTURE" OF THE SUBJECT BEING CONSIDERED IN THIS RUN IF'/
     4' THERE IS NO "PAST" HISTORY FOR THE SUBJECT, OR IF THE "PAST"'/
     5' HISTORY INCLUDES NO OBSERVED VALUES.'//
     6' BUT IF THERE IS A "PAST" HISTORY FOR THE SUBJECT, AND IT '/
     7' INCLUDES OBSERVATIONS, THEN THE NPAG DENSITY WILL BE USED AS'/
     8' AS A PRIOR DENSITY FOR ANOTHER NPAG RUN WHICH WILL OBTAIN A'/
     9' POSTERIOR DENSITY FOR THE SUBJECT, AND THIS NEW '/
     1' DENSITY WILL THEN BE THE DENSITY FOR THE OPTIMIZATION. '//
     1' ENTER THE NAME OF THE FILE WHICH CONTAINS THE NPAG DENSITY'/
     2' FROM A PREVIOUS ANALYSIS OF A POPULATION (IT WILL PROBABLY'/
     3' BE DENxxxx, WHERE xxxx WAS THE JOB NUMBER): '//
     4' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	READ(*,102) NPAGDENFILE
      IF(NPAGDENFILE(1:3) .EQ. '-99') 

     1 CALL SEEDIR(PATH,NOB,NPAGDENFILE)



C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 

C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).


      TMPFILE = ' '
      TMPFILE = NPAGDENFILE
      CALL FULLNAME(PATH,TMPFILE,PATHFILE)
      OPEN(21,FILE=PATHFILE,ERR=8020,STATUS='OLD')
      GO TO 8025
 8020 WRITE(*,5316) PATHFILE
      GO TO 8010
 8025 CLOSE(21)

 8030 WRITE(*,8031)
 8031 FORMAT(/' ENTER 1 IF THE CALCULATIONS ARE TO INCLUDE THE "PAST" '/
     1'         HISTORY FOR THE SUBJECT OF THIS RUN;'/
     2' ENTER 0 OTHERWISE: ')

      READ(*,*,ERR=8030) INCLUDPAST
      IF(INCLUDPAST .NE. 1 .AND. INCLUDPAST .NE. 0) GO TO 8030

      IF(INCLUDPAST .EQ. 0) THEN
       IPASTFILE = -1
       PASTFILEIN = 'NOT USED'
       TNEXT = 0.D0
      ENDIF

8035   IF(INCLUDPAST .EQ. 1) THEN


        WRITE(*,8003)
8003    FORMAT(/' ENTER 1 IF THE FILE WHICH HAS THE "PAST" INFO FOR'/
     1'         THE SUBJECT OF THIS RUN IS A .CSV FILE (IN THIS CASE,'/
     2'         THE INFO FOR THE FIRST SUBJECT IN THE .CSV FILE WILL'/
     3'         BE USED); '/
     4' ENTER 0 IF THE FILE WHICH HAS THE "PAST" INFO FOR THE SUBJECT'/
     5'         OF THIS RUN IS A WORKING COPY FILE: ')

        READ(*,*,ERR=8035) IPASTFILE
        IF(IPASTFILE .NE. 1 .AND. IPASTFILE .NE. 0) GO TO 8035
 
         IF(IPASTFILE .EQ. 0) THEN

          WRITE(*,1021)
     	    READ(*,102) PASTFILEIN
          IF(PASTFILEIN(1:3) .EQ. '-99')CALL SEEDIR(PATH,NOB,PASTFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

          TMPFILE = ' '
          TMPFILE = PASTFILEIN


          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(21,FILE=PATHFILE,ERR=8050,STATUS='OLD')
          GO TO 8045
 8050     WRITE(*,5316) PATHFILE
          GO TO 8030
 8045     CONTINUE


C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIOROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.



          CLOSE(21)

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IPASTFILE .EQ. 0) CONDITION.


         IF(IPASTFILE .EQ. 1) THEN

          WRITE(*,8021)
 8021    FORMAT(/' ENTER THE NAME OF THE BLOCK MATRIX .CSV FILE. ONLY'/
     1' THE DATA FROM THE FIRST SUBJECT IN THIS FILE WILL BE READ TO'/
     2' OBTAIN THE DOSE/COVARIATE INFORMATION FOR THIS SUBJECT.'//
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	    READ(*,102) PASTFILEIN
          IF(PASTFILEIN(1:3) .EQ. '-99')CALL SEEDIR(PATH,NOB,PASTFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

          TMPFILE = ' '

          TMPFILE = PASTFILEIN
          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(87,FILE=PATHFILE,ERR=8060,STATUS='OLD')


          GO TO 8055
 8060     WRITE(*,5316) PATHFILE
          GO TO 8030
 8055     CONTINUE

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT
C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE

C  CREATE THE MULTIPLE DRUG WORKING COPY FILE XQZPJ001.PST IN THE
C  WORKING COPY DIRECTORY FROM THE DATA OF THE FIRST SUBJECT IN 
C  PATHFILE. NOTE THAT READBLOCK2 IS COPIED FROM MONT101.FOR. 


          REWIND(66)

C  AS OF BESTDOS108, CHANGE ARGUMENTS BELOW FROM C0,...,C3 TO 
C  C0P,...,C3P (SEE REASON AT THE TOP OF BESTDOS108.FOR).

          CALL READBLOCK2(PATH,C0P,C1P,C2P,C3P,1,0)
          CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.


          TMPFILE = ' '
          TMPFILE = 'XQZPJ001.PST'
          CALL FULLNAME(PATH,TMPFILE,PATHFILE)
          OPEN(21,FILE=PATHFILE,ERR=8065,STATUS='OLD')
          GO TO 8070
 8065     WRITE(*,5466) PATHFILE,PASTFILEIN
          GO TO 8030

 8070     CONTINUE

C  MUST INSPECT THIS FILE TO SEE IF THERE ARE ANY OBSERVED VALUES. IF
C  SO, THE PROGRAM WILL CALL NPAGFULL TO OBTAIN THE POSTERIOR
C  DENSITY BASED ON THE INFO IN THIS FILE AND THE PRIOR DENSITY IN
C  NPAGDENFILE; AND THIS NEW DENSITY WILL BE THE ONE USED FOR THE
C  OPTIMIZATION OF DOSES. IF NOT, THE DENSITY IN NPAGDENFILE WILL BE
C  THE DENSITY USED FOR THE OPTIMIZATION OF DOSES.

          CALL INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  IPRIROBS RETURNS AS 1 IF THERE ARE OBS. VALUES (NON-MISSING ONES)
C  IN PATFILE. OTHERWISE, IT RETURNS AS 0.


          CLOSE(21)

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IPASTFILE .EQ. 1) CONDITION.




       ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(INCLUDPAST .EQ. 1)  CONDITION.


      IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1) THEN

 8080  WRITE(*,8077)
 8077  FORMAT(/' FOR THE NPAG ANALYSIS WHICH WILL OBTAIN THE POSTERIOR'/
     1' DENSITY (WHICH WILL THEN BE THE DENSITY FOR THE OPTIMIZATION)'/
     2' SELECT THE MAXIMUM NO. OF CYCLES IT SHOULD RUN. THE DEFAULT'/
     3' IS A MAXIMUM OF 500 CYCLES. '//
     4' SELECT 1 FOR 500 CYCLE;'/
     5' SELECT 0 FOR A DIFFERERENT NO. OF MAXIMUM CYCLES: ')
       READ(*,*,ERR=8080) MAXCYC


       IF(MAXCYC .NE. 1 .AND. MAXCYC .NE. 0) GO TO 8080


       IF(MAXCYC .EQ. 1) MAXCYC = 500
   
       IF(MAXCYC .EQ. 0) THEN
 8090   WRITE(*,8091)
 8091   FORMAT(/' ENTER A POSITIVE NO. FOR THE MAXIMUM NO. OF CYCLES'/
     1' THE NPAG ANALYSIS SHOULD RUN: ')
        READ(*,*,ERR=8090) MAXCYC

        IF(MAXCYC .LT. 1) GO TO 8090
       ENDIF

      ENDIF

C  THE ABOVE ENDIF IS FOR THE
C   IF(INCLUDPAST .EQ. 1 .AND. IPRIOROBS .EQ. 1)  CONDITION.  




      ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0)  CONDITION.


        IF(ICSVFILE .EQ. 1) WRITE(*,4) FUTUREFILEIN
    4   FORMAT(/' THE FUTURE PATIENT INFO FOR THIS RUN COMES FROM THE'/
     1' DATA OF THE FIRST SUBJECT IN THE .CSV FILE ', A20)
        IF(ICSVFILE .EQ. 0) WRITE(*,6) FUTUREFILEIN

    6   FORMAT(/' THE FUTURE PATIENT INFO FOR THIS RUN COMES FROM THE '/
     1' (MULTIPLE DRUG) WORKING COPY PATIENT DATA FILE ', A20)

      IF(INCLUDPAST .EQ. 1) WRITE (*,14) PASTFILEIN,TNEXT
   14 FORMAT(/' SINCE YOUR ANALYSIS INCLUDES THE "PAST" HISTORY FOR'/
     1' THE SUBJECT (IN FILE ',A20,'), IT WILL'/
     2' BE ASSUMED THAT THE "PAST" BEGINS AT TIME = 0, AND THE'/
     3' "FUTURE" BEGINS AT TIME = TNEXT. IN OTHER WORDS, THE "FUTURE"'/
     4' FILE SHOULD START AS USUAL WITH TIME = 0, BUT ALL THE TIMES IN'/
     5' THIS FILE WILL BE INCREASED BY TNEXT HOURS, AND THEN THIS FILE'/
     6' WILL BE CONCATENATED TO THE "PAST" TO PROVIDE A COMPLETE'/
     7' DOSING/OBSERVED VALUE PROFILE OF THE SUBJECT.'//
     8' TNEXT IS CURRENTLY SET TO BE ',G12.5)



        CALL CHANGE(ICHANG)

        IF(ICHANG .EQ. 0) THEN

 5020  WRITE(*,5002)
 5002  FORMAT(/' THE FUTURE PATIENT INFO FOR THIS RUN CAN BE INPUT VIA'/
     1' A (MULTIPLE DRUG) WORKING COPY PATIENT DATA FILE OR A BLOCK '/
     2' MATRIX .CSV FILE (THE INFO WILL COME FROM THE DATA OF THE'/
     3' FIRST SUBJECT IN THIS CASE).'//
     5' ENTER 1 TO ENTER INFO USING A .CSV FILE; '/
     6' ENTER 0 TO ENTER INFO USING A WORKING COPY PATIENT DATA FILE: ')
        READ(*,*,ERR=5020) ICSVFILE
        IF(ICSVFILE .NE. 1 .AND. ICSVFILE .NE. 0) GO TO 5020

        IF(ICSVFILE .EQ. 0) THEN

        WRITE(*,1021)
 1021   FORMAT(/' ENTER THE NAME OF THE WORKING COPY PATIENT DATA FILE.'
     1//
     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	  READ(*,102) FUTUREFILEIN
        IF(FUTUREFILEIN(1:3) .EQ. '-99')
     1   CALL SEEDIR(PATH,NOB,FUTUREFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).


	TMPFILE = ' '
	TMPFILE = FUTUREFILEIN
	CALL FULLNAME(PATH,TMPFILE,PATHFILE)
	OPEN(21,FILE=PATHFILE,ERR=6440,STATUS='OLD')
	GO TO 6455
 6440 WRITE(*,5316) PATHFILE

 5316 FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1' ',A73)
	GO TO 5020
 6455 CONTINUE

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 0) CONDITION.


        IF(ICSVFILE .EQ. 1) THEN

        WRITE(*,3021)
3021   FORMAT(/' ENTER THE NAME OF THE BLOCK MATRIX .CSV FILE. ONLY'/
     1' THE DATA FROM THE FIRST SUBJECT IN THIS FILE WILL BE READ TO'/
     2' OBTAIN THE DOSE/COVARIATE INFORMATION FOR THIS SUBJECT.'//

     1' ENTER -99 TO SEE ALL OR A PART OF YOUR DIRECTORY: ')
     	  READ(*,102) FUTUREFILEIN
        IF(FUTUREFILEIN(1:3) .EQ. '-99')
     1   CALL SEEDIR(PATH,NOB,FUTUREFILEIN)

C  CHECK THAT THIS IS AN EXISTING FILE.

C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

        TMPFILE = ' '   
        TMPFILE = FUTUREFILEIN
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(87,FILE=PATHFILE,ERR=5440,STATUS='OLD')

        GO TO 5455
 5440   WRITE(*,5316) PATHFILE
        GO TO 5020
 5455   CONTINUE

C  AS OF BESTDOS103A.FOR, BEFORE CALLING NEWCSV, MUST CALL CONVERTCSV,
C  WHICH CONVERTS A "EUROPEAN" .CSV FILE TO THE TYPICAL "AMERICAN"
C  VERSION. IF THE .CSV FILE IS ALREADY IN THE "AMERICAN" FORMAT,
C  CONVERTCSV SIMPLY REWRITES FILE 87 TO SCRATCH FILE 77. NOTE THAT
C  NEWCSV CONVERTS FILE 77 TO FILE 67.

        CALL CONVERTCSV

C  CALL SUBROUTINE NEWCSV WHICH CONVERTS THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THEN CALL CSVCHANGE WHICH CHANGES .csv FILES WITH CODE OF
C  POPDATA DEC_11 (I.E., THOSE WITH 2 EXTRA COLUMNS FOR ADDL AND II)
C  TO EQUIVALENT .csv FILES WITH CODE OF POPDATA APR_11 (THOSE WITHOUT

C  THE TWO EXTRA COLUMNS). CSVCHANGE READS FILE 67, AND WRITES THE 
C  INFORMATION TO SCRATCH FILE 66. NOTE THAT IF THE .csv FILE READ IN
C  ALREADY IS THE OLDER VERSION (WITH CODE POPDATA APR_11), CSVCHANGE
C  SIMPLY REWRITES IT TO FILE 66, WHICH IS THEN READ BY SUBROUTINE
C  READBLOCK2.

             OPEN(67)
             CALL NEWCSV
             CALL CSVCHANGE

C  CREATE THE MULTIPLE DRUG WORKING COPY FILE XQZPJ001.FUT IN THE
C  WORKING COPY DIRECTORY FROM THE DATA OF THE FIRST SUBJECT IN 
C  PATHFILE. NOTE THAT READBLOCK2 IS COPIED FROM MONT101.FOR. 

        REWIND(66)

C  AS OF BESTDOS108, CHANGE ARGUMENTS BELOW FROM C0,...,C3 TO 
C  C0P,...,C3P (SEE REASON AT THE TOP OF BESTDOS108.FOR).

        CALL READBLOCK2(PATH,C0P,C1P,C2P,C3P,2,0)
        CLOSE(66)

C  NOW OPEN THE JUST MADE WORKING COPY PATIENT DATA FILE.

        TMPFILE = ' '


        TMPFILE = 'XQZPJ001.FUT'
        CALL FULLNAME(PATH,TMPFILE,PATHFILE)
        OPEN(21,FILE=PATHFILE,ERR=5465,STATUS='OLD')
        GO TO 5470
 5465   WRITE(*,5466) PATHFILE,FUTUREFILEIN
 5466   FORMAT(//' THE FOLLOWING FILE DOES NOT EXIST ... '/
     1' ',A73/
     2' WHICH MEANS THAT YOUR .CSV FILE, ',A20,' WAS NOT READ '/
     3' PROPERLY. PLEASE CHECK THIS FILE TO MAKE SURE IT IS CORRECT.'//)

        GO TO 5020

 5470   CONTINUE

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICSVFILE .EQ. 1) CONDITION.

C  AT THIS POINT, FILE 21 CONTAINS THE WORKING COPY FILE TO BE USED
C  FOR THIS RUN (VIA EITHER THE ICSVFILE .EQ. 0 OR THE ICSVFILE .EQ. 1
C  BLOCK). CALL GETNUMEQ WHICH WILL READ THIS FILE 21 AND OBTAIN
C  NUMEQT AND NDRUG.


	CALL GETNUMEQ(NUMEQT,NDRUG)
	CLOSE(21)

C  IF INCLUDPAST = 0, IT MEANS THAT THE USER IS PROVIDING NO "PAST"
C  HISTORY FOR THE SUBJECT. IN THIS CASE, SET TNEXT = 0.0. OTHERWISE,
C  HAVE THE USER ENTER TNEXT.

      IF(INCLUDPAST .EQ. 0) TNEXT = 0.D0

      IF(INCLUDPAST .EQ. 1) THEN
 9040  WRITE(*,8041) PASTFILEIN,FUTUREFILEIN
 8041  FORMAT(/' YOUR ANALYSIS INCLUDES THE "PAST" HISTORY FOR THE'/

     1' SUBJECT IN FILE ',A20,' AND THE "FUTURE" IN FILE ',A20/
     2' IT WILL BE ASSUMED THAT THE "PAST" BEGINS AT TIME = 0, AND THE'/
     3' "FUTURE" BEGINS AT TIME = TNEXT. IN OTHER WORDS, THE "FUTURE"'/
     4' FILE SHOULD START AS USUAL WITH TIME = 0, BUT ALL THE TIMES IN'/
     5' THIS FILE WILL BE INCREASED BY TNEXT HOURS, AND THEN THIS FILE'/
     6' WILL BE CONCATENATED TO THE "PAST" TO PROVIDE A COMPLETE'/
     7' DOSING/OBSERVED VALUE PROFILE OF THE SUBJECT.'//
     8' BUT NOTE THAT OPTIMUM DOSES WILL BE FOUND ONLY IN THE "FUTURE"'/
     9' TO BEST ACHIEVE THE OBSERVED VALUES IN THE "FUTURE" ... BASED'/
     1' ON THE "PAST" HISTORY. '//
     2' ENTER TNEXT, A POSTIVE NO. OF HOURS, NOW: ')
       READ(*,*,ERR=9040) TNEXT
       IF(TNEXT .LE. 0.D0) GO TO 9040
      ENDIF


        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0)  CONDITION FOR THE
C  ICSVFILE VALUE.


      WRITE(*,8174) IDELTA
8174  FORMAT(/' THE OUTPUT FILE WILL INCLUDE, FOR EACH GRID POINT IN '/
     1' THE PARAMETER DENSITY (AND THE WEIGHTED MEAN OF THESE GRID'/
     2' POINTS), SIMULATED OBSERVED VALUES, BASED ON THE OPTIMAL DOSES'/
     3' WHICH THE PROGRAM CALCULATES.'//
     4' THESE SIMULATED VALUES WILL BE ',I6,' MINUTES APART.')

      CALL CHANGE(ICHANG)

      IF(ICHANG .EQ. 0) THEN

 8170 WRITE(*,8172)
 8172 FORMAT(/' THE OUTPUT FILE WILL INCLUDE, FOR EACH GRID POINT IN '/
     1' THE PARAMETER DENSITY (AND THE WEIGHTED MEAN OF THESE GRID'/
     2' POINTS), SIMULATED OBSERVED VALUES, BASED ON THE OPTIMAL DOSES'/
     3' WHICH THE PROGRAM CALCULATES.'//
     4' ENTER 1 IF THESE VALUES SHOULD BE SIMULATED EVERY 15 MINUTES'/
     5'       0 FOR A DIFFERENT NO. OF MINUTES BETWEEN SIMULATED VALUES:
     6 ')
      READ(*,*,ERR=8170) IDELTA
      IF(IDELTA .NE. 1 .AND. IDELTA .NE. 0) GO TO 8170

      IF(IDELTA .EQ. 1) IDELTA = 15


      IF(IDELTA .EQ. 0) THEN
       WRITE(*,8173)
 8173  FORMAT(/' ENTER THE NO. OF MINUTES BETWEEN SIMULATED VALUES: ')
       READ(*,*,ERR=8170) IDELTA
       IF(IDELTA .LE. 0) GO TO 8170
      ENDIF

      ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0) CONDITION.



        IF(NOFIX .GT. 0) THEN 

         WRITE(*,7) NOFIX

    7    FORMAT(/' THE VALUES FOR THE ',I2,' FIXED PARAMETERS ARE: ')
          DO I = 1,NOFIX
           WRITE(*,8) PARFIX(I),VALFIX(I)

    8      FORMAT(' ',A11,':  ',G14.7)
          END DO

         CALL CHANGE(ICHANG)

         IF(ICHANG .EQ. 0) THEN
          WRITE(*,4836) 
 4836     FORMAT(/' ENTER THE VALUE FOR EACH FIXED PARAMETER: ')
           DO I = 1,NOFIX
 4845       WRITE(*,34) PARFIX(I)
   34       FORMAT(/' ',A11,' : ')
            READ(*,*,ERR=4845) VALFIX(I)

           END DO

         ENDIF

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(NOFIX .GT. 0)  CONDITION.


        WRITE(*,9) TOLER

    9   FORMAT(/' THE TOLERANCES FOR THE O.D.E. SOLVER ARE SET EQUAL'/
     1' TO ',G14.7)

        CALL CHANGE(ICHANG)

        IF(ICHANG .EQ. 0) THEN

  915   WRITE(*,913)
  913   FORMAT(/' ENTER 1 TO SET ALL TOLERANCES (FOR THE O.D.E. '/
     1'         SOLVER) TO THE DEFAULT VALUE ... 1.D-4.'/
     2' ENTER 0 TO SELECT A DIFFERENT VALUE FOR THE TOLERANCES: ')
	READ(*,*,ERR=915) ITOL
	IF(ITOL .NE. 0 .AND. ITOL .NE. 1) GO TO 915

	TOLER = 1.D-4



	IF(ITOL .EQ. 0) THEN

  910	WRITE(*,914) 

  914  FORMAT(/' ENTER A POSITIVE VALUE FOR THE TOLERANCE PARAMETERS: ')
	READ(*,*,ERR=910) TOLER
	IF(TOLER .LE. 0.D0) GO TO 910


	ENDIF

C	RTOL = TOLER <-- RTOL NOT USED IN THIS ROUTINE.
	DO I=1,NDIM
	 ATOL(I) = TOLER
	END DO


        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0)  FOR TOLER.


         WRITE(*,2112) NPAGDENFILE
 2112    FORMAT(/' IN THE NPAG RUN YOU DID WHICH PRODUCED THE DENSITY'/
     1' FILE, ',A20,' YOU MODELED THE ASSAY ERROR FUNCTION, S.D., AS'/
     2' FOLLOWS (ASSUMING SD1 = C0+C1*Y+C2*Y**2+C3*Y**3):')
         IF(IERRMOD .EQ. 1) WRITE(*,2113)
         IF(IERRMOD .EQ. 2) WRITE(*,2114) GAMLAM
         IF(IERRMOD .EQ. 3) WRITE(*,2116) GAMLAM
     	   IF(IERRMOD .EQ. 4) WRITE(*,2117) GAMLAM
 2113    FORMAT(/' S.D. = SD1')
 2114    FORMAT(/' S.D. = GAMMA*SD1, WITH GAMMA TO BE ESTIMATED, AND'/
     1'                  THE FINAL GAMMA ESTIMATE WAS ',G16.10)
 2116    FORMAT(/' S.D. = SQRT(SD1**2 + LAMBDA**2), WITH LAMBDA TO BE ES
     1TIMATED'/
     2'                  AND THE FINAL LAMBDA ESTIMATE WAS ',G16.10)
 2117    FORMAT(/' S.D. = GAMMA, WITH GAMMA TO BE ESTIMATED, AND'/
     1'                  THE FINAL GAMMA ESTIMATE WAS ',G16.10)

         CALL CHANGE(ICHANG)

         IF(ICHANG .EQ. 0) THEN


          CALL SYSTEM('CLS')

 1110     WRITE(*,118) NPAGDENFILE
  118   FORMAT(//' SELECT HOW YOU MODELED THE ASSAY ERROR FUNCTION IN '/
     1' THE NPAG RUN YOU DID WHICH PRODUCED THE DENSITY FILE, ',A20//
     1' RECALL THAT SD1 = C0+C1*Y+C2*Y**2+C3*Y**3; THEN ...'//
     2' ENTER 1 IF S.D. = SD1;'/
     3' ENTER 2 IF S.D. = GAMMA*SD1, WITH GAMMA TO BE ESTIMATED;'/
     4' ENTER 3 IF S.D. = SQRT(SD1**2 + LAMBDA**2), WITH LAMBDA TO BE ES
     5TIMATED;'/
     6' ENTER 4 IF S.D. = GAMMA, WITH GAMMA TO BE ESTIMATED: ')
          READ(*,*,ERR=1110) IERRMOD
          IF(IERRMOD .LT. 1 .OR. IERRMOD .GT. 4) GO TO 1110

          IF(IERRMOD .GE. 2) THEN
           ESTNAM = ' GAMMA'


           IF(IERRMOD .EQ. 3) ESTNAM = 'LAMBDA'

  225      WRITE(*,223) ESTNAM
  223     FORMAT(/' ENTER THE FINAL ESTIMATE FOR ',A6,' IN THE NPAG RUN:
     1 ')
           READ(*,*,ERR=225) GAMLAM
           IF(GAMLAM .LE. 0.D0) THEN
            WRITE(*,1223)
 1223       FORMAT(/' THIS VALUE MUST BE POSITIVE. '/)
            GO TO 225
           ENDIF
          ENDIF

         ENDIF 

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0) FOR IERRMOD/GAMLAM


	WRITE(*,12) NUMEQT
   12   FORMAT(/' NOTE THAT THE GENERAL VALUES FOR [C0,C1,C2,C3] '/
     1' FOR EACH OF THE ',I2,' OUTPUT EQUATION(S), ARE SHOWN BELOW: '/)

	DO IEQ = 1,NUMEQT
	 WRITE(*,162) IEQ,C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)
	 IAS = IASS(IEQ)
	 IF(IAS .EQ. 1) WRITE(*,419)
	 IF(IAS .EQ. 0) WRITE(*,519)

	END DO

  162   FORMAT(' EQ. ',I2,': ',4(G16.10,1X))

  419   FORMAT(/' THE PATIENT DATA FILE FOR THIS RUN WILL BE ASSIGNED'/
     1' THE ASSAY COEFFICIENTS IN ITS DATA FILE; IF THERE ARE NO'/

     2' COEFFICIENTS IN THE DATA FILE, THE PATIENT WILL BE ASSIGNED'/
     3' THE ABOVE GENERAL VALUES.'/)

  519   FORMAT(/' THE PATIENT DATA FILE FOR THIS RUN WILL BE ASSIGNED'/

     1' THE ABOVE GENERAL ASSAY COEFFICIENTS (I.E., INDIVIDUAL ASSAY'/

     2' COEFFICIENTS ALREADY IN THE PATIENT DATA FILE WILL BE'/
     3' OVERWRITTEN BY THE ABOVE VALUES.)'/)

        CALL CHANGE(ICHANG)

        IF(ICHANG .EQ. 0) THEN

      CALL SYSTEM('CLS')

      WRITE(*,119) 
  119 FORMAT(//' FOR EACH OUTPUT EQUATION(S), SELECT ONE OF THE FOLLOWIN
     1G'/

     5' OPTIONS FOR THE ASSAY COEFFICIENTS [C0,C1,C2,C3]: '//
     4' ENTER 1 FOR THE DEFAULT OPTION ...'/
     5'         IF THE PATIENT DATA FILE ALREADY INCLUDES '/
     6'         ASSAY COEFFICIENTS, THOSE COEFFICIENTS WILL BE USED. '/
     7'         OTHERWISE THE COEFFICIENTS YOU ENTER BELOW WILL BE '/
     8'         USED;'/
     7' ENTER 0 IF YOU WOULD LIKE THE ASSAY COEFFICIENTS TO BE THOSE'/
     1'         YOU ENTER BELOW (WHETHER OR NOT YOUR PATIENT FILE HAS'/
     2'         ASSAY COEFFICIENTS ALREADY: ')

	CALL PAUSE

C  FOR EACH OUTPUT, INPUT IASS AND [C0P,...,C3P]. 

	DO 2200 IEQ = 1,NUMEQT


 1120   WRITE(*,221) IEQ
  221   FORMAT(/' FOR OUTPUT EQUATION ',I1,':'//
     4' ENTER 1 FOR THE DEFAULT OPTION;'//
     7' ENTER 0 TO BE PROMPTED FOR ASSAY COEFFICIENTS: ')
	READ(*,*,ERR=1120) IAS

	IF(IAS .NE. 0 .AND. IAS .NE. 1) GO TO 1120	  
	IASS(IEQ) = IAS


	WRITE(*,1119) IEQ
 1119   FORMAT(/' ENTER THE GENERAL VALUES FOR [C0,C1,C2,C3] FOR '/
     1' OUTPUT EQUATION ',I1,'. THESE ')
	IF(IAS .EQ. 1) WRITE(*,1121)
	IF(IAS .EQ. 0) WRITE(*,1123)

 1121   FORMAT(' WILL BE USED IF YOUR PATIENT DATA FILE DOES NOT'/
     1' ALREADY INCLUDE ASSAY COEFFICIENTS: ')
 1123   FORMAT(' WILL BE USED EVEN IF YOUR PATIENT DATA FILE ALREADY'/
     1' INCLUDES ASSAY COEFFICIENTS: ')
 4140   READ(*,*,ERR=4145) C0P(IEQ),C1P(IEQ),C2P(IEQ),C3P(IEQ)

   	GO TO 2200
 4145   WRITE(*,4146)
 4146   FORMAT(/' SEE ABOVE; PLEASE ENTER FOUR REAL NUMBERS: ')
	GO TO 4140

 2200   CONTINUE


 	WRITE(*,2119)
 2119   FORMAT(//' NOTE: DURING THIS PROGRAM, THE PATIENT DATA FILE'/
     1'      WILL HAVE ITS COEFFICIENTS WRITTEN TO THE END OF THE '/
     2'      WORKING COPY FILE. IF COEFFICIENTS ARE ALREADY THERE'/
     3'      FROM A PREVIOUS RUN, THEY WILL BE OVERWRITTEN.'//)
	CALL PAUSE

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ICHANG .EQ. 0) CONDITION FOR THE
C  ASSAY COEFFICIENTS.

4150   WRITE(*,112) NDRUG
  112   FORMAT(/' THE ACTIVE (SALT) FRACTION OF EACH OF THE ',I1,' DRUG(
     1S) FOLLOWS.')
        
        DO I = 1,NDRUG
         WRITE(*,113) I,AF(I)
  113    FORMAT(' AF FOR DRUG ',I1,' IS ',G12.6)
        END DO


	CALL CHANGE(ICHANG)
	IF(ICHANG .EQ. 0) THEN


5150   WRITE(*,129)
  129   FORMAT(//' ENTER THE ACTIVE (SALT) FRACTION OF EACH DRUG. AS '/
     1' AN EXAMPLE, THE A.F. OF THEOPHYLLINE IS 1.0, WHILE THAT OF'/
     2' AMINOPHYLLINE IS TYPICALLY BETWEEN .79 AND .85, DEPENDING ON'/
     3' THE PREPARATION. '//
     4' EACH AF MUST BE A POSITIVE NUMBER LESS THAN OR EQUAL TO 1.0.'/)
       
        DO I = 1,NDRUG
         WRITE(*,1129) I
 1129    FORMAT(' AF FOR DRUG ',I1,': ')
         READ(*,*,ERR=5150) AF(I)
         IF(AF(I) .LE. 0.0 .OR. AF(I) .GT. 1.0) GO TO 5150
        END DO

	ENDIF

       IF(IOPTIMIZE .EQ. 1) WRITE(*,2129)
 2129  FORMAT(/' THE DOSES SHOWN IN THE "FUTURE" FILE WILL BE THE'/
     1' INITIAL GUESSES USED TO FIND THE OPTIMUM DOSES TO HIT THE'/
     2' TARGET CONCENTRATIONS IN THE "FUTURE" FILE. ALL SUBSEQUENT'/
     3' CALCULATIONS WILL BE BASED ON THE OPTIMUM DOSES.')

       IF(IOPTIMIZE .EQ. 0) WRITE(*,2131)
 2131  FORMAT(/' THE DOSES SHOWS IN THE "FUTURE" FILE WILL BE THOSE'/
     1' USED FOR ALL SUBSEQUENT CALCULATIONS (I.E.,NO OPTIMIZATION OF'/
     2' DOSES WILL BE DONE).') 
 
      CALL CHANGE(ICHANG)
      IF(ICHANG .EQ. 0) THEN

 3130   WRITE(*,3129)
 3129   FORMAT(/' ENTER 1 IF YOU WANT TO FIND THE OPTIMUM DOSES TO HIT'/
     1'         THE TARGET CONCENTRATIONS IN THE "FUTURE" FILE.'/
     4' ENTER 0 IF, INSTEAD, YOU WANT THE OUTPUT FILE TO SHOW '/
     5'         PREDICTED CONCENTRATIONS AND AUCs FOR THE DOSES IN '/
     6'         THE "FUTURE" FILE (I.E., NO OPTIMIZATION WILL BE DONE'/
     7'         IN THIS CASE): ')
        READ(*,*,ERR=3130) IOPTIMIZE
        IF(IOPTIMIZE .NE. 1 .AND. IOPTIMIZE .NE. 0) GO TO 3130
    
      ENDIF


C  IF IOPTIMIZE = 0, NO OPTIMIZATION IS TO BE DONE, WHICH RENDERS THE
C  QUESTION ABOUT BIASWEIGHT BELOW MOOT. IN THIS CASE, SIMPLY SET
C  BIASWEIGHT = 0.

C  BUT IF IOPTIMIZE = 1, THEN REPORT THE CURRENT VALUE OF BIASWEIGHT AND
C  SEE IF THE USER WANTS TO CHANGE IT (I.E., ASK THE THE USER ABOUT 
C  HOW THE COST FUNCTION (WHICH ESTABLISHES THE BEST DOSES) SHOULD BE
C  CALCULATED).



      IF(IOPTIMIZE .EQ. 0) THEN
       BIASWEIGHT = 0.D0
      ENDIF

      IF(IOPTIMIZE .EQ. 1) THEN

       WRITE(*,3151) BIASWEIGHT
 3151  FORMAT(/' THE COST FUNCTION TO BE MINIMIZED IN FINDING THE'/
     1' "BEST" DOSES IS (1 - BIASWEIGHT)*V(U) + BIASWEIGHT*B(U), WHERE'/
     2' V(U) IS THE MEAN SQUARED ERROR ASSOCIATED WITH ALL THE '/
     3' GRID PTS. IN THE PARAMETER DENSITY; AND B(U) IS THE MEAN '/
     4' SQUARED ERROR DUE TO BIAS ABOUT THE MEAN RESPONSE.'//
     5' THE VALUE OF BIASWEIGHT IS ',G12.6)


       CALL CHANGE(ICHANG)
       IF(ICHANG .EQ. 0) THEN

 3140   WRITE(*,3139)
 3139   FORMAT(/' ENTER THE VALUE FOR BIASWEIGHT BETWEEN 0 AND 1, INCLUS
     1IVE:')
        READ(*,*,ERR=3140) BIASWEIGHT
        IF(BIASWEIGHT .LT. 0.D0 .OR. BIASWEIGHT .GT. 1.D0) GO TO 3140
       ENDIF
  

      ENDIF
C  THE ABOVE ENDIF IS FOR THE  IF(IOPTIMIZE .EQ. 1)  CONDITION.


       IF(ITARGET .EQ. 1) WRITE(*,3252)
 3252  FORMAT(/' THE OBSERVED VALUES IN THE FUTURE PATIENT FILE ARE'/
     1' TARGET CONCENTRATIONS.')
       IF(ITARGET .EQ. 2) WRITE(*,3253)
 3253  FORMAT(/' THE OBSERVED VALUES IN THE FUTURE PATIENT FILE ARE'/
     1' TARGET AUCs.')
 
       CALL CHANGE(ICHANG)
       IF(ICHANG .EQ. 0) THEN

 3150  WRITE(*,3149)
 3149  FORMAT(/' ENTER 1 IF THE OBSERVED VALUES IN THE FUTURE PATIENT'/
     1'         FILE ARE TARGET CONCENTRATIONS; '/
     2' ENTER 2 IF THE OBSERVED VALUES ARE TARGET AUCs: ')
       READ(*,*,ERR=3150) ITARGET
       IF(ITARGET .NE. 1 .AND. ITARGET .NE. 2) GO TO 3150

       ENDIF



 7005   WRITE(*,7001)
 7001   FORMAT(///' ENTER 1 IF ALL INSTRUCTIONS ARE NOW CORRECT;'/
     2' ENTER 0 OTHERWISE: ') 
        READ(*,*,ERR=7005) ICHANG
        IF(ICHANG .NE. 0 .AND. ICHANG .NE. 1) GO TO 7005
        IF(ICHANG .EQ. 0) GO TO 8040


	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE CHANGE(ICHANG)
C
C  THIS SUBROUTINE IS CALLED BY SUBROUTINE VERIF1 TO HAVE THE USER CHECK
C  WHETHER HIS INPUT INFO IS CORRECT OR NEEDS TO BE CHANGED.
C
C  INPUT: NOTHING
C
C  OUTPUT:
C
C  ICHANG = 1 IF INFO PRINTED PREVIOUSLY TO THE SCREEN IS CORRECT.
C         = 0 IF INFO PRINTED PREVIOUSLY TO THE SCREEN SHOULD BE 
C             CHANGED.
C
   10   WRITE(*,1)
    1   FORMAT(//' ENTER 1 IF THE ABOVE INFORMATION IS CORRECT;'/
     1' ENTER 0 IF IT SHOULD BE CHANGED: ') 
	READ(*,*,ERR=10) ICHANG
	IF(ICHANG .NE. 0 .AND. ICHANG .NE. 1) GO TO 10
	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	
        SUBROUTINE READBLOCK2(PATH,C0,C1,C2,C3,IWHICH,IGUI)
	  IMPLICIT REAL*8(A-H,O-Z)

        PARAMETER(MAXNUMEQ=7)

C  THIS ROUTINE IS BASED ON SUBROUTINE READBLOCK IN NPBG15E1.FOR, BUT
C  INSTEAD OF CREATING A WORKING COPY PATIENT DATA FILE FOR EACH BLOCK
C  OF DATA IN THE .CSV FILE ALREADY OPENED AS FILE 66 IN MAIN, IT ONLY
C  CREATES ONE MULTIPLE DRUG WORKING COPY PATIENT DATA FILE, 
C  'XQZPJ001.PST' IF IWHICH = 1, AND 'XQZPJ001.FUT' IF IWHICH = 2, 

C  FROM THE FIRST SUBJECT'S DATA. SO MAXSUB WILL BE 
C  HARDCODED = 1 BELOW, AND ALL DIMENSIONS WHICH WERE MAXSUB IN
C  NPBG15E1.FOR/READBLOCK WILL NOW BE 1.



      DIMENSION TIMOUT(1,MAXNUMEQ,650),TIMIV(1,7,5200),
     1 NTIMOUT(1,MAXNUMEQ),NTIMIV(1,7),RATEIV(1,7,5200),BOLUS(1,7,5200),
     2 OUT(1,MAXNUMEQ,650),COV(1,26,5200),ICOVTYPE(26),
     5 TIMBOL(1,7,5200),NTIMBOL(1,7),NTIMCOV(1,26),
     6 TIMCOV(1,26,5200),TIMALL(1,72000),NTIMALL(1),
     7 TIMI(72000),C0(MAXNUMEQ),C1(MAXNUMEQ),C2(MAXNUMEQ),
     8 C3(MAXNUMEQ),CSUB(1,4,MAXNUMEQ),NSST(1),DOSELINEST(1,99,100)

        CHARACTER READLINE*1000,COVNAME(26)*11,NUMBER(1)*3,
     1   PATFIL*20,CHARSUB*3,SUBID*11,SUBIDPREV*11,SUBARRAY(1)*11,
     3   PATH*60,TMPFILE*13,PATHFILE*73,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


    1   FORMAT(A1000)

C  SET MAXSUB = 1 SINCE ONLY 1 SUBJECT WILL BE CREATED BY THIS ROUTINE.

        MAXSUB = 1


C  INITIALIZE NDRUG (THE NO. OF DRUGS IN THE PATIENT DATA SET) TO BE
C  0. EVERY TIME IDRUGNO IS READ BELOW, NDRUG WILL BE SET = 
C  MAX(NDRUG,IDRUGNO).

C  SIMILARLY, INITIALIZE NOUT (THE NO. OF OUTPUT EQUATIONS IN THE
C  PATIENT DATA SET) TO BE 0. EVERY TIME IOUTEQ IS READ BELOW, 
C  NOUT WILL BE SET = MAX(NOUT,IOUTEQ).

	NDRUG = 0
	NOUT = 0

C  INITIALIZE NSST(.) TO 0. IT GIVES THE NO. OF STEADY STATE DOSE
C  LINES THAT WILL BE WRITTEN TO THE DOSAGE BLOCK FOR THE SUBJECT. 

      DO ISUB = 1,MAXSUB
       NSST(ISUB) = 0
      END DO


C  NOTE THAT ANY LINE STARTING WITH A # WILL BE IGNORED. THE FIRST LINE
C  WILL ALSO BE IGNORED - IT HAS ALREADY BEEN VERIFIED TO HAVE THE
C  REQUIRED CODE IN IT.


	READ(66,*)

C  READ THE 2ND LINE, WHICH MUST HAVE A # AS THE FIRST CHARACTER. IT HAS
C  THE NAMES OF THE COLUMNS. COUNT THE NO. OF COMMAS ON THE LINE. THE 
C  NO. OF COVARIATES WILL BE THE NO. OF COMMAS - 11 (SINCE THERE ARE 12
C  FIXED ENTRIES WHICH POTENTIALLY SHOW UP ON EACH LINE: PATIENT ID, 
C  EVENT ID, TIME, INFUSION DURATION, TOTAL DOSE, INPUT DRUG NO.,
C  OUTPUT VALUE, OUTPUT EQ., AND 4 SPOTS FOR ASSAY COEFFICIENTS WHICH 
C  ONLY SHOW UP ON OUTPUT LINES). NOTE THAT THIS VALUE WILL BE CALLED
C  NCOVA, WHICH MEANS NO. OF ADDITION COVARIATES (IN ADDITION TO THE 4
C  PERMANENT ONES AT THE TOP OF EACH PATIENT'S WORKING COPY FILE (AGE,
C  SEX, HEIGHT, ETHNICITY FLAG), ... TO BE CONSISTENT WITH THE NAME 
C  USED IN NPAG100.FOR.

	  READ(66,1) READLINE

	NCOMMA = 0

	DO ISTART = 1,1000

	 IF(READLINE(ISTART:ISTART) .EQ. ',') THEN
	  NCOMMA = NCOMMA + 1
	 ENDIF

	END DO	    

	NCOVA = NCOMMA - 11

	IF(NCOVA .GT. 0) THEN

C  READ THE NAMES OF THE NCOVA COVARIATES FROM THE LINE STARTING WITH
C  #ID OR "#ID. 

C  NOTE THAT AFTERCOMMA OPENS AND PUTS INTO FILE 57 THE PART OF READLINE

C  WHICH IS BETWEEN COMMA C AND COMMA C+1, WHERE C IS THE 3RD ARGUMENT.
C  ALSO,NOTE THAT NCOVA MUST BE PROVIDED TO AFTERCOMMA SO IT WILL KNOW
C  THE TOTAL NO. OF COMMAS IN READLINE (WHICH = 11 + NCOVA).


	REWIND(66)
  120	READ(66,1) READLINE
	IF(READLINE(1:3) .NE. '#ID' .AND. READLINE(1:4).NE. '"#ID' 

     1  .AND. READLINE(1:3) .NE. '#id' .AND. READLINE(1:4).NE. '"#id')
     2   GO TO 120


	 DO ICOV = 1,NCOVA
	  CALL AFTERCOMMA(NCOVA,READLINE,11+ICOV)
	  BACKSPACE(57)
	  READ(57,2) COVNAME(ICOV)
    2     FORMAT(A11)
	  CLOSE(57)
	 END DO


	ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(NCOVA .GT. 0)  CONDITION.



C  CALL SUBROUTINE GETMAXTIM TO GET THE MAXIMUM TIME OVER ALL THE
C  SUBJECTS IN FILE 66. THIS INCLUDES THE ENDING TIME OVER ALL IV
C  EVENTS. THEN SET TIMADD = THIS TIME + 1. FOR EACH SUBJECT BELOW,
C  EACH TIME WILL HAVE TIMADD*NRESET ADDED TO IT, WHERE NRESET IS THE 
C  NO. OF TIME RESETS (FOR THAT SUBJECT) UP TO AND INCLUDING THAT TIME. 
C  THIS WILL MAKE EACH TIME A UNIQUE TIME (I.E., WITH TIME RESETS IN
C  THE BLOCK FORMAT FILE, THERE COULD BE MANY TIMES WITH THE SAME 
C  VALUE).


	CALL GETMAXTIM(NCOVA,TIMAX)

C  VERIFY THAT TIMAX WAS CALCULATED CORRECTLY - I.E., THAT IT IS NOT
C  STILL THE INITIALIZED NEGATIVE VALUE IN GETMAXTIM.

	IF(TIMAX .LT. 0) THEN




	 WRITE(*,11) 
   11    FORMAT(/' THERE IS SOMETHING WRONG WITH YOUR BLOCK FORMAT'/
     1' FILE. THE TIMES IN COLUMN 3 AND/OR THE TIME DURATIONS'/
     2' IN COLUMN 4 ARE BAD. PLEASE CHECK YOUR VALUES. '//
     3' THE PROGRAM STOPS.')


        OPEN(47,FILE=ERRFIL)
         WRITE(47,11)                                 
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF


   	TIMADD = TIMAX + 1.D0


C  REWIND FILE 66, READ PAST THE FIRST LINE WHICH HAS THE CODE, AND 
C  THE SECOND LINE, WHICH HAS THE COVARIATE INFORMATION ON IT, AND
C  THEN READ ALL LINES, EXCEPT THOSE THAT START WITH # OR "#.
C  GO THROUGH EACH SUCCEEDING LINE IN FILE 66 AND EXTRACT ALL THE 
C  INFORMATION. NOTE THAT EACH LINE CAN CONTAIN OUTPUT INFO OR DOSAGE
C  INFO (INCLUDING COVARIATE VALUES), DEPENDING ON THE VALUE FOR IDEVENT
C  (THE 2ND ENTRY IN EACH LINE), BUT NOT BOTH. IN PARTICULAR, IF
C  IDEVENT = 0 --> THE ROW HAS OUTPUT EQUATION INFO.
C  IDEVENT = 1 --> THE ROW HAS DOSAGE/COVARIATE INFO.
C  IDEVENT = 4 --> SAME AS IDEVENT = 1, EXCEPT THIS ROW REPRESENTS A 
C                  TIME RESET.

	REWIND(66)
	READ(66,1)
	READ(66,1)

C  INITIALIZE SUBIDPREV (THE PREVIOUS SUBJECT ID) TO BE '%^&*' SO THE 

C  FIRST SUJBECT ID READ IN BELOW WILL BE DIFFERENT THAN THIS, AND SO 
C  START THE SUBJECT ID LOGIC. ALSO, INITIALIZE THE SUBJECT NO. TO 0.

	SUBIDPREV = '%^&*'
	NSUB = 0

C  NOTE THAT IEND .LT. 0 --> END OF FILE REACHED.	

   10	READ(66,1,IOSTAT=IEND) READLINE
	IF(IEND .LT. 0) GO TO 100
	IF(READLINE(1:1) .EQ. '#' .OR. READLINE(1:2) .EQ. '"#') GO TO 10

C  THE FIRST VALUE (I.E., AFTER COMMA NO. 0) IS THE SUBJECT ID.

	CALL AFTERCOMMA(NCOVA,READLINE,0)
	BACKSPACE(57)
	READ(57,2) SUBID
	CLOSE(57)


C  NOTE THAT SUBID CONTAINS THE 1ST 11 CHARACTERS OF THE LINE, BUT THE
C  SUBJECT ID IS JUST THE SET OF CHARACTERS PRIOR TO THE 1ST COMMA.
C  CALL SUBROUTINE GETID TO CORRECT THE VALUE OF SUBID.

	CALL GETID(SUBID)

C  IF SUBID = SUBIDPREV, THIS IS ANOTHER LINE FOR THE CURRENT SUBJECT. 
C  IF SUBID .NE. SUBIDPREV, THIS IS THE 1ST EVENT FOR A NEW SUBJECT, SO 
C  INCREASE NSUB, AND SET THE NO. OF INFUSIONS (FOR EACH DRUG), BOLI, 
C  OBSERVATION, AND COVARIATE TIMES FOR THIS SUBJECT TO 0 (THEY WILL 
C  BE UPDATED BELOW AS REQUIRED). SIMILARY SET THE TOTAL NO. OF DOSE 
C  EVENTS = 0. 

C  ALSO, SINCE THIS IS A NEW SUBJECT, DEFAULT THE ASSAY COEFFICIENTS FOR
C  OUTPUT EQ. IEQ TO [C0(IEQ),C1(IEQ),C2(IEQ),C3(IEQ)], 
C  IEQ = 1,MAXNUMEQ (MAXNUMEQ IS THE MAXIMUM THAT NUMEQT CAN BE). THEN,
C  AS THIS SUBJECT'S INFO IS BEING READ BELOW, ANY ASSAY C'S SPECIFIED
C  FOR THIS SUBJECT WILL OVERWRITE THE DEFAULT VALUES. AND NOTE THAT IF
C  A SUBJECT HAS MORE THAN ONE SET OF ASSAY C'S FOR A GIVEN OUTPUT EQ.,
C  THE LAST SET WILL BE USED.

C  NOTE THAT AFTER READBLOCK2 HAS FINISHED READING THE PATIENT INFO,
C  CSUB(I,J,K), J=1,4 WILL BE ASSAY C'S [C0 C1 C2 C3] FOR SUBJECT I
C  AND OUTPUT EQ. K. 
 

	IF(SUBID .NE. SUBIDPREV) THEN

	 SUBIDPREV = SUBID

	 NSUB = NSUB + 1

C  FASTFORWARD THE LOGIC TO THE END OF THE ROUTINE IF NSUB = 2, SINCE
C  THE INFO FOR THE FIRST SUBJECT WILL ALREADY HAVE BEEN READ IN. AND 
C  RESET NSUB = 1 AT THAT POINT SINCE ONLY THE FIRST SUBJECT'S DATA WILL
C  BE NEEDED.

        IF(NSUB .EQ. 2) GO TO 100


	 SUBARRAY(NSUB) = SUBID

	 NTIMALL(NSUB) = 0

	 DO K = 1,7
	  NTIMIV(NSUB,K) = 0
	  NTIMBOL(NSUB,K) = 0
	 END DO

	 DO K = 1,26
	  NTIMCOV(NSUB,K) = 0
	 END DO

        DO K = 1,MAXNUMEQ
         NTIMOUT(NSUB,K) = 0
         CSUB(NSUB,1,K) = C0(K)
         CSUB(NSUB,2,K) = C1(K)
         CSUB(NSUB,3,K) = C2(K)
         CSUB(NSUB,4,K) = C3(K)
        END DO


C  SEE LOGIC BELOW. IF THIS ROW REPRESENTS A TIME RESET, THEN AN
C  EXTRA VALUE (-99) AT AN EXTRA TIME (0) WILL BE ADDED TO EACH OUTPUT
C  EQUATION ARRAY. BUT THIS NEEDS TO BE DONE JUST ONCE FOR EACH TIME
C  RESET, NOT FOR EACH DOSAGE LINE THAT HAS A RESET. I.E., IF THERE
C  ARE 5 DRUGS, THEN THERE COULD BE AS MANY AS 5 DOSE LINES WITH A
C  RESET VALUE. ALSO, WITHIN EACH LINE, A DOSE AND/OR A COVARIATE

C  COULD HAVE A RESET TIME OF 0. THEREFORE EACH BLOCK OF CODE BELOW,
C  FOR EACH DRUG NO. AND EACH COVARIATE, IS TESTED FOR A TIME RESET,
C  AND IN EACH CASE, EXTRA LINES ARE POTENTIALLY ADDED TO THE OUPUT 
C  ARRAYS. TO PREVENT MORE EXTRA LINES (OF OUTPUT VALUES = -99 AT
C  TIMES = 0) THAN ARE NECESSARY, INITIALIZE NRESETADD = 0. THIS 
C  TELLS THE PROGRAM THAT NO EXTRA LINES HAVE BEEN ADDED TO THE OUTPUT
C  ARRAYS SINCE THE LAST ACTUAL OUTPUT VALUE WAS PUT INTO ONE OF THE
C  ARRAYS. NRESETADD WILL BE CHANGED TO 1 WHENEVER EXTRA LINES HAVE
C  BEEN ADDED TO THE OUTPUT ARRAYS, AND THEN BACK TO 0 WHENEVER ANOTHER
C  ACTUAL OUTPUT VALUE HAS BEEN PUT INTO AN ARRAY.

	NRESETADD = 0

C  INITIALIZE NRESET TO 0. IT WILL BE THE NO. OF TIME RESETS THAT
C  HAVE OCCURRED UP TO ANY TIME. ALSO INITIALIZE TIMERESET = 0; THIS 
C  WILL BE THE RUNNING TIME TO BE ADDED TO EACH ACTUAL TIME. IT WILL
C  ALWAYS BE SET = TIMADD*NRESET BELOW.


	NRESET = 0	
	TIMERESET = TIMADD*NRESET

C  ALSO INITIALIZE NRESETLAST = -1 (SEE CODE BELOW).

       NRESETLAST = -1
       DOSELINEST(NSUB,1,100) = -99

C  DOSELINE(NSUB,1,100) IS INITIALIZED TO BE -99. IF IT CHANGES BELOW
C  TO BE .GE. 0, IT MEANS THAT THERE IS AT LEAST ONE STEADY STATE DOSE
C  SET, AND THE FIRST ONE OCCURS AT THE VALUE OF NRESET =
C  DOSELINEST(NSUB,1,100).


C  VERIFY THAT THE 2ND VALUE (I.E., AFTER COMMA NO. 1), WHICH IS THE 
C  EVENT ID, IDEVENT, IS 1 SINCE THE FIRST EVENT FOR EACH SUBJECT
C  SHOULD BE 1 (A NON-TIME-RESET DOSE EVENT).

	CALL AFTERCOMMA(NCOVA,READLINE,1)
	BACKSPACE(57)
	READ(57,*) IDEVENT
	CLOSE(57)

	IF(IDEVENT .NE. 1) THEN



	 WRITE(*,402) SUBARRAY(NSUB),IDEVENT
  402    FORMAT(/' THERE IS AN ERROR IN THE BLOCK FORMAT. FOR SUBJECT '/
     1 1X,A11,', THE FIRST EVENT ID IS NOT 1 AS REQUIRED. IT IS ',I3/
     3' THE PROGRAM STOPS.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,402) SUBARRAY(NSUB),IDEVENT                                
        CLOSE(47)




	 CALL PAUSE
	 STOP



	ENDIF


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(SUBID .NE. SUBIDPREV)  CONDITION.


C  THE 2ND VALUE (I.E., AFTER COMMA NO. 1) IS THE EVENT ID, IDEVENT 
C  (SEE ABOVE).               
	
	CALL AFTERCOMMA(NCOVA,READLINE,1)
	BACKSPACE(57)
	READ(57,*) IDEVENT
	CLOSE(57)

C  IF THE ID OF THIS EVENT IS NO. 4, IT IS A TIME RESET EVENT. IN THIS
C  CASE, INCREASE NRESET AND TIMERESET AS INDICATED ABOVE.


	IF(IDEVENT .EQ. 4) THEN

C  AS OF BESTDOS119.FOR, STOP THE PROGRAM IF THE PATIENT DATA FILE
C  HAS AN IDEVENT OF 4.

       WRITE(*,502)
  502  FORMAT(/' YOUR PATIENT DATA FILE HAS AN EVENT OF 4, WHICH '/
     1' INDICATES A DOSE RESET. DOSE RESETS ARE NOT ALLOWED. THE '/
     2' PROGRAM STOPS. '/)
    
        OPEN(47,FILE=ERRFIL)
         WRITE(47,502) 
        CLOSE(47)

	 CALL PAUSE
	 STOP

	 NRESET = NRESET + 1
	 TIMERESET = TIMADD*NRESET
	ENDIF


C  THE 3RD VALUE (I.E., AFTER COMMA NO. 2) IS THE TIME OF THE EVENT.
C  READ THIS VALUE NOW.
	

	CALL AFTERCOMMA(NCOVA,READLINE,2)
	BACKSPACE(57)
	READ(57,*) TIMEVENT
	CLOSE(57)


      IF(TIMEVENT .LT. 0.D0) THEN


C  STORE INTO DOSELINEST(.,.,.) ALL THE INFO FOR THE WORKING COPY FILE
C  FOR THIS STEADY STATE DOSE SET.


C  COMPARE NRESET WITH THE PREVIOUS VALUE OF NRESET WHEN THIS PART OF

C  THE CODE WAS USED: IF THEY ARE THE SAME, THIS LINE WILL PROVIDES
C  MORE INFO (FOR A DIFFERENT DRUG NO.) FOR THE SAME STEADY STATE DOSE
C  EVENT TO BE PUT INTO THE WORKING COPY FILE. IF THEY ARE DIFFERENT,
C  THIS LINE IS THE FIRST LINE OF A NEW STEADY STATE DOSE SET.


       IF(NRESET .GT. NRESETLAST) THEN

C  PUT IN NEW INFO FOR A NEW LINE (FOR A NEW STEADY STATE DOSE SET).
C  THIS LINE IS THE FIRST LINE WITH INFO ON A NEW STEADY STATE DOSE SET.
C  STORE ALL THE INFO FROM THIS LINE, INCLUDING NRESET, SO SUBROUTINE
C  WRITEDOS CAN WRITE THE INFO FOR THIS LINE SEPARATELY. NOTE THAT THIS
C  LINE WILL NOT BE A PART OF THE LOGIC BELOW WHICH STORES ALL DOSE 
C  INFO, AND THEN SORTS IT BY TIME. NOTE THAT NRESET IS STORED INTO
C  ENTRY 100 FOR THIS LINE.

        NSST(NSUB) = NSST(NSUB) + 1

        IF(NSST(NSUB) .GT. 99) THEN


        WRITE(*,172) NSUB 
 172    FORMAT(/' FOR SUBJECT NO. ',I5,' THE NO. OF STEADY STATE DOSE'/
     1' SETS IS MORE THAN 99, THE MAXIMUM ALLOWED. PLEASE RERUN THE'/
     2' PROGRAM AFTER REDUCING THE NO. OF STEADY STATE DOSE SETS TO'/
     3' NO MORE THAN 99.'//
     4' THE PROGRAM STOPS.'/) 
	  WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,172) NSUB 
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)

         CALL PAUSE
         STOP

        ENDIF


        DOSELINEST(NSUB,NSST(NSUB),100) = NRESET


C  TIMEVENT IS THE NEGATIVE OF THE INTERDOSE INTERVAL, WHICH WILL SHOW
C  UP IN THE TIME COLUMN OF THE WORKING COPY FILE.

        DOSELINEST(NSUB,NSST(NSUB),1) = TIMEVENT

C  ZERO OUT ALL THE IV AND BOLUS ENTRIES FOR ALL POSSIBLE DRUGS
C  (I.E., THERE COULD BE AS MANY AS 7 DRUGS).

        DO I = 1,7

         DOSELINEST(NSUB,NSST(NSUB),2*I) = 0.D0
         DOSELINEST(NSUB,NSST(NSUB),2*I+1) = 0.D0
        END DO


C  STORE ANY COVARIATE INFO INTO THE COVARIATE ENTRIES. NOTE IT IS NOT
C  KNOWN AT THIS POINT HOW MANY TOTAL DRUGS ARE USED IN THE MODEL SINCE
C  THE VALUE FOR NDRUG HAS NOT YET FINISHED UPDATING (IN THE CODE BELOW,
C  IT IS SET = IDRUGNO IF NDRUG .LT. IDRUGNO). SO, THE COVARIATE VALUES
C  WILL BE STORED FAR ENOUGH OUT IN THE DOSELINEST(.,.,.) ARRAY TO NOT
C  INTERFERE WITH THE ENTRIES FOR THE MAXIMUM NO. OF POSSIBLE DRUGS.
C  SINCE THERE ARE AT MOST 7 POSSIBLE DRUGS, ENTRIES 2,3,...,14,15 WILL
C  BE RESERVED FOR THESE DRUG VALUES, AND THE COVARIATE VALUES WILL
C  START WITH ENTRY NO. 20.


        IF(NCOVA .GT. 0) THEN
         
         DO 110 ICOV = 1,NCOVA
          CALL AFTERCOMMA(NCOVA,READLINE,11+ICOV)
          BACKSPACE(57)
 	    READ(57,*,ERR=95) COVVAL
	    CLOSE(57)
          DOSELINEST(NSUB,NSST(NSUB),19+ICOV) = COVVAL

          GO TO 110
   95     DOSELINEST(NSUB,NSST(NSUB),19+ICOV) = -99.D0
  110    CONTINUE

        ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(NCOVA .GT. 0)  CONDITION.


C  FOR BESTDOS103A.FOR, ADD LOGIC FOR EXTRA OBS. LINE WITH VALUES OF
C  -99'S.

C  THIS IS EITHER A TIME RESET EVENT, OR THE TOP OF THE PATIENT'S FILE.

C  IF IT IS THE TOP OF THE PATIENT'S FILE, NRESET WILL = 0. IF IT IS A 

C  TIME RESET EVENT, NRESET WILL BE > 0, AND IN THIS CASE, MUST STORE 
C  VALUES INTO THE OUPUT ARRAYS (SEE LOGIC BELOW) WHICH INDICATE THAT
C  SUBSEQUENT OUTPUT TIMES ARE BASED ON THIS TIME RESET.


       IF(NRESET .GT. 0) THEN
        DO IOUTEQ = 1,MAXNUMEQ
         NTIMOUT(NSUB,IOUTEQ) = NTIMOUT(NSUB,IOUTEQ) + 1
         TIMOUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = TIMERESET
         OUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = -99.D0
        END DO
       ENDIF


       ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(NRESET .GT. NRESETLAST)  CONDITION.


C  ESTABLISH THE DURATION, (4TH VALUE, AFTER THE 3RD COMMA), DOSE (5TH
C  VALUE, AFTER THE 4TH COMMA), AND DRUG NO. (6TH VALUE, AFTER THE 5TH
C  COMMA) FOR THIS LINE.

        CALL AFTERCOMMA(NCOVA,READLINE,3)


        BACKSPACE(57)
        READ(57,*,ERR=170) DUR

 
        CLOSE(57)

        CALL AFTERCOMMA(NCOVA,READLINE,4)
        BACKSPACE(57)
        READ(57,*,ERR=170) TOTDOS
        CLOSE(57)

        CALL AFTERCOMMA(NCOVA,READLINE,5)
        BACKSPACE(57)
        READ(57,*,ERR=170) IDRUGNO
        CLOSE(57)

C  STORE THE IV RATE INTO THE IV ENTRY FOR DRUG NO. IDRUGNO; SIMILARLY,
C  STORE THE TOTAL DOSE INTO THE BOLUS ENTRY FOR DRUG NO. IDRUGNO.
C  NOTE THAT IF DUR = 0, THIS LINE REPRESENTS A STEADY STATE OF BOLUS 
C  VALUES. IN THIS CASE, SET THE IV RATE TO 0.


        IF(DUR .LE. 0.D0) 
     1   DOSELINEST(NSUB,NSST(NSUB),2*IDRUGNO) = 0.D0
        IF(DUR .GT. 0.D0)
     1   DOSELINEST(NSUB,NSST(NSUB),2*IDRUGNO) = TOTDOS/DUR
        DOSELINEST(NSUB,NSST(NSUB),2*IDRUGNO+1) = TOTDOS



C  NOTE THAT COVARIATE VALUES ARE ONLY READ FOR THE FIRST DOSE LINE
C  IN A STEADY STATE SET (I.E., WHEN NRESET .GT. NRESETLAST). IT IS
C  POSSIBLE THAT THE USER'S .csv FILE HAS A DIFFERENT SET OF COV. VALUES
C  FOR EACH LINE (FOR A DIFFERENT DRUG) THAT IS INCLUDED IN THE 
C  CURRENT STEADY STATE DOSE SET. BUT, THIS WOULD BE A MISTAKE SINCE
C  ONLY 1 SET OF COV. VALUES CAN BE USED FOR THE STEADY STATE SET. THE
C  FIRST SET OF VALUES WILL BE USED (AND ALL OTHERS WILL BE IGNORED).
 
C  SET NRESETLAST = NRESET SO IF ANOTHER LINE OF DOSE INFO FOR THE
C  CURRENT STEADY STATE SET FOLLOWS, THE PROGRAM WILL KNOW IT IS
C  MORE INFO ON THE CURRENT SET, AND NOT NEW INFO ON THE NEXT SET.
  
       NRESETLAST = NRESET

       GO TO 10


  170  WRITE(*,171) READLINE(1:75)
  171  FORMAT(/' THERE IS AN ERROR IN YOUR BLOCK FORMAT FILE FOR '/
     1' SUBJECT NO. 1. EITHER THE DURATION, THE DOSE, OR THE '/
     2' DRUG NUMBER IS MISSING. THE 1ST 75 CHARACTERS OF THE LINE ARE:'/
     2A75//
     3' THE PROGRAM STOPS.'/)
	 WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,171) READLINE(1:75)
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



  	 CALL PAUSE
	 STOP

      ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(TIMEVENT .LT. 0.D0)  CONDITION.



	TIMEVENT = TIMEVENT + TIMERESET


C  IF IDEVENT = 0, IT MEANS THAT THIS ROW IS AN OBSERVED VALUE ROW.
C  IN THIS CASE, READ THE OBSERVED VALUE INFO.

	IF(IDEVENT .EQ. 0) THEN


C  THE 7TH ENTRY (AFTER COMMA NO. 6) IS AN OUTPUT VALUE FOR THIS TIME 
C  IF THERE IS AN ERROR, IT IS ASSUMED THAT THE PROGRAM READ A DOT,
C  WHICH WOULD BE INCONSISTENT SINCE IDEVENT = 0 (MEANING THERE SHOULD
C  BE AN OUTPUT VALUE ON THE ROW).

	CALL AFTERCOMMA(NCOVA,READLINE,6)
	BACKSPACE(57)
	READ(57,*,ERR=30) YVAL
	CLOSE(57)

C  TO GET TO THIS POINT --> YVAL CONTAINS AN OUTPUT VALUE FOR THIS
C  LINE. BEFORE THIS VALUE CAN BE STORED, MUST READ THE OUTPUT EQUATION 
C  NO. AFTER COMMA NO. 7. 

	CALL AFTERCOMMA(NCOVA,READLINE,7)
	BACKSPACE(57)
	READ(57,*,ERR=30) IOUTEQ
	IF(NOUT .LT. IOUTEQ) NOUT = IOUTEQ 
	CLOSE(57)

C  STORE THIS VALUE. ALSO STORE THE TIME OF THIS EVENT INTO THE ARRAY 
C  WHICH STORES OUTPUT TIMES.

	NTIMOUT(NSUB,IOUTEQ) = NTIMOUT(NSUB,IOUTEQ) + 1
	TIMOUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = TIMEVENT
	OUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = YVAL
	NRESETADD = 0

C  SEE CODE ABOVE REGARDING NRESEADD.

	GO TO 20



   30   WRITE(*,31) NSUB, TIMEVENT - TIMERESET
   31   FORMAT(/' THERE IS AN ERROR IN THE BLOCK FORMAT. FOR SUBJECT '/
     1' NO. ',I4,' AND TIME ',F10.4, ' A LINE HAS AN EVENT ID OF 0 IN'/
     2' COL. 2, INDICATING OBSERVED VALUE INFORMATION. BUT THERE IS '/
     3' EITHER NO OBSERVED VALUE IN COL. 7, OR NO OUTPUT EQUATION NO.'/
     4' IN ENTRY 8. '//
     3' THE PROGRAM STOPS.')

	  WRITE(*,401) NSUB,SUBARRAY(NSUB)
  401   FORMAT(/' NOTE: THE ID FOR SUBJECT NO. ',I4,' IS ',A11/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,31) NSUB, TIMEVENT - TIMERESET 
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



        CALL PAUSE

        STOP

   20 CONTINUE

C  THE 9TH - 12TH ENTRIES FOR THIS ROW POTENTIALLY HOLD NEW ASSAY 
C  COEFFICIENTS FOR THIS SUBJECT (NSUB) AND OUTPUT EQ. (IOUTEQ).
C  READ THESE VALUES. IF THEY ARE NOT MISSING, UPDATE THE ASSAY
C  COEFFICIENT INFO FOR THIS SUBJECT/OUTPUT EQ.

C  NOTE THAT THESE ENTRIES SHOULD ALL BE MISSING (DOTS OR n's) OR ALL

C  BE NUMBERS. IF THERE IS A COMBINATION  OF MISSING VALUES AND NUMBERS,
C  STOP THE PROGRAM AND TELL THE USER.

        IMISSC0 = 0
        IMISSC1 = 0
        IMISSC2 = 0
        IMISSC3 = 0
      
        CALL AFTERCOMMA(NCOVA,READLINE,8)
        BACKSPACE(57)

        READ(57,*,ERR=230) C00
        CLOSE(57)


        GO TO 235
  230   IMISSC0 = 1

  235   CALL AFTERCOMMA(NCOVA,READLINE,9)
        BACKSPACE(57)
        READ(57,*,ERR=240) C11
        CLOSE(57)

        GO TO 245
  240   IMISSC1 = 1


  245   CALL AFTERCOMMA(NCOVA,READLINE,10)
        BACKSPACE(57)


        READ(57,*,ERR=250) C22
        CLOSE(57)

        GO TO 255
  250   IMISSC2 = 1

  255   CALL AFTERCOMMA(NCOVA,READLINE,11)
        BACKSPACE(57)
        READ(57,*,ERR=260) C33
        CLOSE(57)


        GO TO 265
  260   IMISSC3 = 1

  265   CONTINUE

C  IF ALL IMISSCx VALUES ARE 0, UPDATE THE ASSAY C'S FOR THIS
C  SUBJECT AND OUTPUT EQ. NO. IF ALL IMISSCx VALUES ARE 1, THEY
C  ARE ALL MISSING, SO JUST CONTINUE. IF SOME OF THE IMISSCx VALUES
C  ARE 0 AND SOME ARE 1, THIS IS AN INCONSISTENCY (I.E., THE USER HAS
C  ENTERED SOME BUT NOT ALL OF THE ASSAY C'S). IN THIS CASE, STOP THE

C  PROGRAM AFTER INFORMING THE USER OF HIS ERROR.

        ISUMC = IMISSC0 + IMISSC1 + IMISSC2 + IMISSC3



        IF(ISUMC .EQ. 0) THEN
         CSUB(NSUB,1,IOUTEQ) = C00
         CSUB(NSUB,2,IOUTEQ) = C11
         CSUB(NSUB,3,IOUTEQ) = C22
         CSUB(NSUB,4,IOUTEQ) = C33
        ENDIF


        IF(ISUMC .NE. 0 .AND. ISUMC .NE. 4) THEN


         WRITE(*,231) NSUB, TIMEVENT - TIMERESET,IOUTEQ
  231    FORMAT(/' THERE IS AN ERROR IN THE BLOCK FORMAT. FOR SUBJECT '/
     1' NO. ',I4,' AND TIME ',F10.4, ' A LINE HAS AN EVENT ID OF 0 IN'/
     2' COL. 2, INDICATING OBSERVED VALUE INFORMATION, BUT THIS LINE'/
     3' HAS AN INCOMPLETE SET OF ASSAY COEFFICIENTS FOR OUTPUT EQ. '/
     4' NUMBER ',I3,'. THERE MUST BE EITHER 4 ASSAY COEFFICIENTS ON'/
     5' AN OUTPUT LINE, OR NONE (IF NO OUTPUT LINES FOR A PARTICULAR'/
     6' SUBJECT x OUTPUT EQ. COMBO HAVE ASSAY COEFFICIENTS, THEN THE'/
     7' POPULATION COEFFICIENTS WILL BE USED).'//
     8' THE PROGRAM STOPS.')
         WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,231) NSUB, TIMEVENT - TIMERESET,IOUTEQ
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



         CALL PAUSE
         STOP



        ENDIF


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IDEVENT .EQ. 0)  CONDITION.



	IF(IDEVENT .EQ. 1 .OR. IDEVENT .EQ. 4) THEN


C  IDEVENT = 1 OR 4 --> DOSE AND/OR COVARITE INFO IS TO BE READ IN.

C  THE 4TH ENTRY (AFTER COMMA NO. 3) IS AN INFUSION DURATION, AND THE
C  5TH ENTRY (AFTER COMMA NO. 4) IS THE TOTAL DOSE ... IF THIS LINE 
C  HAS DOSE INFORMATION. NOTE THAT IF THERE IS NO DOSE, THE TOTAL DOSE
C  ENTRY WILL BE A DOT ("."). ALSO, IF THERE IS A TOTAL DOSE, BUT THE
C  INFUSION DURATION IS 0, THIS LINE REPRESENTS A BOLUS INPUT.

C  SO, 1ST TRY READING THE TOTAL DOSE AS A REAL NUMBER; IF THERE IS AN 
C  ERROR, IT IS ASSUMED THAT THE PROGRAM READ A DOT.

	CALL AFTERCOMMA(NCOVA,READLINE,4)
	BACKSPACE(57)
	READ(57,*,ERR=40) TOTDOS 
	CLOSE(57)

C  TO GET TO THIS POINT --> TOTDOS CONTAINS A TOTAL DOSE VALUE FOR THIS
C  LINE. READ THE INFUSION DURATION AFTER COMMA NO. 3 TO SEE IF THIS
C  DOSE IS AN INFUSION (WITH A POSITIVE DURATION) OR A BOLUS (WITH A
C  0 DURATION).

	CALL AFTERCOMMA(NCOVA,READLINE,3)
	BACKSPACE(57)
	READ(57,*,ERR=50) DUR

	CLOSE(57)

C  BEFORE THIS VALUE CAN BE STORED, MUST READ THE DRUG NO. AFTER COMMA
C  NO. 5.

	CALL AFTERCOMMA(NCOVA,READLINE,5)
	BACKSPACE(57)
	READ(57,*,ERR=50) IDRUGNO
	IF(NDRUG .LT. IDRUGNO) NDRUG = IDRUGNO
	CLOSE(57)

C  STORE THE ABOVE VALUES DEPENDING ON WHETHER THEY REPRESENT AN
C  INFUSION OR A BOLUS INPUT.

C  INCREASE THE NO. OF DOSAGE LINES FOR THIS SUBJECT. IF DUR > 0, THE
C  NO. OF DOSAGE LINES INCREASES BY 2 SINCE THERE WILL BE A START TIME
C  AND AN ENDING TIME. IF DUR = 0, THE NO. OF DOSAGE LINES WILL INCREASE
C  BY 1.


	IF(DUR .GT. 0) THEN

C  THE INFUSION RATE IS TOTDOS/DUR. SO THE DOSE VALUE THE 1ST DOSE
C  TIME BELOW WILL BE THIS INFUSION RATE, AND THE DOSE VALUE AT THE

C  2ND DOSE TIME BELOW WILL BE 0.

C  NOTE THAT EVERYTIME NTIMALL(NSUB) IS INCREASED, THE PROGRAM CHECKS
C  THAT IT HAS NOT GONE PAST 72000. IF SO, A MESSAGE TO THE USER IS


C  WRITTEN THAT THIS IS NOT ALLOWED AND THE PROGRAM STOPS.


	 NTIMALL(NSUB) = NTIMALL(NSUB) + 1

	 IF(NTIMALL(NSUB) .GT. 72000) THEN


	  WRITE(*,3001) NSUB
 3001     FORMAT(/' THE NO. OF LINES IN THE DOSAGE REGIMEN FOR SUBJECT'/
     1' NO. ',I5,' IS MORE THAN THE LIMIT OF 72000. PLEASE RERUN THE'/
     2' PROGRAM AFTER REDUCING THIS NO. TO BE LESS THAN 72000.'/)
	  WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,3001) NSUB 
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



	  CALL PAUSE
	  STOP



	 ENDIF


	 TIMALL(NSUB,NTIMALL(NSUB)) = TIMEVENT


	 IF(IDEVENT .EQ. 4) THEN

C  SEE FORMAT 502 ABOVE. IDEVENT = 4 IS DISALLOWED EXPLICITLY AS OF
C  BESTDOS119.FOR.

C  IF IDEVENT = 4, IT MEANS THAT THIS IS A TIME RESET POINT (I.E., A 
C  TIME IN THE DISTANT FUTURE WHICH WILL SHOW UP AS T = 0 IN THE 
C  WORKING COPY FORMAT FILE). IN THIS CASE, IF NRESETADD = 0, ADD 
C  VALUES TO NTIMOUT, TIMOUT, AND OUT FOR EACH  OF THE MAXNUMEQ POSSIBLE 
C  OUTPUT EQUATIONS (THERE ARE NOUT OUTPUT EQUATIONS SO FAR, BUT IN


C  SUBSEQUENT ROWS, NOUT COULD INCREASE TO AT MOST MAXNUMEQ) TO 
C  INDICATE THAT ANY OUTPUTS FOLLOWING THIS TIME ARE BASED ON THE TIME
C  RESET. TO DO THIS, PUT IN THE CURRENT TIME IN TIMOUT, AND A
C  CORRESPONDING VALUE OF -99 (MISSING VALUE), FOR EACH OUTPUT EQUATION.


C  STORE VALUES INTO THE OUPUT ARRAYS (TIME = 0 AND VALUE = -99) WHICH 
C  INDICATE THAT SUBSEQUENT OUTPUT TIMES ARE BASED ON THIS TIME RESET.
C  ... BUT ONLY STORE THESE EXTRA VALUES IF NRESETADD = 0. IF 
C  NRESETADD = 1, IT MEANS THAT THESE LINES HAVE ALREADY BEEN ADDED
C  SINCE THE LAST ACTUAL OUTPUT VALUE WAS PUT INTO ONE OF THE OUTPUT
C  ARRAYS.

	  IF(NRESETADD .EQ. 0) THEN
           DO IOUTEQ = 1,MAXNUMEQ
	    NTIMOUT(NSUB,IOUTEQ) = NTIMOUT(NSUB,IOUTEQ) + 1
            TIMOUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = TIMEVENT
   	    OUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = -99.D0
	   END DO
	   NRESETADD = 1
	  ENDIF

	 ENDIF



C  THE ABOVE ENDIF IS FOR THE  IF(IDEVENT .EQ. 4)  CONDITION.


C  IF THE CURRENT TIME IS THE SAME AS THE ENDING TIME OF THE PREVIOUS 
C  IV, DO NOT INCREASE NTIMIV(.,.) BELOW, BECAUSE THE NEW STARTING IV 
C  RATE MUST REPLACE THE 0.0 FROM THE ENDING OF THE PREVIOUS IV.

        ISAME = 0
        IF(NTIMIV(NSUB,IDRUGNO) .GT. 0)
     1   CALL THESAME(TIMEVENT,TIMIV(NSUB,IDRUGNO,NTIMIV(NSUB,IDRUGNO)),
     2   ISAME)

        IF(ISAME .EQ. 0) NTIMIV(NSUB,IDRUGNO) = NTIMIV(NSUB,IDRUGNO) + 1
        TIMIV(NSUB,IDRUGNO,NTIMIV(NSUB,IDRUGNO)) = TIMEVENT
        RATEIV(NSUB,IDRUGNO,NTIMIV(NSUB,IDRUGNO)) = TOTDOS/DUR

	 NTIMALL(NSUB) = NTIMALL(NSUB) + 1


	 IF(NTIMALL(NSUB) .GT. 72000) THEN


	  WRITE(*,3001) NSUB
	  WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,3001) NSUB
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



	  CALL PAUSE
	  STOP



	 ENDIF

	 TIMALL(NSUB,NTIMALL(NSUB)) = TIMEVENT + DUR
	 NTIMIV(NSUB,IDRUGNO) = NTIMIV(NSUB,IDRUGNO) + 1
	 TIMIV(NSUB,IDRUGNO,NTIMIV(NSUB,IDRUGNO)) = TIMEVENT + DUR
	 RATEIV(NSUB,IDRUGNO,NTIMIV(NSUB,IDRUGNO)) = 0.D0

	ENDIF



C  THE ABOVE ENDIF IS FOR THE  IF(DUR .GT. 0)  CONDITION.

	

	IF(DUR .LE. 0) THEN



C  STORE THE BOLUS VALUE AT THE INDICATED TIME, TIMEVENT.


	 NTIMALL(NSUB) = NTIMALL(NSUB) + 1

	 IF(NTIMALL(NSUB) .GT. 72000) THEN

	  WRITE(*,3001) NSUB
	  WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,3001) NSUB
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)


	

        CALL PAUSE
	  STOP



	 ENDIF

	 TIMALL(NSUB,NTIMALL(NSUB)) = TIMEVENT



	 IF(IDEVENT .EQ. 4) THEN

C  SEE LOGIC ABOVE FOR TIME RESET LOGIC, AND ADDING LINES TO THE
C  OUTPUT EQUATION VALUES IN THAT CASE.

C  STORE VALUES INTO THE OUPUT ARRAYS (SEE LOGIC ABOVE) WHICH 
C  INDICATE THAT SUBSEQUENT OUTPUT TIMES ARE BASED ON THIS TIME RESET.
C  ... BUT ONLY STORE THESE EXTRA VALUES IF NRESETADD = 0. IF 
C  NRESETADD = 1, IT MEANS THAT THESE LINES HAVE ALREADY BEEN ADDED
C  SINCE THE LAST ACTUAL OUTPUT VALUE WAS PUT INTO ONE OF THE OUTPUT
C  ARRAYS.

	  IF(NRESETADD .EQ. 0) THEN
           DO IOUTEQ = 1,MAXNUMEQ
	    NTIMOUT(NSUB,IOUTEQ) = NTIMOUT(NSUB,IOUTEQ) + 1
            TIMOUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = TIMEVENT
   	    OUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = -99.D0
	   END DO
	   NRESETADD = 1
	  ENDIF

	 ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(IDEVENT .EQ. 4)  CONDITION.

	 NTIMBOL(NSUB,IDRUGNO) = NTIMBOL(NSUB,IDRUGNO) + 1
	 TIMBOL(NSUB,IDRUGNO,NTIMBOL(NSUB,IDRUGNO)) = TIMEVENT
	 BOLUS(NSUB,IDRUGNO,NTIMBOL(NSUB,IDRUGNO)) = TOTDOS

	ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(DUR .LE. 0)  CONDITION.


	GO TO 40


   50   WRITE(*,51) NSUB, TIMEVENT - TIMERESET
   51   FORMAT(/' THERE IS AN ERROR IN THE BLOCK FORMAT. FOR SUBJECT '/
     1' NO. ',I4,' AND TIME ',F10.4,' A LINE HAS A DOSAGE AMT., BUT NO'/
     2' DURATION (EVEN A BOLUS SHOULD HAVE A DURATION OF 0) IN '/
     3' ENTRY 4., OR NO DRUG NO. IN ENTRY 5.'//
     3' THE PROGRAM STOPS.')
        WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,51) NSUB, TIMEVENT - TIMERESET 
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



	CALL PAUSE


	STOP


   40   CONTINUE


C  READ IN ANY COVARIATE VALUES IF NCOVA .GT. 0.

	IF(NCOVA .GT. 0) THEN


         DO 60 ICOV = 1,NCOVA

	  CALL AFTERCOMMA(NCOVA,READLINE,11+ICOV)
	  BACKSPACE(57)
 	  READ(57,*,ERR=70) COVVAL
	  CLOSE(57)



C  TO GET TO THIS POINT --> COVVAL REPRESENTS THE VALUE OF COV. NO.
C  ICOV. STORE IT AT THE INDICATED TIME, TIMEVENT.

	  NTIMALL(NSUB) = NTIMALL(NSUB) + 1

	 IF(NTIMALL(NSUB) .GT. 72000) THEN


	  WRITE(*,3001) NSUB
	  WRITE(*,401) NSUB,SUBARRAY(NSUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,3001) NSUB
         WRITE(47,401) NSUB,SUBARRAY(NSUB)                                
        CLOSE(47)



	  CALL PAUSE
	  STOP



	 ENDIF

	 TIMALL(NSUB,NTIMALL(NSUB)) = TIMEVENT



	 IF(IDEVENT .EQ. 4) THEN


C  SEE LOGIC ABOVE FOR TIME RESET LOGIC, AND ADDING LINES TO THE
C  OUTPUT EQUATION VALUES IN THAT CASE.

C  STORE VALUES INTO THE OUPUT ARRAYS (TIME = 0 AND VALUE = -99) WHICH 
C  INDICATE THAT SUBSEQUENT OUTPUT TIMES ARE BASED ON THIS TIME RESET.

C  ... BUT ONLY STORE THESE EXTRA VALUES IF NRESETADD = 0. IF 
C  NRESETADD = 1, IT MEANS THAT THESE LINES HAVE ALREADY BEEN ADDED
C  SINCE THE LAST ACTUAL OUTPUT VALUE WAS PUT INTO ONE OF THE OUTPUT
C  ARRAYS.

	  IF(NRESETADD .EQ. 0) THEN
           DO IOUTEQ = 1,MAXNUMEQ
	    NTIMOUT(NSUB,IOUTEQ) = NTIMOUT(NSUB,IOUTEQ) + 1
            TIMOUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = TIMEVENT
   	    OUT(NSUB,IOUTEQ,NTIMOUT(NSUB,IOUTEQ)) = -99.D0
	   END DO
	   NRESETADD = 1
	  ENDIF

	 ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IDEVENT .EQ. 4)  CONDITION.

C  SINCE MULTIPLE DOSE LINES CAN OCCUR AT THE SAME TIME (DEFINING

C  DOSES FOR DIFFERENT DRUGS OR IV VS. BOLUS VALUES, IT IS POSSIBLE
C  THAT A COVARIATE VALUE IS BEING RESET AT THE SAME TIME AS IN A
C  PREVIOUS LINE. IF THIS IS TRUE, TELL THE USER THAT THE COVARIATE
C  VALUE FROM THE FIRST LINE WILL BE USED. THIS MUST BE CHECKED ONLY
C  IF THE INDEX OF THE NO. OF COVARIATE VALUES IS > 0 - OTHERWISE
C  THIS IS THE FIRST LINE WITH A COVARIATE VALUE ON IT).

C  BUT, ONLY WRITE THIS WARNING IF THE TWO COVARIATE VALUES ARE
C  ACTUALLY DIFFERENT, BECAUSE IF THEY ARE THE SAME, THERE IS NO
C  CONFLICT, JUST REDUNDANCY.



	  IF(NTIMCOV(NSUB,ICOV) .GT. 0) THEN

	   CALL THESAME(TIMEVENT,TIMCOV(NSUB,ICOV,NTIMCOV(NSUB,ICOV)),
     1                  ISAMETIME)

	   CALL THESAME(COVVAL,COV(NSUB,ICOV,NTIMCOV(NSUB,ICOV)),
     1                  ISAMECOV)

	   IF(ISAMETIME .EQ. 1 .AND. ISAMECOV .EQ. 1) GO TO 60

	   IF(ISAMETIME .EQ. 1 .AND. ISAMECOV .EQ. 0) THEN
            WRITE(*,41) NSUB,TIMEVENT-TIMERESET,ICOV,
     1       COV(NSUB,ICOV,NTIMCOV(NSUB,ICOV)),COVVAL
   41       FORMAT(/' FOR SUBJECT, 'I2,' AT TIME ',G14.7,', COVARIATE'/
     1' NO. ',I2,' WAS SET TO BOTH ',G14.7,' AND ',G14.7,'. YOU SHOULD'/
     2' CHECK YOUR BLOCK FILE. FOR NOW, THE FIRST VALUE WILL BE USED.')
    
	    GO TO 60
	   ENDIF

	  ENDIF



	  NTIMCOV(NSUB,ICOV) = NTIMCOV(NSUB,ICOV) + 1
	  TIMCOV(NSUB,ICOV,NTIMCOV(NSUB,ICOV)) = TIMEVENT 
	  COV(NSUB,ICOV,NTIMCOV(NSUB,ICOV)) = COVVAL

	  GO TO 60

   70     CONTINUE

C  TO GET TO LABEL 70 --> THERE WAS NO NUMBER IN THE ENTRY FOR 


C  COVARIATE, ICOV.

   60   CONTINUE


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(NCOVA .EQ. 0)  CONDITION.


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IDEVENT .EQ. 1 .OR. IDEVENT .EQ. 4) 
C  CONDITION.


C  RETURN TO LABEL 10 TO READ THE NEXT LINE IN THE BLOCK PATIENT
C  DATA FILE.


	GO TO 10


  100   NSUB = 1


        IF(NCOVA .GT. 0) THEN


C  IF IGUI = 1, IT MEANS THAT THIS PROGRAM IS BEING RUN WITHOUT ANY
C  USER INTERACTION, AND ALL THE INFO IS INCLUDED IN THE FILE

C  'GUICMDS.INX', WHICH IS CURRENTLY OPENED AS FILE 23. IN THIS CASE,
C  SKIP THE KEYBOARD INPUTTING OF ICOVTYPE(.) BELOW, AND INSTEAD READ
C  THESE VALUES FROM THE PREVIOUS LINE OF FILE 23. 


C  IF IGUI = 0, IT MEANS THAT THIS PROGRAM IS BEING RUN THE STANDARD
C  WAY, WITH USER INTERACTION. IN THIS CASE, INPUT ICOVTYPE(.) FROM
C  THE USER VIA THE KEYBOARD.

         IF(IGUI .EQ. 1) THEN
          BACKSPACE(23)
          READ(23,*) (ICOVTYPE(ICOV),ICOV=1,NCOVA)
         ENDIF         


         IF(IGUI .EQ. 0) THEN



       IF(IWHICH .EQ. 1) WRITE(*,111) NCOVA
  111    FORMAT(/' YOUR BLOCK FORMAT PATIENT INFORMATION FILE, WHICH'/
     1' HAS THE "PAST" INFORMATION ON YOUR SUBJECT, SHOWS'/
     1' ',I2,' COVARIATES. EACH COVARIATE MUST BE SPECIFIED TO BE '/

 
     2' EITHER A PIECEWISE CONSTANT COVARIATE OR AN INTERPOLATED '/
     3' COVARIATE.'//
     4' A PIECEWISE CONSTANT COVARIATE WILL HAVE THE SAME VALUE FROM'/
     5' ONE EXPLICITLY CODED VALUE, THROUGH ALL INTERVEENING DOSE'/
     6' TIMES, TO THE NEXT EXPLICITLY CODED VALUE (WHEN IT WILL CHANGE).
     7 '//
     8' AN INTERPOLATED COVARIATE WILL HAVE INTERPOLATED VALUES FROM'/
     9' ONE EXPLICITY CODED VALUE, THROUGH ALL INTERVEENING DOSE '/
     1' TIMES, TO THE NEXT EXPLCITLY CODED VALUE.'//)


       IF(IWHICH .EQ. 2) WRITE(*,117) NCOVA
  117    FORMAT(/' YOUR BLOCK FORMAT PATIENT INFORMATION FILE, WHICH'/
     1' HAS THE "FUTURE" INFORMATION ON YOUR SUBJECT, SHOWS'/
     1' ',I2,' COVARIATES. EACH COVARIATE MUST BE SPECIFIED TO BE '/
     2' EITHER A PIECEWISE CONSTANT COVARIATE OR AN INTERPOLATED '/
     3' COVARIATE.'//
     4' A PIECEWISE CONSTANT COVARIATE WILL HAVE THE SAME VALUE FROM'/
     5' ONE EXPLICITLY CODED VALUE, THROUGH ALL INTERVEENING DOSE'/
     6' TIMES, TO THE NEXT EXPLICITLY CODED VALUE (WHEN IT WILL CHANGE).
     7 '//
     8' AN INTERPOLATED COVARIATE WILL HAVE INTERPOLATED VALUES FROM'/
     9' ONE EXPLICITY CODED VALUE, THROUGH ALL INTERVEENING DOSE '/
     1' TIMES, TO THE NEXT EXPLCITLY CODED VALUE.'//)



	 DO ICOV = 1,NCOVA
  130	  WRITE(*,112) COVNAME(ICOV)
  112     FORMAT(/' FOR COVARIATE ',A11/
     1'  ENTER 1 IF IT IS TO BE PIECEWISE CONSTANT; '/
     2'  ENTER 2 IF IT IS TO BE INTERPOLATED: ')

	  READ(*,*,ERR=130) ITYPE

	  IF(ITYPE .NE. 1 .AND. ITYPE .NE. 2) GO TO 130
	  ICOVTYPE(ICOV) = ITYPE
	 END DO

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IGUI .EQ. 0)  CONDITION.



        ENDIF

C  THE ABOVE ENDIF IS FOR THE  	IF(NCOVA .GT. 0)  CONDITION.




C  WRITE OUT ALL THE INFO IN THE ABOVE ARRAYS INTO A WORKING COPY
C  FORMAT. ACTUALLY, FOR NOW, JUST TRY TO CREATE THE DOSAGE AND
C  OBSERVATION PART OF A FILE SIMILAR TO 2DRUG001 (I.E., DON'T
C  WORRY NOW ABOUT THE TOP PART OF THE FILE, OR THE BOTTOM).


C  FIRST, CALL SUBROUTINE GETCHAR2 TO ESTABLISH THE NUMBER ARRAY.

	DO JSUB = 1,NSUB
	 CALL GETCHAR2(JSUB,CHARSUB)
	 NUMBER(JSUB) = CHARSUB
	END DO


	DO 1000 ISUB = 1,NSUB

C  NOTE THAT THE WORKING COPY SUBJECTS WILL BE PLACED INTO THE 
C  WORKING DIRECTORY. THE PREFIX WILL BE HARDCODED TO 'XQZPJ', AND THE 
C  SUFFIX TO 'PST' IF IWHICH = 1, AND TO 'FUT' IF IWHICH = 2.

        IF(IWHICH .EQ. 1) PATFIL = 'XQZPJ'//NUMBER(ISUB)//'.PST'
        IF(IWHICH .EQ. 2) PATFIL = 'XQZPJ'//NUMBER(ISUB)//'.FUT'


C  CALL FULLNAME WHICH CONVERTS THE FILENAME TO PATHFILE, THE COMPLETE 
C  NAME OF THE FILE, WHICH INCLUDES THE PATH (IF THE PATH IS NOT THE 
C  CURRENT DIRECTORY).

         TMPFILE = ' '
	 TMPFILE = PATFIL 
	 CALL FULLNAME(PATH,TMPFILE,PATHFILE)


	 OPEN(33,FILE=PATHFILE)

	 IF(NDRUG .GT. 7) THEN



	  WRITE(*,101) NDRUG
  101     FORMAT(/' NO. OF DRUGS IN THIS PATIENT DATA SET IS ',I2/
     1'  THIS IS MORE THAN 7, THE MAXIMUM --> PROGRAM STOPS.'/)
	  WRITE(*,401) ISUB,SUBARRAY(ISUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,101) NDRUG
         WRITE(47,401) ISUB,SUBARRAY(ISUB)                                
        CLOSE(47)



	  CALL PAUSE
	  STOP



	 ENDIF


	 IF(NOUT .GT. MAXNUMEQ) THEN



	  WRITE(*,106) NOUT,MAXNUMEQ
  106   FORMAT(/' NO. OF OUTPUT EQS. THIS PATIENT DATA SET IS ',I2/
     1' THIS IS MORE THAN THE MAX. ALLOWED VALUE OF ',I2,'. SO THE'/
     2' PROGRAM STOPS.'/)
	  WRITE(*,401) ISUB,SUBARRAY(ISUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,106) NOUT,MAXNUMEQ 
         WRITE(47,401) ISUB,SUBARRAY(ISUB)                                
        CLOSE(47)



	  CALL PAUSE
	  STOP



	 ENDIF

	 IF(NCOVA .GT. 26) THEN

	  WRITE(*,103) NCOVA
  103     FORMAT(/' NO. OF COVARIATES IN THIS PATIENT DATA SET IS ',I3/
     1'  THIS IS MORE THAN 26, THE MAXIMUM --> PROGRAM STOPS.'/)
	  WRITE(*,401) ISUB,SUBARRAY(ISUB)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,103) NCOVA


         WRITE(47,401) ISUB,SUBARRAY(ISUB)                                
        CLOSE(47)

	  CALL PAUSE
	  STOP

	 ENDIF


C  BEFORE CALLING WRITEDOS, CALL TIMESET FOR THIS SUBJECT TO 
C  ELIMINATE ALL THE DUPLICATE TIMES IN TIMALL(ISUB,.). THERE COULD BE 
C  DUPLICATE TIMES BECAUSE NTIMALL(ISUB) WAS INCREASED BY 1 FOR EACH 
C  BOLUS, IV, OR COVARIATE VALUE, AND SOME OF THESE VALUES OCCUR AT THE 
C  SAME TIME.  TIMESET ALSO ORDERS THE TIMES AND THEY COULD BE OUT OF 
C  ORDER DUE TO AN IV RATE WHOSE DURATION RESULTS IN THE ENDING TIME 
C  BEING PAST THE NEXT DOSE EVENT. 

C  TIMESET RETURNS THE COMPLETE SET OF TIMES FOR THIS SUBJECT'S DOSAGE 
C  REGIMEN IN TIMI (AND THERE ARE NTIMI OF THEM).

	 CALL TIMESET(MAXSUB,ISUB,SUBARRAY(ISUB),NTIMALL,TIMALL,NTIMI,
     1    TIMI)
	


C  CALL WRITEDOS TO WRITE THE PATIENT INFO TO PATHFILE = FILE 33.

	 CALL WRITEDOS(ISUB,NTIMIV,TIMIV,RATEIV,NTIMBOL,TIMBOL,BOLUS,
     1    NTIMCOV,TIMCOV,COV,ICOVTYPE,NDRUG,NCOVA,NOUT,NTIMOUT,
     2    TIMOUT,OUT,SUBARRAY(ISUB),COVNAME,MAXSUB,NTIMI,TIMI,TIMADD,
     3    CSUB,NSST,DOSELINEST)


 1000   CONTINUE


	RETURN

	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE AFTERCOMMA(NCOVA,READLINE,NCOMMA)
	CHARACTER READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  OPEN AND WRITE INTO SCRATCH FILE 57 THE PART OF READLINE THAT 
C  IS BETWEEN COMMAS NCOMMA AND NCOMMA+1 ... UNLESS NCOMMA IS THE MAX.
C  NO. OF COMMAS (11+NCOVA). IN THIS CASE, WRITE INTO SCRATCH FILE 57 THE 

C  PART OF READLINE THAT FOLLOWS COMMA NCOMMA (SINCE THERE WILL NOT BE 
C  ANOTHER COMMA).

    1   FORMAT(A1000)

C  IF NCOMMA = 0, SET ISTART = 0 AND GO TO LABEL 10.
	
	IF(NCOMMA .EQ. 0) THEN
	 ISTART = 0
	 GO TO 10
	ENDIF


	ICOMMA = 0

	DO ISTART = 1,300

	 IF(READLINE(ISTART:ISTART) .EQ. ',') THEN

	  ICOMMA = ICOMMA + 1
	  IF(ICOMMA .EQ. NCOMMA) GO TO 10
	 ENDIF
	END DO	    




C  TO GET TO THIS POINT MEANS THAT THE NO. OF COMMAS IN LINE
C  READLINE IS LESS THAN NCOMMA. WRITE A MESSAGE AND STOP.

	WRITE(*,2) NCOMMA,ICOMMA,READLINE
    2   FORMAT(/' THE FOLLOWING LINE WAS SUPPOSED TO HAVE AT LEAST ',I3/
     1' COMMAS, BUT IT HAD ONLY ',I3,' SO THE PROGRAM STOPS.'//
     2A1000)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,2) NCOMMA,ICOMMA,READLINE 
        CLOSE(47)



	CALL PAUSE
	STOP
	

C  TO REACH LABEL 10, ISTART IS NOW THE COLUMN NO. WHICH HAS THE
C  NCOMMAth COMMA IN LINE READLINE.  FIND IEND, WHICH IS THE COLUMN NO.
C  WHICH HAS THE NCOMMA+1 ST COMMA IN THE LINE. THEN WRITE THE PORTION
C  OF READLINE WHICH IS BETWEEN ISTART AND IEND INTO FILE57.

   10	ICOMMA = 0

	DO IEND = 1,300
	 IF(READLINE(IEND:IEND) .EQ. ',') THEN
	  ICOMMA = ICOMMA + 1
	  IF(ICOMMA .EQ. NCOMMA+1) GO TO 20
	 ENDIF
	END DO	    

C  TO GET TO THIS POINT MEANS THAT THE NO. OF COMMAS IN LINE
C  READLINE IS LESS THAN NCOMMA+1. THIS IS OK IF NCOMMA IS THE MAXIMUM
C  NO. OF COMMAS, WHICH IS 11+NCOVA. OTHERWISE, WRITE A MESSAGE AND 
C  STOP.

	IF(NCOMMA .LT. 11 + NCOVA) THEN



	 WRITE(*,2) NCOMMA+1,ICOMMA,READLINE

        OPEN(47,FILE=ERRFIL)
         WRITE(47,2) NCOMMA+1,ICOMMA,READLINE 
        CLOSE(47)




	 CALL PAUSE
	 STOP



	ENDIF

	IF(NCOMMA .EQ. 11 + NCOVA) IEND = 301

C???DEBUG. NOTE THAT SOMETIMES, WHEN THIS PROGRAM IS COMPILED/LINKED 
C  WITH gfortran, IT PRODUCES AN ERROR RELATED TO FILE 57. THIS ERROR
C  HAPPENS RANDOMLY, AND MAY BE ABLE TO BE REMOVED BY CHANGING FROM
C  OPEN(57) TO OPEN(57,FILE='FILE57JUNK').
C  AS OF BESTDOS111.FOR, CHANGE TO OPEN(57,FILE='FILE57JUNK') BECAUSE
C  MORE 'CANNOT OPEN' ERRORS RELATED TO FILE 57 HAVE BEEN OBSERVED.

   20	OPEN(57,FILE='FILE57JUNK')

C  SEE CODE AT TOP OF MONTBG100.FOR TO SEE WHY FORMATTED WRITE 
C  STATEMENTS ARE USED (UNLESS NUMCHAR BELOW IS > 11, IN WHICH CASE

C  A FREE FORMAT WRITE STATEMENT IS STILL USED).

        NUMCHAR = IEND - ISTART - 1
	
        IF(NUMCHAR .EQ. 1) WRITE(57,101) READLINE(ISTART+1:IEND-1)
  101   FORMAT(A1)

        IF(NUMCHAR .EQ. 2) WRITE(57,102) READLINE(ISTART+1:IEND-1)
  102   FORMAT(A2)

        IF(NUMCHAR .EQ. 3) WRITE(57,103) READLINE(ISTART+1:IEND-1)
  103   FORMAT(A3)

        IF(NUMCHAR .EQ. 4) WRITE(57,104) READLINE(ISTART+1:IEND-1)
  104   FORMAT(A4)

        IF(NUMCHAR .EQ. 5) WRITE(57,105) READLINE(ISTART+1:IEND-1)
  105   FORMAT(A5)

        IF(NUMCHAR .EQ. 6) WRITE(57,106) READLINE(ISTART+1:IEND-1)
  106   FORMAT(A6)

        IF(NUMCHAR .EQ. 7) WRITE(57,107) READLINE(ISTART+1:IEND-1)
  107   FORMAT(A7)

        IF(NUMCHAR .EQ. 8) WRITE(57,108) READLINE(ISTART+1:IEND-1)

  108   FORMAT(A8)


        IF(NUMCHAR .EQ. 9) WRITE(57,109) READLINE(ISTART+1:IEND-1)
  109   FORMAT(A9)

        IF(NUMCHAR .EQ. 10) WRITE(57,110) READLINE(ISTART+1:IEND-1)
  110   FORMAT(A10)

        IF(NUMCHAR .EQ. 11) WRITE(57,111) READLINE(ISTART+1:IEND-1)
  111   FORMAT(A11)

        IF(NUMCHAR .GT. 11) WRITE(57,*) READLINE(ISTART+1:IEND-1)



	RETURN
	END
C

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE WRITEDOS(ISUB,NTIMIV,TIMIV,RATEIV,NTIMBOL,TIMBOL,
     1   BOLUS,NTIMCOV,TIMCOV,COV,ICOVTYPE,NDRUG,NCOVA,NOUT,NTIMOUT,
     2   TIMOUT,OUT,SUBID,COVNAME,MAXSUB,NTIMI,TIMI,TIMADD,CSUB,NSST,
     3   DOSELINEST)

       PARAMETER(MAXNUMEQ=7)

         IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION BOLVAL(7),COVVAL(26),XIVVAL(7),DOSELINE(5200,43),
     1 TIMOUT(MAXSUB,MAXNUMEQ,650),TIMIV(MAXSUB,7,5200),
     2 NTIMOUT(MAXSUB,MAXNUMEQ),NTIMIV(MAXSUB,7),RATEIV(MAXSUB,7,5200),
     3 BOLUS(MAXSUB,7,5200),OUT(MAXSUB,MAXNUMEQ,650),
     4 COV(MAXSUB,26,5200),ICOVTYPE(26),TIMBOL(MAXSUB,7,5200),
     5 NTIMBOL(MAXSUB,7),NTIMCOV(MAXSUB,26),TIMCOV(MAXSUB,26,5200),
     6 INDIV(7),INDBOL(7),INDCOV(26),TIMI(72000),TIMORD(3900),
     7 BLOCKOUT(3900,MAXNUMEQ),CSUB(MAXSUB,4,MAXNUMEQ),
     8 NSST(MAXSUB),DOSELINEST(MAXSUB,99,100),DOSELINES(100)

	CHARACTER SUBID*11,COVNAME(26)*11,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  THIS ROUTINE WRITES THE DOSE EVENTS AND THE OBSERVATION EVENTS OF
C  THE PATIENT DATA FILE TO FILE33. NOTE THAT A DOSE EVENT OCCURS
C  WHENEVER THERE IS A BOLUS APPLIED, AN IV RATE CHANGE, AND/OR A
C  COVARIATE VALUE APPLIED.


C----------------- WRITE THE TOP OF FILE BELOW -------------------------

	WRITE(33,301) SUBID
  301   FORMAT('  LAST AND FIRST NAMES ARE: ',A11)
	WRITE(33,302) SUBID
  302   FORMAT(' CHART NUMBER IS: ',A11//
     1' WARD NO, PATIENT AGE (YEARS), SEX, HEIGHT (INCHES),'/
     2' ETHNICITY FLAG, AND ETHNICITY DESCRIPTION (IF ANY)   FOLLOW ON'/
     3' THE NEXT 6 LINES:'/
     4'-99'/
     5'-99'/
     6'M'/
     7'-99'/
     8'1'/

     9'Ethnicity Description'//
     1' DATE OF FIRST THERAPY IS   1   1   08'/

     2'CCR ML/MIN/    0.00 150.00'/
     3'HOURS    MG     MG/HR    MCG/ML KG       MG/DL    60  .00 ')


C----------------- WRITE THE TOP OF FILE ABOVE -------------------------


C----------------- WRITE THE DOSE EVENTS BELOW -------------------------


	 WRITE(33,102) NDRUG
  102    FORMAT(/'     ',I1,' ... NO. OF DRUGS')

C  NOTE THAT NCOVA IS THE NO. OF COVARIATES IN THE USER'S BLOCK FORMAT
C  FILE. THIS AUTOMATICALLY BECOMES NADD, THE NO. OF "ADDITIONAL"
C  COVARIATES IN THE WORKING COPY FILE.

	 WRITE(33,104) NCOVA
  104    FORMAT('    ',I2,' ... NO. OF ADDITIONAL COVARIATES')



C  INCREASE THE NO. OF DOSE EVENTS BY THE NO. OF STEADY STATE DOSE LINES
C  THAT WILL BE IN THE FILE (THESE WERE NOT PART OF THE ARRAY EXAMINED
C  BY SUBROUTINE TIMESET).

	WRITE(33,2) NTIMI + NSST(ISUB)
    2   FORMAT('   ',I3,' ... NO. OF DOSE EVENTS'//
     1'    TIME, IV/PO FOR EACH DRUG; ADDITIONAL COVARIATES IF ANY')


C  SET THE IVs FOR EACH DRUG TO 0. EACH DRUG IV VALUE STAYS THE SAME
C  AS ITS PREVIOUS VALUE UNTIL CHANGED. ALSO INITIALIZE EACH BOLUS

C  VALUE TO 0.

	DO IDRUG = 1,NDRUG

	 XIVVAL(IDRUG) = 0.D0
	 BOLVAL(IDRUG) = 0.D0
	END DO

C  SET EACH COVARIATE VALUE TO ITS INITIAL VALUE. IT IS ASSUMED THAT
C  EACH COV. HAS ITS FIRST VALUE SET AT THE FIRST DOSE TIME (T=0).
C  IF THIS IS NOT TRUE, SEE REMARK BELOW WHERE THE COVARIATE VALUES
C  ARE SET FOR EACH TIME.

	DO ICOV = 1,NCOVA
	 COVVAL(ICOV) = COV(ISUB,ICOV,1)
	END DO


C  INITIALIZE THE INDEX OF THE NEXT TIME IN EACH TIME ARRAY TO BE 1.

	DO IDRUG = 1,NDRUG
	 INDIV(IDRUG) = 1
	 INDBOL(IDRUG) = 1
	END DO

	DO ICOV = 1,NCOVA
	 INDCOV(ICOV) = 1
	END DO


C  GO THROUGH ALL THE NTIMI DOSAGE BLOCK TIMES IN TIMI AND ESTABLISH ALL
C  IV, BOLUS, AND COV. VALUES AT EACH TIME AND WRITE THEM TO THE DOSAGE

C  REGIMEN, BUT NOTE THAT EACH TIME MUST BE REDUCED BY TIMERESET, WHERE
C  TIMERESET = TIMADD*NRESET, WHERE NRESET IS THE NO. OF TIME RESETS
C  THROUGH THAT TIME (SEE IN READBLOCK THAT TIMERESET WAS ADDED TO EACH
C  TIME).




	NRESET = 0
	TIMERESET = TIMADD*NRESET

C  INITIALIZE NSSEVENTS = 1. THIS WILL BE THE INDEX OF THE NEXT STEADY
C  STATE DOSE EVENT (IF ANY) IN THE CURRENT PATIENT'S DATA FILE. THE
C  TOTAL NO. OF SUCH EVENTS IS NSST(ISUB).


      NSSEVENTS = 1





C  AS OF NPAG104, PUT IN A STEADY STATE LINE AS THE FIRST DOSE EVENT
C  IF ONE EXISTS. 

C  DOSELINEST(ISUB,1,100) = NRESET, THE NO. OF DOSE RESETS BEFORE THE
C  1ST STEADY STATE DOSE SET. 

C  IF DOSELINST(ISUB,1,100) = 0, IT MEANS THAT THERE IS A STEADY STATE
C  DOSE SET AT THE TOP OF THE FILE (I.E., BEFORE ANY RESETS). 


C  IF DOSELINEST(ISUB,1,100) IS = -99, IT MEANS THERE ARE NO STEADY 
C  STATE LINES FOR THIS SUBJECT. 

C  IF DOSELINEST(ISUB,1,100) = N > 0, IT MEANS THE FIRST STEADY STATE
C  DOSE SET OCCURS AFTER RESET NO. N.


      CALL THESAME(DOSELINEST(ISUB,1,100),0.D0,ISAME)

      IF(ISAME .EQ. 1) THEN

C  FILL IN THE ENTRIES TO DOSELINE FOR THE STEADY STATE DOSE AT THE
C  TOP OF THE PATIENT'S FILE.

C  THE FIRST ENTRY IN DOSELINST IS TIMEVENT = THE NEGATIVE OF THE
C  INTERDOSE INTERVAL.

	 DOSELINES(1) = DOSELINEST(ISUB,1,1)

	 NENTRY = 1

C  FOR EACH DRUG, THE IV AND TOTAL VALUES ARE ALREADY STORED INTO
C  DOSELINEST(ISUB,1,2*I) AND DOSELINEST(ISUB,1,2*I+1), I=1,NDRUG.

	 DO IDRUG = 1,NDRUG
	  NENTRY = NENTRY+1
        DOSELINES(NENTRY) = DOSELINEST(ISUB,1,2*IDRUG)
	  NENTRY = NENTRY+1
	  DOSELINES(NENTRY) = DOSELINEST(ISUB,1,2*IDRUG+1)
	 END DO

C  FOR EACH COVARIATE, IF ANY, THE VALUES ARE STORED INTO
C  DOSELINEST(ISUB,1,19+ICOV), ICOV = 1,NCOVA.

       IF(NCOVA .GT. 0) THEN
	  DO ICOV = 1,NCOVA
	   NENTRY = NENTRY+1
	   DOSELINES(NENTRY) = DOSELINEST(ISUB,1,19+ICOV)
	  END DO
       ENDIF

       WRITE(33,1) (DOSELINES(J),J=1,NENTRY)

       NSSEVENTS = NSSEVENTS + 1

      ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(ISAME .EQ. 1)  CONDITION.



	DO 1000 ITIM = 1,NTIMI


	 TIME = TIMI(ITIM)


C  IF THIS TIME = THE NEXT MULTIPLE OF TIMADD, INCREASE THE NO. OF
C  RESETS BY 1 AND RECALCULATE TIMERESET, THE CURRENT AMOUNT THAT EACH
C  TIME MUST BE REDUCED BEFORE BEING WRITTEN INTO THE WORKING COPY
C  FILE.

C  AS OF NPAG104.FOR, THIS TIME COULD BE PAST A TIME RESET POINT. THIS
C  WOULD HAPPEN IF A TIME RESET HAD A STEADY STATE DOSE SET ASSOCIATED
C  WITH IT, WITHOUT A NON STEADY STATE DOSE IMMEDIATELY FOLLWOING IT (IF
C  A NON STEADY STATE DOSE IMMEDIATELY FOLLOWED A STEADY STATE SET, 
C  THEN THERE WILL BE TIMI(.) ENTRY THAT = TIMADD*(NRESET+1)). IN THIS
C  CASE TOO, UPDATE NRESET AND TIMERESET.

C  CALL THESAME HERE TO ESTABLISH THE VALUE FOR ISAMERESET. IT
C  WILL USED BELOW TO SUPPRESS INTERPOLATION OF COVARIATES ACROSS A
C  TIME RESET.

       CALL THESAME(TIME,TIMADD*(NRESET+1),ISAMERESET)   


       IF(TIME .GE. TIMADD*(NRESET+1)) THEN

C  TIME IS AT OR PAST THE NEXT MULTIPLE OF TIMADD (I.E., IT IS A TIME
C  RESET POINT). IN THIS CASE, INCREASE NRESET BY 1 AND RECALCULATE
C  TIMERESET.

	  NRESET = NRESET + 1
	  TIMERESET = TIMADD*NRESET

C  FOR THIS TIME RESET, CHECK TO SEE IF THE FIRST DOSE LINE WILL BE

C  A STEADY STATE DOSE EVENT. THE NO. OF STEADY STATE DOSE EVENTS IN
C  THIS PATIENT'S FILE IS NSST(ISUB), AND THE NO. OF SUCH EVENTS THAT
C  HAVE ALREADY BEEN WRITTEN TO FILE 33 IS NSSEVENTS-1 SO FAR.



        IF(NSSEVENTS .LE. NSST(ISUB)) THEN

C  THE NEXT STEADY STATE DOSE EVENT OCCURS AFTER RESET NO.
C  DOSELINEST(ISUB,NSSEVENTS,100). CHECK TO SEE IF THIS VALUE IS
C  THE SAME AS NRESET. IF SO, THIS RESET STARTS WITH A STEADY STATE
C  LINE.

         XRESET = NRESET

         CALL THESAME(DOSELINEST(ISUB,NSSEVENTS,100),XRESET,ISAME)

         IF(ISAME .EQ. 1) THEN

C  FILL IN THE ENTRIES TO DOSELINE FOR THE STEADY STATE DOSE AT THE
C  BEGINNING OF THIS DOSE RESET.


C  THE FIRST ENTRY IN DOSELINST IS TIMEVENT = THE NEGATIVE OF THE

C  INTERDOSE INTERVAL.

          DOSELINES(1) = DOSELINEST(ISUB,NSSEVENTS,1)
          NENTRY = 1

C  FOR EACH DRUG, THE IV AND TOTAL VALUES ARE ALREADY STORED INTO
C  DOSELINEST(ISUB,NSSEVENTS,2*I) AND DOSELINEST(ISUB,NSSEVENTS,2*I+1),
C  I=1,NDRUG.

          DO IDRUG = 1,NDRUG
           NENTRY = NENTRY+1
           DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,2*IDRUG)
           NENTRY = NENTRY+1
           DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,2*IDRUG+1)
          END DO

C  FOR EACH COVARIATE, IF ANY, THE VALUES ARE STORED INTO
C  DOSELINEST(ISUB,NSSEVENTS,19+ICOV), ICOV = 1,NCOVA.

          IF(NCOVA .GT. 0) THEN
           DO ICOV = 1,NCOVA
            NENTRY = NENTRY+1
            DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,19+ICOV)
           END DO
          ENDIF

          WRITE(33,1) (DOSELINES(J),J=1,NENTRY)

          NSSEVENTS = NSSEVENTS + 1

         ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(ISAME .EQ. 1)  CONDITION.


        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(NSSEVENTS .LE. NSST(ISUB))  CONDITION.


	 ENDIF

C  THE ABOVE ENDIF IS FOR THE IF(TIME .GE. TIMADD*(NRESET+1)) CONDITION.



C  CHECK TO SEE IF ANY BOLUS TIMES = TIME.


	DO IDRUG = 1,NDRUG

C  IF THE CURRENT INDEX FOR THIS BOLUS IS MORE THAN THE NO.
C  OF ENTRIES IN THE CORRESPONDING ARRAY, IT MEANS THAT THERE ARE NO
C  MORE BOLUS VALUES FOR THIS DRUG. IN THAT CASE, SET ITS TIME TO -99.
C  OTHERWISE, SET ITS TIME TO THE NEXT TIME IN THE ARRAY.



	 IF(INDBOL(IDRUG) .GT. NTIMBOL(ISUB,IDRUG)) TIMEB = -99.D0

	 IF(INDBOL(IDRUG) .LE. NTIMBOL(ISUB,IDRUG)) THEN
	  TIMEB = TIMBOL(ISUB,IDRUG,INDBOL(IDRUG))
	 ENDIF

	 CALL THESAME(TIME,TIMEB,ISAME)



C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, THE TIMES ARE THE
C  "SAME" (I.E., WITHIN 1.D-10). IN THIS CASE, SET THE BOLUS VALUE FOR
C  THIS EVENT TO THE CORRESPONDING VALUE IN BOLUS, AND INCREASE THE
C  INDEX OF THE NEXT TIME BY 1. IF ISAME RETURNS AS 0, SET THE BOLUS
C  VALUE = 0.

	  IF(ISAME .EQ. 0) BOLVAL(IDRUG) = 0.D0


	  IF(ISAME .EQ. 1) THEN
	   BOLVAL(IDRUG) = BOLUS(ISUB,IDRUG,INDBOL(IDRUG))
	   INDBOL(IDRUG) = INDBOL(IDRUG) + 1
	  ENDIF


	 END DO



C  CHECK TO SEE IF ANY COVARIATE TIMES = TIME.

	DO ICOV = 1,NCOVA

C  IF THE CURRENT INDEX FOR THIS COVARIATE IS MORE THAN THE NO.
C  OF ENTRIES IN THE CORRESPONDING ARRAY, IT MEANS THAT THERE ARE NO
C  MORE COV VALUES FOR THIS COVARIATE. IN THAT CASE, SET ITS TIME TO
C  -99. OTHERWISE, SET ITS TIME TO THE NEXT TIME IN THE ARRAY.



	 IF(INDCOV(ICOV) .GT. NTIMCOV(ISUB,ICOV)) TIMEC = -99.D0

	 IF(INDCOV(ICOV) .LE. NTIMCOV(ISUB,ICOV)) THEN
	  TIMEC = TIMCOV(ISUB,ICOV,INDCOV(ICOV))
	 ENDIF

	 CALL THESAME(TIME,TIMEC,ISAME)



C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, THE TIMES ARE THE
C  "SAME" (I.E., WITHIN 1.D-10). IN THIS CASE, SET THE COVARIATE VALUE
C  FOR THIS EVENT TO THE CORRESPONDING VALUE IN COV, AND INCREASE THE
C  INDEX OF THE NEXT TIME BY 1.


        IF(ISAME .EQ. 1) THEN
         COVVAL(ICOV) = COV(ISUB,ICOV,INDCOV(ICOV))	   
         INDCOV(ICOV) = INDCOV(ICOV) + 1
        ENDIF


C  IF ISAME RETURNS AS 0, THE COV. VALUE WILL BE THE SAME AS IT WAS
C  PREVIOUSLY IF ICOVTYPE(ICOV) = 1 OR 0 (I.E., IF THIS IS A PIECEWISE
C  CONTINOUS COVARIATE). IT WILL ALSO BE THE SAME AS IT WAS PREVIOUSLY
C  IF ICOVTYPE(ICOV) = 2 (I.E., FOR A LINEARLY INTERPOLATED COVARIATE)
C  IF TIMEC = -99, OR IF ISAMERESET = 1. HERE IS WHY:

C  TIMEC = -99 --> THERE ARE NO MORE COVARIATE VALUES (SEE ABOVE).
C  IF ISAMERESET = 1, THEN THIS IS A TIME RESET POINT. AND IN THIS CASE,
C  EVEN AN INTERPOLATED COVARIATE VALUE SHOULD BE SET = ITS LAST VALUE
C  FROM BEFORE THE RESET, SINCE NO INTERPOLATION IS POSSIBLE FOR OUT OF
C  ORDER TIMES (E.G., (T,COV) = (24,400), FOLLOWED BY (T,COV) =
C  (20,1000) --> INTERPOLATED VALUE AT 0 WOULD BE:
C  (0-24)/(20-24) * (1000 - 400) + 400 = 4000, WHICH IS PREPOSTEROUS).


	IF(ISAME .EQ. 0) THEN

C  SET INTERP = 1, WHICH MEANS THAT THIS COVARIATE VALUE SHOULD BE
C  INTERPOLATED FROM THE TWO SURROUNDING COVARIATE VALUES (WHICH HAVE
C  BEEN EXPLICITLY SPECIFIED IN THE BLOCK FORMAT FILE). CHANGE INTERP
C  TO 0 IF THIS IS NOT AN INTERPOLATED COVARIATE (ICOVTYPE(ICOV) = 1
C  OR 0) OR IF THIS IS AN INTERPOLATED COVARIATE BUT THERE ARE NO MORE
C  COVARIATE VALUES FOR THIS COVARIATE (TIMEC = -99) OR IF THIS IS A
C  TIME RESET VALUE (ISAMERESET = 1), OR IF THE CURRENT COVARIATE TIME

C  (WHICH WOULD BE USED IN THE INTERPOLATION) IS AT OR PAST THE NEXT
C  TIME RESET.


	 INTERP = 1

	 IF(ICOVTYPE(ICOV) .EQ. 1 .OR. ICOVTYPE(ICOV) .EQ. 0)
     1    INTERP = 0
	 IF(TIMEC .LE. -99) INTERP = 0
	 IF(ISAMERESET .EQ. 1) INTERP = 0
	 IF(TIMEC .GE. TIMERESET + TIMADD) INTERP = 0


C  IF INTERP = 1:

C  NOTE THAT INDCOV(ICOV) MUST BE .GE. 2 UNLESS THE USER HAS MADE A
C  MISTAKE SINCE THE FIRST TIME (TIME = 0) IS SUPPOSED TO HAVE ALL
C  COVARIATE VALUES SPECIFIED, WHICH MEANS THE FIRST TIME THROUGH THIS
C  PART OF THE CODE ABOVE, INDCOV(ICOV) WAS INCREASED BY 1 (FROM ITS
C  ORIGINAL VALUE OF 1). IF THIS IS NOT TRUE, WRITE A MESSAGE TO THE
C  USER AND STOP.


	 IF(INDCOV(ICOV) .EQ. 1) THEN



	  WRITE(*,111) ICOV
  111     FORMAT(/' THERE IS A MISTAKE IN THE BLOCK FORMAT PATIENT'/
     1' DATA FILE. THE FIRST VALUE FOR COVARIATE NO. ',I2,' WAS NOT'/
     2' SPECIFIED AT THE ORIGINAL TIME = 0, AS IS REQUIRED. PLEASE'/
     3' FIX THIS ERROR AND RERUN THE PROGRAM. '//)
	  WRITE(*,401) ISUB,SUBID
  401   FORMAT(/' NOTE: THE ID FOR SUBJECT NO. ',I4,' IS ',A11/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,111) ICOV                  
         WRITE(47,401) ISUB,SUBID
        CLOSE(47)



	  CALL PAUSE
	  STOP




	 ENDIF


	 CLAST = COV(ISUB,ICOV,INDCOV(ICOV)-1)


	 IF(INTERP .EQ. 0) COVVAL(ICOV) = CLAST

	 IF(INTERP .EQ. 1) THEN


C  NOTE: THE LAST COV. VALUE WAS CLAST WHICH OCCURRED AT TLAST. THE NEXT

C  COV VALUE IS CNEXT WHICH OCCURS AT TNEXT. SO ESTABLISH THE
C  LINEARLY INTERPOLATED VALUE FOR THIS TIME, TIME. NOTE THAT THE TIMES,

C  TLAST AND TNEXT, MUST BE RECAST AS THEIR ACTUAL TIMES (BY REDUCING
C  THEM BY TIMERESET) FIRST.

	  TLAST = TIMCOV(ISUB,ICOV,INDCOV(ICOV)-1) - TIMERESET

	  CNEXT = COV(ISUB,ICOV,INDCOV(ICOV))
	  TNEXT = TIMCOV(ISUB,ICOV,INDCOV(ICOV)) - TIMERESET
	  TIMEREAL = TIME - TIMERESET
	  COVVAL(ICOV) = (TIMEREAL-TLAST)/(TNEXT-TLAST) * (CNEXT-CLAST)
     1     + CLAST
	 ENDIF

	ENDIF


C  THE ABOVE ENDIF IS FOR THE  IF(ISAME .EQ. 0)  CONDITION.



	 END DO


C  THE ABOVE END DO IS FOR THE  DO ICOV = 1,NCOVA  LOOP.


C  CHECK TO SEE IF ANY IV TIMES = TIME.

	DO IDRUG = 1,NDRUG

C  IF THE CURRENT INDEX FOR THIS IV IS MORE THAN THE NO.
C  OF ENTRIES IN THE CORRESPONDING ARRAY, IT MEANS THAT THERE ARE NO
C  MORE IV VALUES FOR THIS DRUG. IN THAT CASE, SET ITS TIME TO -99.
C  OTHERWISE, SET ITS TIME TO THE NEXT TIME IN THE ARRAY.

	 IF(INDIV(IDRUG) .GT. NTIMIV(ISUB,IDRUG)) TIMEI = -99.D0

	 IF(INDIV(IDRUG) .LE. NTIMIV(ISUB,IDRUG)) THEN
	  TIMEI = TIMIV(ISUB,IDRUG,INDIV(IDRUG))
	 ENDIF

	 CALL THESAME(TIME,TIMEI,ISAME)



C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, THE TIMES ARE THE
C  "SAME" (I.E., WITHIN 1.D-10). IN THIS CASE, SET THE IV VALUE FOR
C  THIS EVENT TO THE CORRESPONDING VALUE IN RATEIV, AND INCREASE THE
C  INDEX OF THE NEXT TIME BY 1. IF ISAME RETURNS AS 0, THE IV VALUE
C  WILL REMAIN WHAT IT WAS PREVIOUSLY.



	  IF(ISAME .EQ. 1) THEN
	   XIVVAL(IDRUG) = RATEIV(ISUB,IDRUG,INDIV(IDRUG))
	   INDIV(IDRUG) = INDIV(IDRUG) + 1

	  ENDIF

	 END DO


C  PUT THE ACTUAL TIME (I.E., TIME - TIMERESET) INTO THE 1ST ENTRY FOR
C  THIS ROW. THEN PUT IN THE IV/BOLUS VALUES FOR EACH OF THE NDRUG DRUGS
C  IN ORDER; THEN ALL ADDITIONAL COV. VALUES.

	 DOSELINE(ITIM,1) = TIME - TIMERESET
	 NENTRY = 1

	 DO IDRUG = 1,NDRUG
	  NENTRY = NENTRY+1
	  DOSELINE(ITIM,NENTRY) = XIVVAL(IDRUG)
	  NENTRY = NENTRY+1
	  DOSELINE(ITIM,NENTRY) = BOLVAL(IDRUG)
	 END DO

	 DO ICOV = 1,NCOVA
	  NENTRY = NENTRY+1
	  DOSELINE(ITIM,NENTRY) = COVVAL(ICOV)
	 END DO

       WRITE(33,1) (DOSELINE(ITIM,J),J=1,NENTRY)
    1  FORMAT(43(G19.9,1X))

 1000   CONTINUE

C  THE ABOVE LABEL IS THE END OF THE  DO 1000 ITIM = 1,NTIMI  LOOP.



C  NOW CHECK TO SEE IF THE DOSAGE REGIMEN ENDS WITH ONE OR MORE STEADY
C  STATE EVENTS. NOTE THAT THERE ARE NSST(ISUB) STEADY STATE EVENTS,
C  AND NSSEVENTS - 1 OF THESE HAVE BEEN WRITTEN TO THE WORKING COPY FILE

C  SO FAR. 

 1010   CONTINUE


        IF(NSSEVENTS .LE. NSST(ISUB)) THEN


C  THE NEXT STEADY STATE DOSE EVENT OCCURS AFTER RESET NO.
C  DOSELINEST(ISUB,NSSEVENTS,100). 

C  FILL IN THE ENTRIES TO DOSELINE FOR THE STEADY STATE DOSE AT THE
C  BEGINNING OF THIS DOSE RESET.


C  THE FIRST ENTRY IN DOSELINST IS TIMEVENT = THE NEGATIVE OF THE
C  INTERDOSE INTERVAL.

          DOSELINES(1) = DOSELINEST(ISUB,NSSEVENTS,1)
          NENTRY = 1

C  FOR EACH DRUG, THE IV AND TOTAL VALUES ARE ALREADY STORED INTO
C  DOSELINEST(ISUB,NSSEVENTS,2*I) AND DOSELINEST(ISUB,NSSEVENTS,2*I+1),

C  I=1,NDRUG.

          DO IDRUG = 1,NDRUG
           NENTRY = NENTRY+1
           DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,2*IDRUG)

           NENTRY = NENTRY+1
           DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,2*IDRUG+1)
          END DO


C  FOR EACH COVARIATE, IF ANY, THE VALUES ARE STORED INTO
C  DOSELINEST(ISUB,NSSEVENTS,19+ICOV), ICOV = 1,NCOVA.

          IF(NCOVA .GT. 0) THEN
           DO ICOV = 1,NCOVA
            NENTRY = NENTRY+1
            DOSELINES(NENTRY) = DOSELINEST(ISUB,NSSEVENTS,19+ICOV)
           END DO
          ENDIF

          WRITE(33,1) (DOSELINES(J),J=1,NENTRY)

          NSSEVENTS = NSSEVENTS + 1
 
          GO TO 1010

        ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(NSSEVENTS .LE. NSST(ISUB))  CONDITION.



C----------------- WRITE THE DOSE EVENTS ABOVE -------------------------


C----------------- WRITE THE OBSERVATION EVENTS BELOW ------------------




	WRITE(33,106) NOUT
  106   FORMAT(/'     ',I1,' ... NO. OF TOTAL OUTPUT EQUATIONS')


C  EACH SET OF TIMES FOR EACH OUTPUT EQUATION, TIMOUT(ISUB,IOUT,I),
C  I = 1,NTIMOUT(ISUB,IOUT), IS IN ORDER, BUT EACH TIME HAS ADDED
C  TO IT TIMADD*NRESET, WHERE NRESET IS THE NO. OF TIME RESETS UP TO
C  AND TIME.

C  CALL FIXOUTIM TO OBTAIN NTIMORD, TIMORD, AND BLOCKOUT, WHERE
C  NTIMORD IS THE TOTAL NO. OF UNIQUE TIMES TO BE PUT INTO THE
C  OBSERVATION BLOCK; TIMORD(.) IS THE ORDERED ACTUAL TIMES (I.E., EACH
C  OF THE TIMES IN TIMOUT(.,.,.) HAS BEEN REDUCED BY TIMADD*NRESET - SEE
C  ABOVE), EXCEPT THAT EACH TIME OF 0 IS NOT ORDERED (IT INDICATES THE
C  NEXT TIME RESET) FOR THE OBSERVATION BLOCK; AND BLOCKOUT IS THE

C  CORRESPONDING ARRAY OF OBSERVED VALUES FOR THE NOUT OUTPUT EQUATIONS
C  AT THE TIMES IN TIMORD.


	CALL FIXOUTIM(MAXSUB,ISUB,SUBID,NOUT,NTIMOUT,TIMOUT,OUT,NTIMORD,
     1   TIMORD,BLOCKOUT,TIMADD)

      	WRITE(33,62) NTIMORD
   62   FORMAT('   ',I3,' ... NO. OF OBSERVED VALUE TIMES')

	DO I = 1,NTIMORD
	 WRITE(33,63) TIMORD(I),(BLOCKOUT(I,J),J=1,NOUT)
   63    FORMAT(7(G16.8,1X))

	END DO



C----------------- WRITE THE OBSERVATION EVENTS ABOVE ------------------



C----------------- WRITE THE BOTTOM OF FILE BELOW ----------------------

	WRITE(33,303)
  303   FORMAT(/' COVARIATE NAMES AND VALUES (1ST, LAST, AND MEAN) FOLLO
     1W:')

C  FOR NOW, THE MEAN VALUE OF EACH COV. WILL BE -99 ... UNTIL WE DECIDE
C  WHAT KIND OF MEAN WE WANT. E.G., IF A COV. = 100 AT T=0 AND
C  200 AT T = 10 AND 300 AT T = 11, WHICH IS THE LAST TIME, DO WE
C  SIMPLY AVERAGE 100,200, AND 300, OR DO WE TAKE A WEIGHTED MEAN
C  WHICH WOULD BE (100*10 + 200*1 + 300*0)/11, OR SOMETHING ELSE

	XMEAN = -99

	DO ICOV = 1,NCOVA
   	 WRITE(33,304) COVNAME(ICOV),COV(ISUB,ICOV,1),
     1    COV(ISUB,ICOV,NTIMCOV(ISUB,ICOV)),XMEAN
	END DO
  304   FORMAT(A11,3X,3(F15.5,1X))

	WRITE(33,306)
  306   FORMAT(/'ASSAY COEFFICIENTS FOLLOW, ONE SET FOR EACH OUTPUT EQUA
     1TION:')

        DO K = 1,NOUT
         WRITE(33,3061) (CSUB(ISUB,I,K),I=1,4)
        END DO

 3061   FORMAT(4(F17.8,1X))


C----------------- WRITE THE BOTTOM OF FILE ABOVE ----------------------

	CLOSE(33)

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE THESAME(X1,X2,ISAME)


	IMPLICIT REAL*8(A-H,O-Z)

C  THIS ROUTINE CHECKS TO SEE IF X1 AND X2 ARE VIRTUALLY THE SAME 
C  VALUES (I.E., IF THEY ARE WITHIN 1.D-10 OF EACH OTHER). IF SO,
C  ISAME RETURNS AS 1; IF NOT ISAME RETURNS AS 0.

	ISAME = 0

	XDEL = DABS(X1-X2)
	IF(XDEL .LE. 1.D-10) ISAME = 1
	
	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETID(SUBID)
	CHARACTER SUBID*11,SUB*11

C  THIS ROUTINE IS CALLED TO REPLACE SUBID (WHICH HAS 11 CHARACTERS IN

C  IT) WITH THE CHARACTERS UP TO BUT NOT INCLUDING THE 1ST COMMA.


	SUB = '           '
	DO I = 1,11
	 IF(SUBID(I:I) .NE. ',') SUB(I:I) = SUBID(I:I)	 
	 IF(SUBID(I:I) .EQ. ',') GO TO 10
	END DO



   10   SUBID = SUB
		
	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE TIMESET(MAXSUB,ISUB,SUBID,NTIMALL,TIMALL,NTIMI,
     1    TIMI)

      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION TIMALL(MAXSUB,72000),NTIMALL(MAXSUB),TIMI(72000),
     1   TIM(72000)
	CHARACTER SUBID*11



C  THIS ROUTINE IS CALLED BY READBLOCK2, TO ORDER ALL THE NTIMALL(ISUB) 
C  TIMES IN TIMALL(ISUB,.), ELIMINATING DUPLICATE TIMES.

C  RETURNED TO READBLOCK2 IS THE VECTOR TIMI, WITH NTIMI TIMES, 
C  ESTABLISHED AS INDICATED ABOVE.


C  THE FIRST TIME IS TIMALL(ISUB,1) AND SHOULD BE 0. CHECK THIS FIRST.

	CALL THESAME(TIMALL(ISUB,1),0.D0,ISAME)

C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, THE TIMES ARE THE 
C  "SAME" (I.E., WITHIN 1.D-10). OTHERWISE, THE TIMES ARE NOT THE 
C  SAME AND ISAME = 0.

C  STARTING WITH BESTDOS103A.FOR, DO NOT CHECK THAT THE FIRST DOSE TIME
C  IN EACH PATIENT IS 0, SINCE THE FIRST TIME MAY BE NEGATIVE (WHICH 

C  SIGNIFIES THE DOSAGE REGIMEN BEGINS WITH A STEADY STATE OF DOSES).


C     IF(ISAME .EQ. 0) THEN

C	 WRITE(*,1) ISUB,TIMALL(ISUB,1)
C   1    FORMAT(/' THE FIRST TIME IN THE DOSAGE BLOCK FOR SUBJECT ',I5,
C    1' IS NOT 0; IT IS ',G14.5//
C    2' THIS IS NOT ALLOWED. PLEASE SET THE FIRST TIME IN THE DOSAGE'/
C    3' BLOCKS FOR ALL SUBJECTS TO BE 0, AND RERUN THE PROGRAM.')
C	WRITE(*,401) ISUB,SUBID
C 401    FORMAT(/' NOTE: THE ID FOR SUBJECT NO. ',I4,' IS ',A11/)
C	CALL PAUSE
C	STOP
C    ENDIF



C  CALL SUBROUTINE PUTORDER TO ORDER THE NTIMALL(ISUB) VALUES IN 

C  TIMALL(ISUB,.).

	DO I = 1,NTIMALL(ISUB)
	 TIM(I) = TIMALL(ISUB,I)
	END DO

	CALL PUTORDER(NTIMALL(ISUB),TIM)


C  THE NTIMALL(ISUB) VALUES ARE NOW ORDERED IN TIM.




C  THE CODE BELOW BELOW WILL REMOVE DUPLICATE TIMES.


	TIMELAST = -1.D39

	NTIMI = 0

	DO I = 1,NTIMALL(ISUB)

	 TIME = TIM(I)
	 CALL THESAME(TIME,TIMELAST,ISAME)

C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, TIME = TIMELAST (OR AT
C  LEAST, THEY ARE WITHIN 1.D-10), AND THIS TIME CAN BE IGNORED SINCE IT
C  WAS ALREADY PUT INTO TIMI (ACTUALLY THE VALUE REDUCED BY TIMERESET)
C  BY A PREVIOUS TIME.

	 IF(ISAME .EQ. 1) GO TO 30

C  TO GET HERE, ISAME = 0, WHICH MEANS THIS IS A NEW TIME. SO PUT
C  TIME INTO TIMI. THEN SET TIMELAST = TIME AND CONTINUE THE LOOP.

	  NTIMI = NTIMI + 1

	  TIMI(NTIMI) = TIME
	  TIMELAST = TIME

   30    CONTINUE

	END DO




	RETURN
	END

C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE PUTORDER(NX,XX)

C  SUBROUTINE PUTORDER IS CALLED BY SUBROUTINE TIMESET. IT INPUTS XX, A
C  VECTOR OF SIZE, NX, AND RETURNS RETURNS XX, BUT WITH THE VALUES 
C  ORDERED FROM LOW TO HIGH.

      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION XX(72000),Y(72000),IZ(72000),IZZ(72000)


C  ORDER THE NX VALUES IN X AS FOLLOWS:

C  PUT THE NX VALUES INTO VECTOR Y TO START.
C  INITIALIZE VECTOR IZ TO BE -99 IN ALL ITS NX LOCATIONS. THEN, FOR
C  EXAMPLE, IF ENTRY 17 IS THE SMALLEST VALUE IN Y, IZ(17) WILL BE 
C  SET = 0, AND THE PROGRAM WILL KNOW NOT TO CHECK THE 17TH ENTRY 
C  AGAIN (SINCE IT HAS ALREADY BEEN SELECTED). IF THE NEXT SMALLEST 
C  ENTRY HAS INDEX 37, THEN IZ(37) WILL BE SET = 0, ETC. 


C  NOTE THAT IZZ WILL BE THE ARRAY WHICH CONTAINS THE ACTUAL ORDERING.
C  IN THE EXAMPLE ABOVE, IZZ(1) = 17, IZZ(2) = 37. IT WILL BE EASY TO 


C  ASSIGN ORDERED VALUES BACK INTO XX USING IZZ. IN THE EXAMPLE ABOVE, 
C  XX(1) = Y(IZZ(1)) = Y(17), XX(2) = Y(IZZ(2)) = Y(37), ETC.

	 DO I=1,NX

	  Y(I) = XX(I)
	  IZ(I) = -99
	 END DO


	 DO IPLACE = 1,NX

C  PUT THE NEXT LOWEST VALUE OF Y INTO THE IPLACE LOCATION OF
C  IZZ.


C  TEMP IS THE RUNNING VALUE OF THE NEXT VALUE TO BE PLACED INTO Y.
C  INITIALIZE IT TO BE VERY HIGH VALUE SO THE FIRST VALUE Y WILL BE 
C  SURE TO BE LOWER THAN IT IS.

	  TEMP = 1.D50

	  DO I=1,NX

	   IF(Y(I) .LT. TEMP .AND. IZ(I) .EQ. -99) THEN
	    TEMP = Y(I)
	    IND = I
	   ENDIF
	  END DO

C  AT THIS POINT, IND IS THE INDEX OF THE SMALLEST REMAINING VALUE
C  (TEMP) IN Y. PUT THIS INFORMATION INTO IZZ. ALSO,

C  SET IZ(IND) = 0 --> THE IND LOCATION IN Y HAS BEEN USED.

	  IZZ(IPLACE) = IND
	  IZ(IND) = 0

	 END DO	


C  AT THIS POINT IZZ CONTAINS THE ORDERED INDICES (LOW TO HIGH) OF Y.

C  USE THIS TO RE-ESTABLISH X TO BE ORDERED LOW TO HIGH.
	
	 DO I = 1,NX

	  XX(I) = Y(IZZ(I))
	 END DO

	
	RETURN
	END

C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE FIXOUTIM(MAXSUB,ISUB,SUBID,NOUT,NTIMOUT,TIMOUT,OUT,
     1   NTIMORD,TIMORD,BLOCKOUT,TIMADD)


       IMPLICIT REAL*8(A-H,O-Z)

       PARAMETER(MAXNUMEQ=7)
	
	DIMENSION TIMOUT(MAXSUB,MAXNUMEQ,650),NTIMOUT(MAXSUB,MAXNUMEQ),
     1 IENTRY(MAXNUMEQ),OUT(MAXSUB,MAXNUMEQ,650),TIMORD(3900),
     2 BLOCKOUT(3900,MAXNUMEQ)


	CHARACTER SUBID*11,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  FIXOUTIM IS CALLED BY WRITEDOS TO ORDER THE OUTPUT TIMES AMONG ALL 
C  THE NOUT OUTPUT EQUATIONS. NOTE THAT EACH OF THE TIMES CURRENTLY IN
C  TIMOUT HAS BEEN INCREASE BY TIMERESET = TIMADD*NRESET, WHERE NRESET
C  IS THE NO. OF TIME RESETS UP TO AND INCLUDING THAT TIME (THIS WAS 
C  DONE IN SUBROUTINE READBLOCK2).


C  RETURNED TO SUBROUTINE WRITEDOS ARE:

C  NTIMORD = NO. OF TIME VALUES IN TIMORD.

C  TIMORD(I), I=1,NTIMORD = THE ORDERED SET OF TIMES (EXCEPT FOR 0'S
C   WHICH INDICATE A TIME RESET) OVER ALL THE NOUT TIME ARRAYS.

C  BLOCKOUT(I,J) = OBSERVED VALUE FOR IOUTPUT EQUATION J, FOR THE TIME
C   VALUE, TIMORD(I), I=1,NEXT; J = I,NOUT.


C  NOTE THAT EACH OF THE TIME ARRAYS, TIMOUT(ISUB,IOUT,.) HAS ITS OWN
C  VALUES IN ORDER (THEY WERE FILLED IN ORDER IN READBLOCK2). NOW, 
C  ESTABLISH THE ARRAY, TIMORD, WHICH HAS THE ORDERED SET OF
C  TIMES OVER ALL THE NOUT TIME ARRAYS. ALSO, REDUCE EACH TIME BY 
C  TIMRESET = NRESET*TIMADD TO RETURN EACH TIME TO ITS ORIGINAL VALUE. 
C  NOTE THAT THIS WILL HAVE THE EFFECT OF SETTING TO 0 THE TIMES WHICH 
C  ARE THE TIME RESET POINTS (THEIR ACCOMPANYING OUTPUT VALUES WILL
C  OF COURSE BE SET TO -99).

C  INITIALIZE THE NEXT TIME TO BE PUT INTO TIMORD TO BE A LARGE NO.
C  AND INITIALIZE THE INDEX OF THE NEXT ENTRY IN EACH OF THE TIMOUT
C  ARRAYS TO BE 1. ALSO INITIALIZE INEXT TO BE 1. IT WILL BE THE 
C  RUNNING INDEX OF THE NEXT ENTRY TO BE PUT INTO TIMORD.

	DO IOUT = 1,NOUT

	 IENTRY(IOUT) = 1
	END DO

	INEXT = 1

   20	TIMENEXT = 1.D50

C  SET IANOTHER = 0. IF IT STAYS 0, THERE ARE NO MORE TIMES IN
C  ANY OF THE ARRAYS.

	 IANOTHER = 0


        DO IOUT	= 1,NOUT

C  FOR OUTPUT EQUATION IOUT, IF IENTRY(IOUT) .LE. THE NO. OF ENTRIES
C  IN THE TIME ARRAY FOR IOUT, THEN THIS ENTRY IS EQUATION IOUT'S
C  CANDIDATE FOR THE NEXT LOWEST TIME.


	 IF(IENTRY(IOUT) .LE. NTIMOUT(ISUB,IOUT)) THEN
	  IANOTHER = 1

	  IF(TIMOUT(ISUB,IOUT,IENTRY(IOUT)) .LE. TIMENEXT) 

     1     TIMENEXT = TIMOUT(ISUB,IOUT,IENTRY(IOUT))
	 ENDIF


	END DO

C  IF IANOTHER = 0, ALL TIME ARRAY, AND CORRESPONDING OBSERVED, VALUES 
C  HAVE BEEN STORED, SO GO TO 100 TO RECAST TIMORD BEFORE RETURNING.

	IF(IANOTHER .EQ. 0) GO TO 100


C  AT THIS POINT, TIMENEXT IS THE NEXT LOWEST TIME OVER ALL THE NOUT
C  TIMOUT ARRAYS. PUT IT INTO TIMORD, AND PUT THE CORRESPONDING ENTRIES
C  FOR EACH OF THE NOUT OUTPUT EQUATIONS INTO THE ARRAY BLOCKOUT. ALSO,
C  INCREASE THE ENTRY NO. FOR THE TIME ARRAY(S) WHICH HAD THIS TIME. 
C  BUT CHECK THAT THE NO. OF ENTRIES INTO TIMORD IS NOT > THE MAX, 3900. 
C  IF IT IS, STOP.

	IF(INEXT .GT. 3900) THEN

	 WRITE(*,1)
    1  FORMAT(/' THE TOTAL NO. OF OBSERVATION TIMES IS GREATER THAN'/
     1' THE MAXIMUM ALLOWABLE VALUE OF 3900 (SUBROUTINE FIXOUTIM).'/
     2' RERUN THE PROGRAM AFTER REDUCING THE NO. OF OBS. TIMES.'/)
	 WRITE(*,401) ISUB,SUBID
  401  FORMAT(/' NOTE: THE ID FOR SUBJECT NO. ',I4,' IS ',A11/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,1)                   
         WRITE(47,401) ISUB,SUBID
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF

	TIMORD(INEXT) = TIMENEXT

        DO IOUT	= 1,NOUT

	  BLOCKOUT(INEXT,IOUT) = -99.D0
	  CALL THESAME(TIMENEXT,TIMOUT(ISUB,IOUT,IENTRY(IOUT)),ISAME)

	  IF(ISAME .EQ. 1) THEN
	   BLOCKOUT(INEXT,IOUT) = OUT(ISUB,IOUT,IENTRY(IOUT))
	   IENTRY(IOUT) = IENTRY(IOUT) + 1
	  ENDIF

	END DO



	INEXT = INEXT + 1	

	GO TO 20
 

  100   NTIMORD = INEXT - 1


C  NOW, RECAST TIMORD TO BE THE CORRECT TIME VALUES. RECALL THAT,
C  CURRENTLY, EACH TIME HAS NRESET*TIMADD ADDED TO ITS VALUE WHERE 
C  NRESET IS THE NO. OF TIME RESET 0'S UP TO AND INCLUDING THAT TIME 
C  VALUE.

C  INITIALIZE NRESET = 0. THIS IS THE RUNNING NUMBER OF TIME RESETS 
C  THAT HAVE OCCURED. ALSO INITIALIZE TIMERESET AS THE CURRENT AMOUNT 
C  OF TIME TO SUBTRACT TO DO THE RECASTING.

	NRESET = 0
	TIMERESET = TIMADD*NRESET

	DO I = 1,NTIMORD
	 CALL THESAME(TIMORD(I),TIMADD*(NRESET+1),ISAME)	 	
	 
	 IF(ISAME .EQ. 1) THEN
	  NRESET = NRESET + 1
	  TIMERESET = TIMADD*NRESET
	 ENDIF

	 TIMORD(I) = TIMORD(I) - TIMERESET
	END DO


	RETURN

	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETMAXTIM(NCOVA,TIMAX)



	IMPLICIT REAL*8(A-H,O-Z)
	CHARACTER READLINE*1000


C  THIS SUBROUTINE IS CALLED BY READBLOCK2 TO GET TIMAX, THE MAXIMUM TIME 
C  OVER ALL SUBJECTS IN FILE 66. THIS MAXIMUM TIME INCLUDES THE ENDING
C  TIME FOR ALL IV RATES.

C  GO THROUGH ALL THE ROWS OF THE BLOCK FORMAT FILE. READ THE EVENT 
C  TIMES IN ENTRY 3. IF THE ROW IS AN IV ROW, ADD THIS VALUE TO THE 
C  DURATION TIME IN ENTRY 4. THEN UPDATE TIMAX IF THIS TOTAL TIME IS
C  > TIMAX, WHICH IS INITIALIZED BELOW TO BE NEGATIVE.


	TIMAX = -1.D0


   10   READ(66,1,IOSTAT=IEND) READLINE
    1   FORMAT(A1000)
	IF(IEND .LT. 0) RETURN

	IF(READLINE(1:1) .EQ. '#' .OR. READLINE(1:2) .EQ. '"#') GO TO 10

	 CALL AFTERCOMMA(NCOVA,READLINE,2)
	 BACKSPACE(57)
	 READ(57,*) TIMEVENT
	 CLOSE(57)


	 CALL AFTERCOMMA(NCOVA,READLINE,3)
	 BACKSPACE(57)

	 READ(57,*,ERR=15) TIMDUR
	 GO TO 20	 	
   15    TIMDUR = 0.D0
   20    TIME = TIMEVENT + TIMDUR
	 CLOSE(57)

	 IF(TIMAX .LT. TIME) TIMAX = TIME
	 GO TO 10


	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETCHAR2(JSUB,CHARSUB)

	CHARACTER CHARSUB*3
	CHARACTER*1 B,C,D

C  THIS ROUTINE, CALLED BY READBLOCK2, INPUTS THE INTEGER JSUB
C  (BETWEEN 1 AND 999), AND OUTPUTS THE 3-CHARACTER EQUIVALENT, CHARSUB.

	ILEFT = JSUB

	I3 = ILEFT/100
	ILEFT = ILEFT - I3*100
	I2 = ILEFT/10
 	ILEFT = ILEFT - I2*10
	I1 = ILEFT

C  CONVERT THIS TO THE CHARACTER EQUIVALENT. 

	IF(I3 .EQ. 1) B='1'
	IF(I3 .EQ. 2) B='2'
	IF(I3 .EQ. 3) B='3'
	IF(I3 .EQ. 4) B='4'
	IF(I3 .EQ. 5) B='5'
	IF(I3 .EQ. 6) B='6'
	IF(I3 .EQ. 7) B='7'
	IF(I3 .EQ. 8) B='8'
	IF(I3 .EQ. 9) B='9'
	IF(I3 .EQ. 0) B='0'

	IF(I2 .EQ. 1) C='1'
	IF(I2 .EQ. 2) C='2'
	IF(I2 .EQ. 3) C='3'

	IF(I2 .EQ. 4) C='4'
	IF(I2 .EQ. 5) C='5'
	IF(I2 .EQ. 6) C='6'

	IF(I2 .EQ. 7) C='7'
	IF(I2 .EQ. 8) C='8'
	IF(I2 .EQ. 9) C='9'
	IF(I2 .EQ. 0) C='0'


	IF(I1 .EQ. 1) D='1'
	IF(I1 .EQ. 2) D='2'

	IF(I1 .EQ. 3) D='3'
	IF(I1 .EQ. 4) D='4'
	IF(I1 .EQ. 5) D='5'
	IF(I1 .EQ. 6) D='6'
	IF(I1 .EQ. 7) D='7'
	IF(I1 .EQ. 8) D='8'
	IF(I1 .EQ. 9) D='9'
	IF(I1 .EQ. 0) D='0'


	CHARSUB = B//C//D

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        SUBROUTINE NEWCSV

C  NEWCSV IS CALLED BY MAIN TO CONVERT THE .CSV FILE IN FILE 77 TO
C  A NEW .CSV FILE IN FILE 67, WITH ALL MISSING VALUE DOTS CHANGED TO
C  n's. THIS CODE IS BASED ON THE STAND-A-LONE PROGRAM NEWCSV.FOR.

C  IN PARTICULAR, THE FOLLOWING SEQUENCES WILL BE REPLACED AS SHOWN:


C   ,.,  WILL BE REPLACED BY  ,n,
C   ,.   WILL BE REPLACED BY  ,n  <-- THIS OCCURS AT END OF LINES.


C  NOTE THAT THE SECOND SEQUENCE ABOVE IS COMMA/DOT/SPACE, NOT JUST
C  COMMA/DOT SINCE WE DON'T WANT ,.35  REPLACED BY ,n35, FOR EXAMPLE.

        IMPLICIT REAL*8(A-H,O-Z)
        CHARACTER READLINE*1000


C  WRITE EACH LINE OF FILE 77 TO FILE 67, BUT REPLACE ALL MISSING VALUE
C  DOTS WITH n's.       

   10   READ(77,4,IOSTAT=IEND) READLINE
    4   FORMAT(A1000)
        IF(IEND .LT. 0) GO TO 100

C  FOR THIS LINE, READLINE, FIND IENDL, THE LAST CHARACTER WHICH IS NOT
C  BLANK. THEN ONLY CHARACTERS 1:IENDL WILL BE WRITTEN TO FILEOUT.

        DO IENDL = 1000,1,-1
         IF(READLINE(IENDL:IENDL) .NE. ' ') GO TO 20
        END DO


   20   CONTINUE


C  BEFORE WRITING READLINE(1:IENDL) TO FILE 22, GO THROUGH THE LINE AND
C  REPLACE ANY DOTS WHICH REPRESENT MISSING VALUES WITH n's.

C  NOTE THAT, AS EXPLAINED ABOVE, THIS MEANS REPLACING AS FOLLOWS:
C   ,.,  WILL BE REPLACED BY  ,n,
C   ,.   WILL BE REPLACED BY  ,n  <-- THIS OCCURS AT END OF LINES.



        DO I = 1,IENDL-2
         IF(READLINE(I:I+2) .EQ. ',.,') READLINE(I:I+2) = ',n,'


        END DO

        IF(READLINE(IENDL-1:IENDL) .EQ. ',.') 
     1   READLINE(IENDL-1:IENDL) = ',n'
      

C  CANNOT USE WRITE(67,4) READLINE(1:IENDL) SINCE, FOR SOME REASON,
C  WRITING LIKE THIS "RIGHT JUSTIFIES" THE CHARACTERS AT THE END

C  OF THE A1000 FORMAT. INSTEAD MUST WRITE (67,__) READLINE, WHERE
C  THE FORMAT IS DETERMINED BY THE LAST NON-BLANK CHARACTER (IENDL)
C  IN READLINE.

	IF(IENDL .LE. 26) THEN
	 WRITE(67,26) READLINE
   26    FORMAT(A26)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 51) THEN
	 WRITE(67,51) READLINE
   51    FORMAT(A51)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 76) THEN
	 WRITE(67,76) READLINE
   76    FORMAT(A76)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 101) THEN
	 WRITE(67,101) READLINE
  101    FORMAT(A101)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 126) THEN
	 WRITE(67,126) READLINE
  126    FORMAT(A126)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 151) THEN
	 WRITE(67,151) READLINE
  151    FORMAT(A151)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 176) THEN
	 WRITE(67,176) READLINE
  176    FORMAT(A176)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 201) THEN
	 WRITE(67,201) READLINE
  201    FORMAT(A201)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 226) THEN


	 WRITE(67,226) READLINE
  226    FORMAT(A226)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 251) THEN
	 WRITE(67,251) READLINE
  251    FORMAT(A251)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 276) THEN


	 WRITE(67,276) READLINE

  276    FORMAT(A276)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 301) THEN
	 WRITE(67,301) READLINE
  301    FORMAT(A301)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 326) THEN
	 WRITE(67,326) READLINE
  326    FORMAT(A326)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 351) THEN
	 WRITE(67,351) READLINE
  351    FORMAT(A351)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 376) THEN
	 WRITE(67,376) READLINE
  376    FORMAT(A376)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 401) THEN

	 WRITE(67,401) READLINE
  401    FORMAT(A401)

	 GO TO 10
	ENDIF


	IF(IENDL .LE. 426) THEN
	 WRITE(67,426) READLINE
  426    FORMAT(A426)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 451) THEN
	 WRITE(67,451) READLINE
  451    FORMAT(A451)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 476) THEN
	 WRITE(67,476) READLINE

  476    FORMAT(A476)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 501) THEN
	 WRITE(67,501) READLINE
  501    FORMAT(A501)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 526) THEN
	 WRITE(67,526) READLINE
  526    FORMAT(A526)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 551) THEN
	 WRITE(67,551) READLINE
  551    FORMAT(A551)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 576) THEN
	 WRITE(67,576) READLINE
  576    FORMAT(A576)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 601) THEN
	 WRITE(67,601) READLINE
  601    FORMAT(A601)

	 GO TO 10
	ENDIF




	IF(IENDL .LE. 626) THEN

	 WRITE(67,626) READLINE
  626    FORMAT(A626)
	 GO TO 10


	ENDIF

	IF(IENDL .LE. 651) THEN
	 WRITE(67,651) READLINE
  651    FORMAT(A651)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 676) THEN
	 WRITE(67,676) READLINE
  676    FORMAT(A676)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 701) THEN
	 WRITE(67,701) READLINE



  701    FORMAT(A701)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 726) THEN

	 WRITE(67,726) READLINE
  726    FORMAT(A726)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 751) THEN
	 WRITE(67,751) READLINE

  751    FORMAT(A751)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 776) THEN
	 WRITE(67,776) READLINE
  776    FORMAT(A776)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 801) THEN
	 WRITE(67,801) READLINE
  801    FORMAT(A801)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 826) THEN
	 WRITE(67,826) READLINE
  826    FORMAT(A826)



	 GO TO 10
	ENDIF

	IF(IENDL .LE. 851) THEN
	 WRITE(67,851) READLINE

  851    FORMAT(A851)
	 GO TO 10

	ENDIF




	IF(IENDL .LE. 876) THEN



	 WRITE(67,876) READLINE
  876    FORMAT(A876)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 901) THEN

	 WRITE(67,901) READLINE
  901    FORMAT(A901)
	 GO TO 10

	ENDIF


	IF(IENDL .LE. 926) THEN
	 WRITE(67,926) READLINE
  926    FORMAT(A926)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 951) THEN
	 WRITE(67,951) READLINE
  951    FORMAT(A951)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 976) THEN
	 WRITE(67,976) READLINE

  976    FORMAT(A976)
	 GO TO 10

	ENDIF

	WRITE(67,4) READLINE

	GO TO 10


  100   CLOSE(77)
        REWIND(67)

        RETURN
        END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE EQUIV(INUM,NAME)
 
	CHARACTER*1 A,B,C,D
	CHARACTER NAME*4
 
C  THIS SUBROUTINE, CALLED BY MAIN, INPUTS INTEGER INUM, AND RETURNS THE
C  4-CHARACTER EQUIVALENT IN NAME.
 
	I4 = INUM/1000
	ILEFT = INUM - I4*1000
	I3 = ILEFT/100
	ILEFT = ILEFT - I3*100
	I2 = ILEFT/10
 	ILEFT = ILEFT - I2*10

	I1 = ILEFT
 
C  CONVERT THIS TO THE CHARACTER EQUIVALENT.
 
	IF(I4 .EQ. 1) A='1'
	IF(I4 .EQ. 2) A='2'
	IF(I4 .EQ. 3) A='3'
	IF(I4 .EQ. 4) A='4'

	IF(I4 .EQ. 5) A='5'
	IF(I4 .EQ. 6) A='6'
	IF(I4 .EQ. 7) A='7'
	IF(I4 .EQ. 8) A='8'
	IF(I4 .EQ. 9) A='9'
	IF(I4 .EQ. 0) A='0'
 
	IF(I3 .EQ. 1) B='1'
	IF(I3 .EQ. 2) B='2'
	IF(I3 .EQ. 3) B='3'

	
      IF(I3 .EQ. 4) B='4'
	IF(I3 .EQ. 5) B='5'
	IF(I3 .EQ. 6) B='6'
	IF(I3 .EQ. 7) B='7'

	IF(I3 .EQ. 8) B='8'
	IF(I3 .EQ. 9) B='9'

	IF(I3 .EQ. 0) B='0'
 
	IF(I2 .EQ. 1) C='1'
	IF(I2 .EQ. 2) C='2'
	IF(I2 .EQ. 3) C='3'
	IF(I2 .EQ. 4) C='4'
	IF(I2 .EQ. 5) C='5'
	IF(I2 .EQ. 6) C='6'
	IF(I2 .EQ. 7) C='7'
	IF(I2 .EQ. 8) C='8'
	IF(I2 .EQ. 9) C='9'
	IF(I2 .EQ. 0) C='0'
 
	IF(I1 .EQ. 1) D='1'
	IF(I1 .EQ. 2) D='2'
	IF(I1 .EQ. 3) D='3'
	IF(I1 .EQ. 4) D='4'
	IF(I1 .EQ. 5) D='5'
	IF(I1 .EQ. 6) D='6'


	

      IF(I1 .EQ. 7) D='7'
	IF(I1 .EQ. 8) D='8'
	IF(I1 .EQ. 9) D='9'
	IF(I1 .EQ. 0) D='0'

 
	NAME = A//B//C//D
 
	RETURN
	END


C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE CONVERTCSV
      IMPLICIT REAL*8(A-H,O-Z)
      CHARACTER READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  SUBROUTINE CONVERTCSV READS FILE 87 AND WRITES SCRATCH FILE 77.
C  IF FILE 87 IS ALREADY IN THE TYPICAL "AMERICAN" .CSV FORMAT, 
C  FILE 77 IS THE SAME AS FILE 87. 

C  IF FILE 87 IS IN THE "EUROPEAN" .CSV FORMAT, WHERE SEMICOLONS
C  ARE THE FIELD SEPARATORS, AND COMMAS ARE USED TO SEPARATE THE
C  WHOLE AND FRACTIONAL PARTS OF NUMBERS, IT WILL BE WRITTEN TO
C  FILE 77 WITH THE INDICATED CHANGES BELOW.


C  FILE 87 IS AT LINE 1. READ PAST THIS LINE TO READ LINE 2 AND CHECK
C  FOR A SEMICOLON. IF ONE IS FOUND, THEN THIS IS A "EUROPEAN" VERSION OF
C  A .CSV FILE. NOTE THAT IT IS ONLY NECESSARY TO CHECK THE FIRST FEW
C  CHARACTERS OF THIS LINE - EITHER THERE WILL BE COMMAS OR SEMICOLONS.
C  IF THERE ARE BOTH COMMAS AND SEMICOLONS, SOMETHING IS WRONG WITH THE
C  FILE; IN THIS CASE, PRINT A MESSAGE TO THE USER AND STOP.
C  NOTE THAT, EVEN IN THE "EURO" VERSION, IT WILL STILL BE ASSUMED THAT
C  A DOT REPRESENTS AN UNNEEDED VALUE.

        READ(87,*)
        READ(87,4) READLINE

        ICOMMA = 0
        ISEMICOLON = 0

        DO I = 1,20
         IF(READLINE(I:I) .EQ. ',') ICOMMA = 1
         IF(READLINE(I:I) .EQ. ';') ISEMICOLON = 1
        END DO

C  IF ICOMMA = 1 AND ISEMICOLON = 0, NO CONVERSION IS NEEDED AS THIS
C  FILE IS A TYPICAL .CSV FILE. IN THIS CASE SET ICONVERT = 0.

C  IF ICOMMA = 0 AND ISEMICOLON = 1, CONVERT THIS FILE AS FOLLOWS:
C  a. CHANGE ALL COMMAS TO PERIODS; THEN
C  b. CHANGE ALL SEMICOLONS TO COMMAS.

C  IN THIS CASE, SET ICONVERT = 1.

C  IF ICOMMA = 1 AND ISEMICOLON = 1, STOP THE PROGRAM WITH A MESSAGE TO
C  THE USER.

        IF(ICOMMA .EQ. 1 .AND. ISEMICOLON .EQ. 1) THEN



         WRITE(*,121)
  121    FORMAT(/' YOUR .CSV FILE HAS BOTH COMMAS AND SEMICOLONS IN '/
     1' THE SECOND LINE. THIS IS A CONFLICT. IF YOU ARE USING THE '/
     2' "EUROPEAN" VERSION OF A .CSV FILE, WITH SEMICOLONS AS FIELD'/
     3' SEPARATORS AND COMMAS TO SEPARATE THE WHOLE AND FRACTIONAL'/
     4' PARTS OF NUMBERS, THERE SHOULD BE NO COMMAS IN THE SECOND'/
     5' LINE.'//
     6' SIMILARLY IF YOU ARE USING THE "AMERICAN" VERSION OF A .CSV'/
     7' FILE, WITH COMMAS AS FIELD SEPARATORS, AND PERIODS TO SEPARTE'/
     8' THE WHOLE AND FRACTIONAL PARTS OF NUMBERS, THERE SHOULD BE NO'/
     9' SEMICOLONS IN THE SECOND LINE.'//
     1' PLEASE CORRECT YOUR .CSV FILE AND RERUN THE PROGRAM.'//)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,121)                   
        CLOSE(47)



         CALL PAUSE
         STOP



        ENDIF


        IF(ICOMMA .EQ. 1 .AND. ISEMICOLON .EQ. 0) ICONVERT = 0


        IF(ICOMMA .EQ. 0 .AND. ISEMICOLON .EQ. 1) ICONVERT = 1      

        REWIND(87)
        OPEN(77)


C  COPY FILE 87 TO FILE 77 BUT MAKE THE INDICATED CHANGES, IF
C  ICONVERT = 1, LINE BY LINE.

   10   READ(87,4,IOSTAT=IEND) READLINE
    4   FORMAT(A1000)
        IF(IEND .LT. 0) GO TO 100

C  FOR THIS LINE, READLINE, FIND IENDL, THE LAST CHARACTER WHICH IS NOT
C  BLANK. THEN ONLY CHARACTERS 1:IENDL WILL BE WRITTEN TO FILEOUT.

        DO IENDL = 1000,1,-1
         IF(READLINE(IENDL:IENDL) .NE. ' ') GO TO 20
        END DO

   20   CONTINUE

        DO I = 1,IENDL
         IF(ICONVERT .EQ. 1) THEN
          IF(READLINE(I:I) .EQ. ',') READLINE(I:I) = '.'
          IF(READLINE(I:I) .EQ. ';') READLINE(I:I) = ','
         ENDIF

        END DO


C  CANNOT USE WRITE(77,4) READLINE(1:IENDL) SINCE, FOR SOME REASON,
C  WRITING LIKE THIS "RIGHT JUSTIFIES" THE CHARACTERS AT THE END
C  OF THE A1000 FORMAT. INSTEAD MUST WRITE (77,__) READLINE, WHERE
C  THE FORMAT IS DETERMINED BY THE LAST NON-BLANK CHARACTER (IENDL)
C  IN READLINE.

	IF(IENDL .LE. 26) THEN
	 WRITE(77,26) READLINE
   26    FORMAT(A26)
	 GO TO 10
	ENDIF



	IF(IENDL .LE. 51) THEN
	 WRITE(77,51) READLINE

   51    FORMAT(A51)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 76) THEN
	 WRITE(77,76) READLINE
   76    FORMAT(A76)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 101) THEN

	 WRITE(77,101) READLINE
  101    FORMAT(A101)

	 GO TO 10
	ENDIF


	IF(IENDL .LE. 126) THEN
	 WRITE(77,126) READLINE
  126    FORMAT(A126)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 151) THEN
	 WRITE(77,151) READLINE
  151    FORMAT(A151)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 176) THEN
	 WRITE(77,176) READLINE
  176    FORMAT(A176)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 201) THEN
	 WRITE(77,201) READLINE
  201    FORMAT(A201)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 226) THEN
	 WRITE(77,226) READLINE
  226    FORMAT(A226)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 251) THEN
	 WRITE(77,251) READLINE
  251    FORMAT(A251)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 276) THEN
	 WRITE(77,276) READLINE
  276    FORMAT(A276)


	 GO TO 10

	ENDIF

	IF(IENDL .LE. 301) THEN
	 WRITE(77,301) READLINE
  301    FORMAT(A301)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 326) THEN
	 WRITE(77,326) READLINE

  326    FORMAT(A326)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 351) THEN
	 WRITE(77,351) READLINE

  351    FORMAT(A351)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 376) THEN
	 WRITE(77,376) READLINE
  376    FORMAT(A376)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 401) THEN
	 WRITE(77,401) READLINE
  401    FORMAT(A401)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 426) THEN
	 WRITE(77,426) READLINE
  426    FORMAT(A426)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 451) THEN
	 WRITE(77,451) READLINE
  451    FORMAT(A451)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 476) THEN


	 WRITE(77,476) READLINE
  476    FORMAT(A476)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 501) THEN
	 WRITE(77,501) READLINE
  501    FORMAT(A501)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 526) THEN
	 WRITE(77,526) READLINE
  526    FORMAT(A526)
	 GO TO 10
	ENDIF


	IF(IENDL .LE. 551) THEN

	 WRITE(77,551) READLINE
  551    FORMAT(A551)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 576) THEN
	 WRITE(77,576) READLINE
  576    FORMAT(A576)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 601) THEN
	 WRITE(77,601) READLINE
  601    FORMAT(A601)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 626) THEN
	 WRITE(77,626) READLINE


  626    FORMAT(A626)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 651) THEN
	 WRITE(77,651) READLINE
  651    FORMAT(A651)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 676) THEN
	 WRITE(77,676) READLINE
  676    FORMAT(A676)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 701) THEN
	 WRITE(77,701) READLINE
  701    FORMAT(A701)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 726) THEN
	 WRITE(77,726) READLINE
  726    FORMAT(A726)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 751) THEN
	 WRITE(77,751) READLINE
  751    FORMAT(A751)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 776) THEN
	 WRITE(77,776) READLINE

  776    FORMAT(A776)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 801) THEN
	 WRITE(77,801) READLINE

  801    FORMAT(A801)
	 GO TO 10

	ENDIF

	IF(IENDL .LE. 826) THEN
	 WRITE(77,826) READLINE

  826    FORMAT(A826)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 851) THEN
	 WRITE(77,851) READLINE
  851    FORMAT(A851)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 876) THEN
	 WRITE(77,876) READLINE

  876    FORMAT(A876)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 901) THEN
	 WRITE(77,901) READLINE
  901    FORMAT(A901)
	 GO TO 10
	ENDIF

	IF(IENDL .LE. 926) THEN
	 WRITE(77,926) READLINE
  926    FORMAT(A926)

	 GO TO 10
	ENDIF

	IF(IENDL .LE. 951) THEN
	 WRITE(77,951) READLINE
  951    FORMAT(A951)

	 GO TO 10
	ENDIF


	IF(IENDL .LE. 976) THEN
	 WRITE(77,976) READLINE
  976    FORMAT(A976)
	 GO TO 10

	ENDIF

	WRITE(77,4) READLINE
	GO TO 10




  100   CLOSE(87)
        REWIND(77)


        RETURN
        END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE CSVCHANGE

C  SUBROUTINE CSVCHANGE IS CALLED BY MAIN AND SUBROUTINE GETNUMEQ TO
C  CHANGE .csv FILES WITH CODE OF POPDATA DEC_11 (I.E., THOSE WITH 2
C  EXTRA COLUMNS FOR ADDL AND II) TO EQUIVALENT .csv FILES WITH CODE OF
C  POPDATA APR_11 (THOSE WITHOUT THE TWO EXTRA COLUMNS). IT READS
C  FILE 67, AND WRITES THE INFORMATION TO SCRATCH FILE 66. NOTE THAT IF
C  THE .csv FILE READ IN ALREADY IS THE OLDER VERSION (WITH CODE 
C  POPDATA APR_11), THIS ROUTINE SIMPLY REWRITES IT TO FILE 66, WHICH IS
C  THEN READ BY SUBROUTINE READBLOCK.

C  THIS ROUTINE IS BASED ON THE STAND-A-LONE PROGRAM, CSVCHANGE.FOR.
C  AS OF IT2B104.FOR, THIS ROUTINE IS BASED ON CSVCHANGE2.FOR.

C  CSVCHANGE.FOR                                           12/6/11

C  THIS PROGRAM CONVERTS THE NEW-STYLE .csv FILES (WITH TWO ADDITIONAL
C  COLUMNS (ADDL AND II) TO THE PREVIOUS .csv FORMAT.

C  ADDL GIVES THE NO. OF ADDITIONAL DOSES FOR ANY DOSE EVENT, AND II
C  GIVES THE INTERDOSE INTERVAL FOR THE ADDITIONAL DOSES.

C  EX: IF TIME = 0, DUR = 2, DOSE = 1000, ADDL = 2, II = 12, THIS
C  PROGRAM WOULD PUT IN TWO EXTRA LINES AS FOLLOWS:

C  TIME    DUR    DOSE  ADDL  II    

C   0       2     1000   2    12  <-- ONLY LINE IN NEW-STYLE FILE
C  12       2     1000   <-- THESE TWO LINES ARE ADDED TO THE OLD
C  24       2     1000       STYLE FILE (WHICH DOESN'T HAVE ADDL AND
C                            II COLUMNS.

C  NOTE THAT ADDL = -1 IS A STEADY STATE DOSE INDICATOR. IN THIS CASE,
C  CHANGE THE TIME OF THE DOSE TO -II, SO SUBROUTINES READBLOCK/WRITEDOS
C  WILL RECOGNIZE THE LINE AS THE BEGINNING OF A STEADY STATE DOSE SET.

C  NOTE THAT ONCE ALL THE ADDITIONAL DOSES ARE ADDED TO THE DOSE
C  ARRAY, THEY MUST ALL BE ORDERED AMONG THEMSELVES (UNTIL THE NEXT
C  DOSE/TIME RESET) SINCE READBLOCK EXPECTS ORDERED DOSES. BUT IT IS
C  OK FOR ALL THE DOSES IN A GIVEN REGION TO COME FIRST, AND THEN ALL
C  THE OBSERVATIONS TO FOLLOW (I.E., THE DOSES SHOULD BE ORDERED AMONG
C  THEMSELVES AND THE OBSERVATIONS FOLLOW THE DOSES, ORDERED AMONG
C  THEMSELVES).

C  NOTE THAT ADDL AND II ENTRIES ARE IGNORED IF EVID = 0 (I.E.,THE
C  EVENT IS AN OBSERVATION).

C  NOTE THAT IF ADDL AND II ARE MISSING FOR A DOSE EVENT (EVID = 1 OR
C  4) THEN ADDL IS ASSUME TO BE 0 (NO ADDITIONAL DOSES) AND II IS
C  IRRELEVANT.


C  NOTE THAT THIS PROGRAM WILL OPEN AND READ THE NEW-STYLE .csv
C  FILE FROM FILE 67, AND THEN WRITE THE PREVIOUS .csv FORMAT TO FILE
C  66.


      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION TIMENTRY(99999),IDENTRY(99999)

      CHARACTER READLINE*1000,CODEPAT*15,
     1 READLINE2*1000,HOLDMAT(99999)*150,TIMCHAR*50,SUBID*11,
     2 SUBIDPREV*11,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


    1 FORMAT(A1000)
    2 FORMAT(A20)

      OPEN(66)

      ICODEPAT = 0


    6 FORMAT(A15)
      ICODEPAT = -1


      READ(67,6) CODEPAT
      IF(CODEPAT .EQ. '"POPDATA DEC_11') ICODEPAT = 1
      IF(CODEPAT(1:14) .EQ. 'POPDATA DEC_11') ICODEPAT = 1



      IF(CODEPAT .EQ. '"POPDATA APR_11') ICODEPAT = 0
      IF(CODEPAT(1:14) .EQ. 'POPDATA APR_11') ICODEPAT = 0


      IF(ICODEPAT .EQ. -1) THEN



       WRITE(*,7)
    7  FORMAT(//' YOUR PATIENT DATA BLOCK FILE IS NOT FROM THE'/
     1' ALLOWABLE SET OF SUCH FILES.'//
     2' A PATIENT DATA BLOCK FILE MUST HAVE "POPDATA XXX_XX IN'/
     3' COLUMNS 1 THROUGH 15 ON LINE 1, WHERE  XXX_XX  IS APR_11 OR A '/
     4' MORE RECENT DATE.'//)
       WRITE(*,*)' THE PROGRAM STOPS.'

        OPEN(47,FILE=ERRFIL)
         WRITE(47,7)                   
         WRITE(47,*)' THE PROGRAM STOPS.'
        CLOSE(47)



       CALL PAUSE
       STOP



      ENDIF

C  IF ICODEPAT = 0, THE INPUT .csv FILE IS ALREADY IN THE CORRECT FORM
C  TO BE READ BY SUBROUTINE READBLOCK. IN THIS CASE, JUST COPY FILE 67,


C  LINE BY LINE TO FILE 66.

      IF(ICODEPAT .EQ. 0) THEN

C  WRITE THE TOP LINE (WITH THE CODE) TO FILE 66.

       CODEPAT = 'POPDATA APR_11'
       WRITE(66,6) CODEPAT

 1020  READ(67,1,IOSTAT=IEND) READLINE
        IF(IEND .LT. 0) THEN
         CLOSE(67)
         RETURN
        ENDIF
       WRITE(66,1) READLINE
       GO TO 1020

      ENDIF


C  ICODEPAT = 1. SO WRITE THE INFO IN FILE 67 TO FILE 66 IN THE OLD
C  FORMAT (WITHOUT THE TWO COLUMNS FOR ADDL AND II).

C  WRITE THE TOP LINE (WITH THE CODE) TO FILE 66.

      CODEPAT = 'POPDATA APR_11'
      WRITE(66,6) CODEPAT

C  READ THE 2ND LINE OF FILE 67 AND WRITE THIS LINE TO FILE 66, BUT
C  WITHOUT THE ADDL AND II NAMES. 

      READ(67,1) READLINE

C  SEARCH FOR THE CHARACTER STRING  ",ADDL,II"  IN THE EARLY PART OF

C  READLINE AND ELIMINATE IT, BEFORE WRITING THE LINE TO FILE 66. IF
C  THIS STRING IS NOT FOUND, TELL THE USER HIS FILE 67 HAS AN ERROR IN 
C  IT, AND STOP

      DO I = 1,50
       IF(READLINE(I:I+7) .EQ. ',ADDL,II') THEN
        ISS = I
        GO TO 10
       ENDIF
      END DO

C  TO GET HERE MEANS THE ABOVE STRING WAS NEVER FOUND. SO WRITE A 
C  MESSAGE TO THE USER AND STOP.

       WRITE(*,8)
    8  FORMAT(//' YOUR PATIENT DATA BLOCK FILE IS NOT FROM THE '/

     1' ALLOWABLE SET OF SUCH FILES.'//
     2' A PATIENT DATA BLOCK FILE MUST HAVE ",ADDL,II" AS THE 6TH AND'/
     3' 7TH COLUMN HEADINGS ON LINE 2.'//)
       WRITE(*,*)' THE PROGRAM STOPS.'

        OPEN(47,FILE=ERRFIL)
         WRITE(47,8)                   
         WRITE(47,*)' THE PROGRAM STOPS.'
        CLOSE(47)



       CALL PAUSE
       STOP


   10 CONTINUE

C  PUT ALL OF READLINE, EXCEPT ENTRIES ISS:ISS+7 INTO READLINE2,
C  AND WRITE READLINE2 INTO FILE 66.

      READLINE2(1:ISS-1) = READLINE(1:ISS-1)

      READLINE2(ISS:992) = READLINE(ISS+8:1000)
      WRITE(66,1) READLINE2



C  EACH LINE IN FILE 67, STARTING WITH LINE 3 (EXCEPT FOR LINES 
C  BEGINNING WITH #) HAS A SUBJECT ID IN THE 1ST 11 ENTRIES. THEN
C  THE ENTRIES ARE, IN ORDER, EVID, TIME, DUR, DOSE, ADDL, II, INPUT,
C  ...

C  READ EACH DOSE LINE (EVID = 1 OR 4) TO OBTAIN THE VALUES OF ADDL AND
C  II FOR THOSE. ADDL IS THE NO. OF ADDITIONAL DOSE LINES THAT ARE 
C  IDENTICAL TO THE CURRENT LINE, AND II IS THE ASSOCIATED INTERDOSE

C  INTERVAL. IF ADDL = -1, THIS REPRESENTS A STEADY STATE SET OF DOSES.

C  FOR A DOSE LINE, IF ADDL = 0 OR IS MISSING (WHICH MEANS ADDL IS
C  ASSUMED TO BE 0), WRITE THE LINE, WITHOUT THE ADDL AND II VALUES,
C  INTO HOLDMAT. 

C  FOR EACH DOSE LINE WITH AN ADDL > 0, WRITE THAT LINE
C  WITHOUT THE ADDL AND II VALUES, AND ADDL MORE SIMILAR LINES INTO THE
C  HOLDMAT, MAKING SURE THAT THE TIME FOR EACH SUCCESSIVE LINE
C  IS INCREASED BY II FROM THE PREVIOUS LINE.


C  NOTE THAT THE ABOVE PROCESS CAN CAUSE THE DOSE LINES TO BE OUT OF
C  ORDER IN HOLDMAT. EACH BLOCK OF DOSE LINES WILL BE 
C  ORDERED UP TO THE NEXT DOSE/TIME RESET LINE BELOW. AND NOTE THAT
C  ALL THE DOSES IN EACH REGION (UNTIL THE NEXT TIME RESET LINE - I.E.,
C  UNTIL THE NEXT EVID = 4) WILL BE WRITTEN TOGETHER, AND THEN BE
C  FOLLOWED BY ALL THE OBSERVATION LINES IN THAT REGION).


C  NOTE BELOW THAT AFTERCOMMA OPENS AND PUTS INTO FILE 57 THE PART OF
C  READLINE WHICH IS BETWEEN COMMA C AND COMMA C+1, WHERE C IS THE 3RD
C  ARGUMENT. ALSO,NOTE THAT NCOVA MUST BE PROVIDED TO AFTERCOMMA SO IT
C  WILL KNOW THE TOTAL NO. OF COMMAS IN READLINE, WHICH = 13 + NCOVA 
C  SINCE THIS FILE HAS 14 FIXED FIELDS (COUNTING THE 2 NEWS ONES, 
C  ADDL AND II).
C  
C  SO, FIRST FIND NCOVA FROM READLINE JUST READ IN (THE 2ND LINE OF THE
C  .csv FILE).

        NCOMMA = 0

        DO ISTART = 1,1000	 
         IF(READLINE(ISTART:ISTART) .EQ. ',') THEN
          NCOMMA = NCOMMA + 1
         ENDIF
        END DO

        NCOVA = NCOMMA - 13

C  INITIALIZE SUBIDPREV (THE PREVIOUS SUBJECT ID), AND THE CURRENT
C  SUBJECT TO BE '%^&*'.

	SUBIDPREV = '%^&*'
	SUBID = '%^&*'
      NROW = 0



C  NROW IS THE RUNNING INDEX OF THE NEXT LINE TO BE PUT INTO THE
C  HOLDMAT.


   20 READ(67,1,IOSTAT=IEND) READLINE


C  IF IEND .LT. 0, THE FILE HAS BEEN READ THROUGH COMPLETELY, SO GO TO
C  LABEL 100 TO WRITE THE LAST SUBJECT'S ROWS TO FILE 66.

	IF(IEND .LT. 0) GO TO 100

C  IF READLINE(1:1) IS #, THIS LINE IS A COMMENT LINE AND CAN BE
C  SKIPPED (I.E., NOT WRITTEN INTO HOLDMAT).

      IF(READLINE(1:1) .EQ. '#') GO TO 20


C  WILL ALSO GO TO LABEL 100 IF THIS SUBJECT ID IS DIFFERENT THAN
C  SUBIDPREV (SINCE THAT MEANS THAT THE PREVIOUS SUBJECT'S LINES ARE
C  READY TO BE WRITTEN TO FILE 66).    


C  THE FIRST VALUE (I.E., AFTER COMMA NO. 0) IS THE SUBJECT ID.

	CALL AFTERCOMMA(NCOVA,READLINE,0)
	BACKSPACE(57)
	READ(57,222) SUBID
  222 FORMAT(A11)
	CLOSE(57)

C  NOTE THAT SUBID CONTAINS THE 1ST 11 CHARACTERS OF THE LINE, BUT THE
C  SUBJECT ID IS JUST THE SET OF CHARACTERS PRIOR TO THE 1ST COMMA.
C  CALL SUBROUTINE GETID TO CORRECT THE VALUE OF SUBID.

	CALL GETID(SUBID)

      IF(SUBID .NE. SUBIDPREV) GO TO 100


C  TO GET TO THIS POINT, SUBID = SUBIDPREV, WHICH MEANS THIS IS A
C  LINE FOR THE CURRENT SUBJECT.

C  IF THE EVENT ID, IN ENTRY NO. 2 (I.E., AFTER COMMA NO. 1) IN 
C  READLINE IS 0, THE LINE REPRESENTS AN OBSERVATION AND CAN BE WRITTEN
C  INTO HOLDMAT, EXCEPT FOR ADDL AND II AS DONE ABOVE.

	CALL AFTERCOMMA(NCOVA,READLINE,1)
	BACKSPACE(57)
	READ(57,*) IDEVENT

	CLOSE(57)

      IF(IDEVENT .EQ. 0) THEN
       NROW = NROW + 1
       CALL GETCOM(NCOMMA,READLINE,I5,I7)
       HOLDMAT(NROW) = READLINE(1:I5)//READLINE(I7+1:150)
      ENDIF


C  IF THE EVENT ID IS 1 OR 4, THE LINE REPRESENTS A DOSE
C  EVENT (1 -> REGULAR DOSE; 4 -> TIME RESET EVENT WITH A DOSE). EITHER
C  WAY IF THE ENTRY FOR ADDL IS MISSING OR A 0, IT MEANS THAT THIS LINE
C  REPRESENTS A SINGLE DOSE. IF ADDL > 0, THIS LINE MUST BE COPIED
C  ADDL TIMES. NOTE THAT THE ADDL ENTRY IS NO. 6, AFTER COMMA NO. 5.

      IF(IDEVENT .EQ. 1 .OR. IDEVENT .EQ. 4) THEN

       CALL AFTERCOMMA(NCOVA,READLINE,5)
       BACKSPACE(57)
       READ(57,*,ERR=25) IADDL
       CLOSE(57)
       GO TO 30

   25  IADDL = 0

C  TO GET TO LABEL 25 MEANS IADDL TRIED TO READ A NON-NUMBER, WHICH 
C  MEANS IT IS MISSING --> IT IS EQUIVALENT TO 0. IN THIS CASE, WRITE
C  THE LINE INTO HOLDMAT, EXCEPT FOR IADDL AND II AS 
C  DONE ABOVE.

   30  CONTINUE
       

       IF(IADDL .GE. 0) THEN
        NROW = NROW + 1
        CALL GETCOM(NCOMMA,READLINE,I5,I7)
        HOLDMAT(NROW) = READLINE(1:I5)//READLINE(I7+1:150)
       ENDIF

       IF(IADDL .GT. 0) THEN


C  THIS LINE MUST BE COPIED IADDL TIMES, BUT EACH LINE MUST HAVE ITS 
C  TIME ENTRY INCREASED BY XII (THE INTERDOSE INTERVAL) FROM THE 
C  PREVIOUS LINE. FIRST FIND THE VALUE OF XII, IN THE 7TH ENTRY, AFTER
C  THE 6TH COMMA. IF XII IS MISSING, STOP THE PROGRAM TELLING THE USER
C  THAT THE .cvs FILE HAS AN ERROR; IT HAS A ROW WITH AN IADDL > 0, BUT
C  WITH AN ACCOMPANYING INTERDOSE INTERVAL WHICH IS MISSING. NOTE THAT
C  THIS LINE NO. IS 2 (THE TOP 2 LINES) + NROW + 1 = NROW + 3.


	  CALL AFTERCOMMA(NCOVA,READLINE,6)
	  BACKSPACE(57)
	  READ(57,*,ERR=35) XII
	  CLOSE(57)
        GO TO 40
        
   35   WRITE(*,36) NROW + 3
   36   FORMAT(/' THE INTERDOSE INTERVAL IS MISSING ON LINE NO. ',I6//
     1' PLEASE CORRECT YOUR .csv FILE AND RERUN THE PROGRAM.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,36) NROW + 3         
        CLOSE(47)



        CALL PAUSE
        STOP


   40   CONTINUE



C  THE TIME FOR THE ORIGINAL DOSE IS IN ENTRY NO. 3, AFTER COMMA NO. 2.

	  CALL AFTERCOMMA(NCOVA,READLINE,2)
	  BACKSPACE(57)
	  READ(57,*) TIM
	  CLOSE(57)

        DO IADD = 1,IADDL


C  NOTE THAT THE ORIGINAL LINE FOR THIS DOSE HAS ALREADY BEEN WRITTEN
C  TO HOLDMAT (IN THE IF(IADDL .GE. 0) SECTION ABOVE). SO
C  NOW MUST WRITE IADDL LINES TO HOLDMAT, EACH IDENTICAL TO
C  THE CURRENT LINE, EXCEPT EACH TIM WILL BE INCREMENTED BY
C  XII. TO DO THIS, WRITE THE NEXT TIM + XII TO SCRATCH FILE 57; THEN
C  REREAD THIS VALUE AS A CHARACTER SO IT CAN BE INSERTED INTO
C  THE CHARACTER STRING READLINE AND THEN WRITTEN TO THE HOLDING
C  MATRIX.

C  ... AND ...


C  BUG CORRECTION FOR BESTDOS106.FOR. EACH REPEATED ROW MUST HAVE 
C  IDEVENT SET = 1. I.E.,IF IDEVENT FOR THE ORIGINAL ROW (WHICH IS BEING
C  REPEATED IADDL TIMES) IS 4, THIS IS A TIME RESET EVENT, BUT THE
C  REPEATED ROWS WILL ALL HAVE IDEVENTS OF 1 (OTHERWISE IT WOULD LOOK
C  LIKE REPEATED TIME RESET EVENTS WHICH IS NOT WHAT IS INTENDED).
C  FOR EXAMPLE, IADDL = 3 IN AN IDEVENT = 4 LINE --> THE FIRST LINE IN
C  FILE 66 SHOULD HAVE IDEVENT = 4, BUT THE NEXT TWO LINES MUST HAVE
C  IDEVENT = 1 (I.E., THEY ARE REGULAR DOSE LINES THAT FOLLOW THE
C  IDEVENT = 4 LINE AT TIME INTERVALS OF XII).

C  FIRST RESET READLINE TO HOLDMAT(NROW), WHICH DOES NOT HAVE THE
C  ADDL AND II ENTRIES.

         READLINE(1:150) = HOLDMAT(NROW)

         OPEN(57,STATUS='SCRATCH')
         WRITE(57,*) TIM + XII*IADD
         BACKSPACE(57)
         READ(57,41) TIMCHAR
   41    FORMAT(A50)
         CLOSE(57)

C  TAKE OUT ALL SPACES AT THE END OF TIMCHAR.


         DO IEND = 50,1,-1
          IF(TIMCHAR(IEND:IEND) .NE. ' ') GO TO 50

         END DO

   50    CONTINUE


C  NOW TIMCHAR(1:IEND) IS THE CONDENSED FORM OF THE TIME FOR THIS
C  ROW. REPLACE WHAT IS CURRENTLY BETWEEN COMMAS 2 AND 3 OF 
C  HOLDMAT(NROW) WITH THIS, AND STORE IT INTO THE NEXT ROW OF HOLDMAT.
C  ALSO, DETERMINE I1 = CHARACTER NO. FOR COMMA 1, IN ORDER TO KNOW
C  WHERE TO WRITE THE IDEVENT NO. WHICH WILL ALWAYS BE 1. 

         ICOMMA = 0

         DO I = 1,150
          IF(READLINE(I:I) .EQ. ',') THEN
           ICOMMA = ICOMMA + 1
           IF(ICOMMA .EQ. 1) I1 = I
           IF(ICOMMA .EQ. 2) I2 = I
           IF(ICOMMA .EQ. 3) THEN
            I3 = I
            GO TO 60
           ENDIF
          ENDIF
         END DO

   60    READLINE2 =
     1    READLINE(1:I1)//'1,'//TIMCHAR(1:IEND)//READLINE(I3:150)
         NROW = NROW + 1         
         HOLDMAT(NROW) = READLINE2(1:150)
         
        END DO

C  THE ABOVE END DO IS FOR THE  DO IADD = 1,IADDL  LOOP.


       ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IADDL .GT. 0)  CONDITION.



       IF(IADDL .EQ. -1) THEN


C  WRITE JUST ONE LINE TO THE NEW .CSV FILE, EVEN THOUGH IADDL = -1
C  REPRESENTS A STEADY STATE DOSE SET OF 100 DOSES. MAKE THE TIME FOR
C  THIS EVENT = -II SO READBLOCK/WRITEDOS WILL KNOW THIS IS A LINE WITH
C  STEADY STATE DOSE INFO.

	  CALL AFTERCOMMA(NCOVA,READLINE,6)
	  BACKSPACE(57)
	  READ(57,*,ERR=65) XII
	  CLOSE(57)
        GO TO 70
        
   65   WRITE(*,36) NROW + 3

        OPEN(47,FILE=ERRFIL)
         WRITE(47,36) NROW + 3         
        CLOSE(47)



        CALL PAUSE
        STOP

   70   CONTINUE



C  NOW ESTABLISH THE NEXT LINE OF HOLDMAT AS THE CURRENT
C  READLINE, BUT WITHOUT THE ENTRIES FOR ADDL AND II; THEN RESET
C  READLINE TO BE THIS NEW LINE.

        NROW = NROW + 1
        CALL GETCOM(NCOMMA,READLINE,I5,I7)
        HOLDMAT(NROW) = READLINE(1:I5)//READLINE(I7+1:150)
        READLINE(1:150) = HOLDMAT(NROW)

C  NOW ESTABLISH READLINE2 = READLINE, BUT WITH THE TIME VALUE RESET
C  TO BE TIME = -XII. TO DO THIS, WRITE -XII TO SCRATCH FILE 57; THEN
C  REREAD THIS VALUE AS A CHARACTER SO IT CAN BE INSERTED INTO
C  THE CHARACTER STRING READLINE AND THEN WRITTEN TO THE HOLDING
C  MATRIX.

         OPEN(57,STATUS='SCRATCH')
         WRITE(57,*) -XII
         BACKSPACE(57)
         READ(57,41) TIMCHAR

         CLOSE(57)

C  TAKE OUT ALL SPACES AT THE END OF TIMCHAR.

         DO IEND = 50,1,-1
          IF(TIMCHAR(IEND:IEND) .NE. ' ') GO TO 80
         END DO

   80    CONTINUE


C  NOW TIMCHAR(1:IEND) IS THE CONDENSED FORM OF THE TIME FOR THIS
C  ROW. REPLACE WHAT IS CURRENTLY BETWEEN COMMAS 2 AND 3 OF 
C  HOLDMAT(NROW) WITH THIS, AND STORE IT BACK INTO THE SAME ROW OF 
C  HOLDMAT.

         ICOMMA = 0

         DO I = 1,150
          IF(READLINE(I:I) .EQ. ',') THEN
           ICOMMA = ICOMMA + 1
           IF(ICOMMA .EQ. 2) I2 = I

           IF(ICOMMA .EQ. 3) THEN
            I3 = I
            GO TO 90
           ENDIF
          ENDIF
         END DO

   90    READLINE2 =
     1    READLINE(1:I2)//TIMCHAR(1:IEND)//READLINE(I3:150)
         HOLDMAT(NROW) = READLINE2(1:150)


       ENDIF 

C  THE ABOVE ENDIF IS FOR THE  IF(IADDL .EQ. -1)  CONDITION.


      ENDIF

C  THE ABOVE ENDIF IS FOR THE  
C   IF(IDEVENT .EQ. 1 .OR. IDEVENT .EQ. 4)  CONDITION.


      GO TO 20


  100 CONTINUE

C  AS OF NPAG109.FOR, WRITE LINE TO THE SCREEN TELLING THE USER WHICH
C  SUBJECT IS BEING CONVERTED, IN CASE THERE ARE A LARGE NO. OF PATIENTS
C  WITH A LOT OF DATA. OTHERWISE, THERE COULD BE A LONG "DEAD" TIME ON
C  THE SCREEN MAKING THE PROGRAM LOOK LIKE IT HAS "HUNG".



      WRITE(*,103) SUBID
  103 FORMAT(' EXAMINING .CSV FORMAT FOR SUBJECT  ',A11)



C  THE FIRST TWO LINES OF FILE 66 WERE WRITTEN ABOVE. NOW WRITE THE 
C  REST OF THE FILE.

C  NOTE THAT IN EACH SECTION OF DOSES (I.E., UNTIL THE NEXT IDEVENT 
C  = 4), MUST ORDER THE DOSES SINCE THEY COULD BE OUT OF ORDER DUE TO
C  THE ADDL ENTRY. 

C  FOR EXAMPLE, A DOSE OF T = 0 WITH ADDL = 2 AND II = 12 --> DOSES AT
C  T = 0, 12, AND 24. THEN ANOTHER DOSE (FOR A DIFFERENT DRUG, OR THE
C  SAME DRUG WITH A DIFFERENT ROUTE) COULD OCCUR AT T = 8. THEN, FROM
C  THE ABOVE CODE, THE CURRENT DOSE TIMES WOULD BE [0 12 24 8].

C  SO GO THROUGH THE NROW ROWS OF HOLDMAT, AND ORDER THE ROWS IN EACH
C  SECTION (I.E., UNTL THE NEXT IDEVENT = 4 ROW). IN PARTICULAR, FIRST
C  ORDER THE DOSE ROWS (IDEVENT = 1). IF THESE ROWS FOLLOW AN 
C  IDEVENT = 4 ROW, THAT ROW GOES FIRST OF COURSE. THEN WRITE IN THE
C  OBSERVATION ROWS (THEY SHOULD ALREADY BE IN ORDER).

C  PUT ALL THE IDEVENT ENTRIES IN HOLDMAT INTO IDENTRY(.), AND PUT ALL
C  THE TIME ENTRIES IN HOLDMAT INTO TIMENTRY(.).

      DO I = 1,NROW

       READLINE(1:150) = HOLDMAT(I)

       CALL AFTERCOMMA(NCOVA,READLINE,1)

	 BACKSPACE(57)
	 READ(57,*) IDEVENT
       IDENTRY(I) = IDEVENT

	 CLOSE(57)

       CALL AFTERCOMMA(NCOVA,READLINE,2)
	 BACKSPACE(57)
	 READ(57,*) TIM
       TIMENTRY(I) = TIM
	 CLOSE(57)

      END DO


      NN = 0
      NFIRST = 1

C  NN IS THE RUNNING INDEX OF THE ROW IN HOLDMAT UNDER CONSIDERATION.

C  NFIRST IS THE RUNNING INDEX OF THE FIRST ROW IN THE NEXT SECTION

C  UNDER CONSIDERATION.

  150 CONTINUE



C  ORDER ALL THE ROWS UNTIL THE NEXT IDENTRY(.) = 4, OR UNTIL THE 
C  END OF THE ROWS IS ENCOUNTERED, WHICHEVER COMES FIRST.

      NN = NN + 1
      IF(NN .GT. NROW) GO TO 200

      IF(IDENTRY(NN) .NE. 4 .AND. NN .LT. NROW) GO TO 150

C  ORDER THE ENTRIES IN HOLDMAT FROM NFIRST TO EITHER NROW
C  (IF NN = NROW) OR TO NN-1 (IF IDENTRY(NN) = 4), AND THEN


C  WRITE THEM INTO FILE 66.

      IF(NN .EQ. NROW) NLAST = NROW
      IF(IDENTRY(NN) .EQ. 4) NLAST = NN - 1
      CALL ORDERHOLD(HOLDMAT,NFIRST,NLAST,IDENTRY,TIMENTRY)


  151 FORMAT(A150)



      DO I = NFIRST,NLAST
       WRITE(66,151) HOLDMAT(I)
      END DO      


      NFIRST = NLAST + 1

      GO TO 150

     
  200 CONTINUE

C  IF FILE 67 HAS BEEN COMPLETELY READ, RETURN.

	IF(IEND .LT. 0) THEN
       CLOSE(67)
       RETURN

      ENDIF


C  SINCE IEND .GE. 0, THE FILE HAS NOT BEEN COMPLETELY READ. SO, RESET
C  SUBIDPREV = SUBID AND NROW TO BE 0, AND BACKSPACE FILE 67 SINCE THE
C  FIRST LINE FOR THE NEXT SUBJECT WAS ALREADY READ (I.E., THE NEXT
C  READ OF FILE 67 SHOULD REREAD THIS FIRST LINE) AND GO BACK TO LABEL
C  20 TO CONTINUE READING THE FILE.


      SUBIDPREV = SUBID
      NROW = 0
      BACKSPACE(67)
      GO TO 20


      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE GETCOM(NCOMMA,READLINE,I5,I7)

      CHARACTER READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.


C  GETCOM IS CALLED BY CVSCHANGE TO FIND THE ENTRY NO. FOR COMMA NO. 5
C (I5), AND THE ENTRY FOR COMMA NO. 7 (I7).


    1 FORMAT(A1000)
 
      ICOMMA = 0

      DO I = 1,300
       IF(READLINE(I:I) .EQ. ',') THEN
        ICOMMA = ICOMMA + 1

         IF(ICOMMA .EQ. 5) I5 = I

          IF(ICOMMA .EQ. 7) THEN
           I7 = I
           RETURN
          ENDIF
       ENDIF
      END DO

C  TO GET TO THIS POINT MEANS THAT READLINE DOESN'T HAVE 7 COMMAS IN
C  IT. REPORT THIS ERROR TO THE USER AND STOP.

      WRITE(*,2) NCOMMA,READLINE(1:70)
    2 FORMAT(/' ONE OF THE LINES IN YOUR .cvs FILE HAS AN ERROR.'/
     1' IT IS SUPPOSED TO HAVE ',I2,' COMMAS, BUT IT HAS FEWER THAN'/
     2' 7. THE FOLLOWING LINE SHOWS THE 1ST 70 CHARACTERS OF THE LINE:'/
     3' ',A70//
     4' THE PROGRAM STOPS.'/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,2) NCOMMA,READLINE(1:70)
        CLOSE(47)



      CALL PAUSE
      STOP
    
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE ORDERHOLD(HOLDMAT,NFIRST,NLAST,IDENTRY,TIMENTRY)

      IMPLICIT REAL*8(A-H,O-Z)

      DIMENSION TIMENTRY(99999),IDENTRY(99999),IZ(99999),IZZ(99999),
     1 DOSTIME(99999)
      CHARACTER HOLDMAT(99999)*150,HOLDMAT2(99999)*150

C  ORDER THE ENTRIES IN HOLDMAT FROM NFIRST TO NLAST, AS FOLLOWS:

C  1. PUT ALL THE DOSE EVENTS (IDENTRY(.) = 1 OR 4) FIRST, ORDERED BY
C  INCREASING TIMENTRY(.).

C  2. PUT ALL THE OBSERVATION EVENTS (IDENTRY(.) = 0) AFTER THE DOSE
C  EVENTS (THEY SHOULD ALREADY BE ORDERED).



C  FIRST, STORE THE DOSE ROWS FROM NFIRST TO NLAST IN HOLDMAT TO 
C  HOLDMAT2, STARTING AT ROW 1 IN HOLDMAT2.

C  ALSO, PUT ALL THE DOSE EVENTS TIMES INTO DOSTIME, AND INITIALIZE

C  VECTOR IZ TO BE -99 IN ALL ITS NDOSE LOCATIONS

      NDOSE = 0

      DO I = NFIRST,NLAST

       IF(IDENTRY(I) .EQ. 1 .OR. IDENTRY(I) .EQ. 4) THEN

        NDOSE = NDOSE + 1

        HOLDMAT2(NDOSE) = HOLDMAT(I)
        DOSTIME(NDOSE) = TIMENTRY(I)
        IZ(NDOSE) = -99
       ENDIF
      END DO

C  NOW, FOR EXAMPLE, IF ENTRY 17 IS THE SMALLEST VALUE IN DOSTIME,
C  IZ(17) WILL BE SET = 0, AND THE PROGRAM WILL KNOW NOT TO CHECK THE
C  17TH ENTRY AGAIN (SINCE IT HAS ALREADY BEEN SELECTED). IF THE NEXT
C  SMALLEST ENTRY HAS INDEX 37, THEN IZ(37) WILL BE SET = 0, ETC.

C  NOTE THAT IZZ WILL BE THE ARRAY WHICH CONTAINS THE ACTUAL ORDERING.
C  IN THE EXAMPLE ABOVE, IZZ(1) = 17, IZZ(2) = 37. IT WILL BE EASY TO
C  ASSIGN ORDERED VALUES BACK INTO HOLDMAT USING IZZ. IN THE EXAMPLE
C  ABOVE, HOLDMAT(1) WILL HAVE DOSE TIME = DOSTIME(IZZ(1)) =
C  DOSTIME(17); HOLDMAT(2) WILL HAVE DOSE TIME = DOSTIME(IZZ(2)) =
C  DOSTIME(37); ETC.


C  NOW PUT THE OBSERVATION ROWS FROM NFIRST TO NLAST IN HOLDMAT TO
C  HOLDMAT2, STARTING AT ROW NDOSE + 1 IN HOLDMAT2.

      NEXT = NDOSE

      DO I = NFIRST,NLAST
       IF(IDENTRY(I) .EQ. 0) THEN
        NEXT = NEXT + 1
        HOLDMAT2(NEXT) = HOLDMAT(I)

       ENDIF
      END DO


C  NOW ORDER THE FIRST NDOSE ROWS IN HOLDMAT2 ACCORDING TO THE DOSE
C  TIMES, LOW TO HIGH.

	 DO IPLACE = 1,NDOSE

C  PUT THE NEXT LOWEST VALUE OF DOSTIME INTO THE IPLACE LOCATION OF
C  IZZ.


C  TEMP IS THE RUNNING VALUE OF THE NEXT VALUE TO BE PLACED INTO 
C  DOSTIME. INITIALIZE IT TO BE VERY HIGH VALUE SO THE FIRST VALUE 
C  OF DOSTIME WILL BE SURE TO BE LOWER THAN IT IS.

	  TEMP = 1.D50

	  DO I=1,NDOSE

	   IF(DOSTIME(I) .LT. TEMP .AND. IZ(I) .EQ. -99) THEN

	    TEMP = DOSTIME(I)
	    IND = I
	   ENDIF
	  END DO


C  AT THIS POINT, IND IS THE INDEX OF THE SMALLEST REMAINING VALUE
C  (TEMP) IN DOSTIME. PUT THIS INFORMATION INTO IZZ. ALSO, SET
C  IZ(IND) = 0 --> THE IND LOCATION IN DOSTIME HAS BEEN USED.

	  IZZ(IPLACE) = IND
	  IZ(IND) = 0

	 END DO

C  AT THIS POINT IZZ CONTAINS THE ORDERED INDICES (LOW TO HIGH) OF THE
C  NDOSE VALUES IN DOSTIME, AND SO GIVES THE ORDER THAT THE NDOSE ROWS
C  NOW IN HOLDMAT2 SHOULD BE WRITTEN.

C  WRITE THESE NDOSE DOSE ROWS IN THE CORRECT ORDER INTO HOLDMAT, AND
C  THEN WRITE THE REMAINING ROWS (OBSERVATION ROWS) INTO HOLDMAT. 

      DO IDOSE = 1,NDOSE
       HOLDMAT(NFIRST-1+IDOSE) = HOLDMAT2(IZZ(IDOSE))
      END DO

C  STORE THE OBSERVATION ROWS INTO ENTRIES NFIRST + NDOSE,..., NLAST OF
C  HOLDMAT. THEY WERE STORED INTO THE LAST NOBS ROWS OF HOLDMAT2 ABOVE. 

      NEXT = NDOSE

      DO IOBS = NFIRST + NDOSE,NLAST
       NEXT = NEXT + 1
       HOLDMAT(IOBS) = HOLDMAT2(NEXT)
      END DO
     
       
      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE MAKETMP(TNEXT,MAXOBDIM,ND42)

      IMPLICIT REAL*8(A-H,O-Z)

       PARAMETER(MAXNUMEQ=7)

      DIMENSION RS(34),YO(MAXNUMEQ),TIM41(594)
      CHARACTER READLINE*1000,ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.

      COMMON/TOCALCTP/M41,TIM41

C  THIS SUBROUTINE, CALLED BY MAIN, READS WORKING COPY FILES 41 
C  (TMPFILE1) AND 42 (TMPFILE2) AND MAKES ANOTHER WORKING COPY FILE,
C  43 (TMPFILE) WHICH HAS THE FOLLOWING CHARACTERISTICS:
C  IT HAS ALL THE DOSES (BUT NOT THE OBSERVATIONS IN FILE 41). 
C  IT HAS ALL THE DOSES AND OBSERVATIONS IN FILE 42, BUT WITH EACH OF
C  THE CORRESPONDING TIMES INCREASED BY TNEXT.

C  NOTE THAT THIS ROUTINE RETURNS ND42 (THE NO. OF DOSES IN FILE 42),
C  WHERE THE DOSES TO BE OPTIMIZED OVER ARE ND41+1 TO ND IN FILE 42,
C  WHERE ND41 + ND42 = ND.


    1   FORMAT(A1000)

C  WRITE ALL THE LINES FROM FILE 41 TO FILE 43, DOWN TO AND INCLUDING
C  THE LINE WITH THE NO. OF DRUGS ON IT.

   10	READ(41,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF DRUGS') THEN
       WRITE(43,1) READLINE
       GO TO 10
      ENDIF

      WRITE(43,1) READLINE

C  BACKSPACE AND READ THE NO. OF DRUGS FROM FILE 41, FOLLOWED BY THE
C  NO. OF ADDITIONAL COVARIATES, AND THE NO. OF DOSE EVENTS.


      BACKSPACE(41)

    3 FORMAT(T2,I5)
      READ(41,3) NDRUG41


      IF(NDRUG41 .GT. 7) THEN

      WRITE(*,124) NDRUG41
  124 FORMAT(' YOUR PATIENT DATA FILE WHICH HAS THE "PAST" HISTORY OF'/
     1' THE SUBJECT HAS ',I3,' DRUGS, MORE THAN THE ALLOWABLE 7.'//
     2' THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,124) NDRUG41
        CLOSE(47)

       CALL PAUSE
       STOP

      ENDIF

      READ(41,3) NADD41

C  BACKSPACE FILE 41, AND WRITE THIS LINE (NO. OF ADDTIONAL COVS) TO
C  FILE 43.

      BACKSPACE(41)
      READ(41,1) READLINE
      WRITE(43,1) READLINE


C  NOW VERIFY THAT FILE 42 HAS THE SAME NO. OF DRUGS AND ADDITIONAL
C  COVARIATES AS FILE 41. IF NOT, WRITE MESSAGE TO USER AND STOP.

   20	READ(42,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF DRUGS') GO TO 20

C  BACKSPACE AND READ THE NO. OF DRUGS FROM FILE 42, FOLLOWED BY THE
C  NO. OF ADDITIONAL COVARIATES, AND THE NO. OF DOSE EVENTS.

      BACKSPACE(42)
      READ(42,3) NDRUG42


      IF(NDRUG42 .NE. NDRUG41) THEN

      WRITE(*,126) NDRUG41,NDRUG42
  126 FORMAT(' YOUR PATIENT DATA FILE WHICH HAS THE "PAST" HISTORY OF'/
     1' THE SUBJECT HAS ',I3,' DRUGS, BUT THE FILE WITH THE "FUTURE" '/
     2' FOR THIS SUBJECT HAS ',I3,' DRUGS. THE NO. OF DRUGS MUST BE'/
     3' THE SAME IN THESE TWO FILES. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,126) NDRUG41,NDRUG42
        CLOSE(47)

       CALL PAUSE
       STOP


      ENDIF

C  VERIFY THAT THTE NO. OF DRUGS IS NOT .GT. 7. IF SO, WRITE MESSAGE

C  AND STOP.

      IF(NDRUG41 .GT. 7) THEN

       WRITE(*,123)
  123  FORMAT(' YOUR PATIENT DATA FILES CANNOT HAVE MORE THAN 7'/
     1' DRUGS. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,123)
        CLOSE(47)

       CALL PAUSE
       STOP

      ENDIF


      READ(42,3) NADD42

      IF(NADD42 .NE. NADD41) THEN

      WRITE(*,127) NADD41,NADD42
  127 FORMAT(' YOUR PATIENT DATA FILE WHICH HAS THE "PAST" HISTORY OF'/
     1' THE SUBJECT HAS ',I3,' ADDITIONAL COVARIATES, BUT THE FILE'/
     2' WITH THE "FUTURE" FOR THIS SUBJECT HAS ',I3,' ADDITIONAL'/
     3' COVARIATES. THE NO. OF ADDITIONAL COVARIATES MUST BE THE SAME'/
     4' IN THESE TWO FILES. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,127) NADD41,NADD42 
        CLOSE(47)

       CALL PAUSE
       STOP

      ENDIF

C  NOTE THAT THE NO. OF "RATES" INCLUDES 2 FOR EACH DRUG (THE IV AND
C  THE PO COLUMNS) + NADD (1 COLUMN FOR EACH ADDITIONAL COVARIATE 
C  BEYOND THE FIRST 4 ABOVE, AGE, SEX, HEIGHT, AND ETHNICITY FLAG).

      NI = 2*NDRUG41 + NADD41


      IF(NI .GT. 34) THEN

       WRITE(*,132)
  132  FORMAT(/' YOUR PATIENT DATA FILES HAVE TOO MANY COLUMNS IN '/
     1' THE DOSAGE REGIMEN BLOCK. THE NO. OF ADDITIONAL COVARIATES '/
     2' PLUS TWICE THE NO. OF DRUGS CANNOT EXCEED 34. THE PROGRAM IS'/
     3' NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,132) 
        CLOSE(47)

       CALL PAUSE
       STOP

      ENDIF



C  BOTH FILE 41 AND FILE 42 ARE AT THE LINE WHERE THE NO. OF DOSE
C  EVENTS IS READ. HAVE EACH FILE READ THE NO. OF DOSE EVENTS, AND
C  THEN ADD THEM TO GET THE NO. OF DOSE EVENTS FOR FILE 43.


      READ(41,3) ND41
      READ(42,3) ND42
      ND = ND41 + ND42

C  WRITE ND AS THE NO. OF DOSE EVENTS TO FILE 43, AFTER VERIFYING THAT
C  THIS NO. IS .LE. 5000 (THE MAXIMUM ALLOWED).


      IF(ND .GT. 5000) THEN

       WRITE(*,133) ND41,ND42
  133  FORMAT(' THE PATIENT DATA FILE WHICH IS TO CONTAIN THE DOSES '/
     1' FOR BOTH THE "PAST" HISTORY, AND THE "FUTURE" HAS MORE THAN'/
     2' 5000 DOSES ... ',I4,' IN THE "PAST", AND ',I4,' IN THE '/
     3' "FUTURE". THIS IS TOO MANY. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,133) ND41,ND42
        CLOSE(47)

	 CALL PAUSE
	 STOP

	ENDIF

      WRITE(43,13) ND
   13 FORMAT(I6,' ... NO. OF DOSE EVENTS')

C  WRITE THE LINES DOWN TO "TIME, IV/PO,.." WHICH STARTS IN COL. 5
C  TO FILE 43. AND THEN WRITE THIS LINE TO FILE 43.

   30 READ(41,1) READLINE
      IF(READLINE(5:15) .NE. 'TIME, IV/PO') THEN
       WRITE(43,1) READLINE
       GO TO 30

      ENDIF

      WRITE(43,1) READLINE

C  OF THE ND = ND41 + ND42 DOSE EVENTS, THE FIRST ND41 COME FROM 
C  FILE 41. WRITE THESE DOSE EVENTS TO FILE 43.

      DO I = 1,ND41
       READ(41,*) SIG,(RS(J),J=1,NI)
       WRITE(43,*) SIG,(RS(J),J=1,NI)
      END DO

C  AS OF BESTDOS119.FOR, MUST SAVE 	

C  WRITE THE LAST ND42 DOSE EVENTS (THOSE FROM FILE 42) TO FILE 43,

C  BUT INCREASE EACH TIME BY TNEXT. BUT FIRST READ FILE 42 DOWN TO
C  WHERE THE DOSE EVENTS OCCUR.

   60 READ(42,1) READLINE
      IF(READLINE(5:15) .NE. 'TIME, IV/PO') GO TO 60

      DO I = 1,ND42
       READ(42,*) SIG,(RS(J),J=1,NI)
       WRITE(43,*) SIG + TNEXT,(RS(J),J=1,NI)
      END DO	


C  ALL 3 FILES ARE AT THE END OF THEIR DOSE EVENTS. WRITE THE LINES
C  DOWN TO THE LINE WITH THE TOTAL NO. OF OUTPUT EQS. TO FILE 43,
C  INCLUDING THIS LINE.

   40 READ(41,1) READLINE
      IF(READLINE(12:23) .NE. 'NO. OF TOTAL') THEN
       WRITE(43,1) READLINE
       GO TO 40
      ENDIF

      WRITE(43,1) READLINE

C  BACKSPACE FILE 41 AND READ THE NO. OF OUTPUT EQS.

      BACKSPACE(41)
      READ(41,3) NUMEQT41

C  AS OF BESTDOS110.FOR, SAVE THE OBSERVED VALUE TIMES FROM THE
C  "PAST" INTO AN ARRAY THAT WILL BE PROVIDED BY COMMON/TOCALCTP TO
C  SUBROUTINE CALCTPRED. THESE VALUES ARE NOT NEEDED IN THE WRITING OF
C  FILE 43 IN THIS ROUTINE, BUT THEY WILL BE NEEDED IN SUBROUTINE
C  CALCTPRED.

      READ(41,3) M41

      DO I = 1,M41
       READ(41,*) TIM41(I)              
      END DO	


C  READ THESE SAME VALUES FROM FILE 42.

   50	READ(42,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF TOTAL') GO TO 50
	BACKSPACE(42)
      READ(42,3) NUMEQT42
      NUMEQT = NUMEQT42

      READ(42,3) M42

C  VERIFY THAT FILE 42 HAS THE SAME NO. OF OUTPUT EQS. AS FILE 41.
C  IF NOT, WRITE A MESSAGE TO THE USER AND STOP.

      IF(NUMEQT42 .NE. NUMEQT41) THEN



      WRITE(*,128) NUMEQT41,NUMEQT42
  128 FORMAT(' YOUR PATIENT DATA FILE WHICH HAS THE "PAST" HISTORY OF'/
     1' THE SUBJECT HAS ',I3,' OUTPUT EQS., BUT THE FILE WITH THE'/
     2' "FUTURE" FOR THIS SUBJECT HAS ',I3,' OUTPUT EQS. THE NO. OF'/
     3' OUTPUT EQS. MUST BE THE SAME IN THESE TWO FILES. THE PROGRAM'/
     4' IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,128) NUMEQT41,NUMEQT42
        CLOSE(47)



       CALL PAUSE
       STOP



      ENDIF



C  VERIFY THAT THE NO. OF OUTPUT EQS. IS NOT .GT. MAXNUMEQ.

      IF(NUMEQT41 .GT. MAXNUMEQ) THEN



       WRITE(*,129) MAXNUMEQ
  129  FORMAT(/' YOUR PATIENT DATA FILES HAVE TOO MANY OUTPUT EQUATION'/
     1' COLUMNS. THIS NO. CANNOT EXCEED ',I2,'. THE PROGRAM IS NOW '/
     2' STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,129) MAXNUMEQ
        CLOSE(47)



       CALL PAUSE
       STOP



      ENDIF

C  NOTE THAT THE NO. OF OBSERVED VALUES IS M, WHICH
C  FOR THIS PATIENT WILL BE M42 (I.E., ONLY THE OBSERVED VALUES FROM
C  THE "FUTURE" WILL BE PUT INTO FILE 43).

      M = M42

C  WRITE M AS THE NO. OF OBSERVED VALUE TIMES TO FILE 43, AFTER
C  VERIFYING THAT THIS NO. IS .LE. MAXOBDIM (THE MAXIMUM ALLOWED).


      IF(M .GT. MAXOBDIM) THEN



       WRITE(*,131) M,MAXOBDIM
  131  FORMAT(' THE PATIENT DATA FILE WHICH IS THE "FUTURE" OF THE '/
     1' SUBJECT HAS ',I4,' OBSERVED VALUES, MORE THAN THE MAXIMUM'/
     2' ALLOWED VALUE OF ',I4,'. THE PROGRAM IS NOW STOPPING. '/)

        OPEN(47,FILE=ERRFIL)
         WRITE(47,131) M,MAXOBDIM
        CLOSE(47)



	 CALL PAUSE
	 STOP



	ENDIF


C  WRITE THE LINE WITH THE NO. OF OBSERVED VALUE TIMES TO FILE 43.
C  THEN WRITE THE M = M42 OBSERVED VALUES FROM FILE 42, ALONG WITH
C  THE CORRESPONDING TIMES, BUT INCREASE EACH TIME BY TNEXT.

      WRITE(43,14) M
   14 FORMAT(I6,' ... NO. OF OBSERVED VALUE TIMES')

      DO I = 1,M
       READ(42,*) TIM,(YO(J),J=1,NUMEQT)
       WRITE(43,*) TIM + TNEXT,(YO(J),J=1,NUMEQT)
      END DO	

C  NOW COPY THE REST OF FILE 42 (WHICH INCLUDES THE COVARIATE NAMES,
C  AND VALUES, AND THE ASSAY COEFFICIENTS) TO FILE 43.


   70	READ(42,1,IOSTAT=IEND) READLINE
	IF(IEND .LT. 0) GO TO 100
	WRITE(43,1) READLINE
	GO TO 70

  100	CLOSE(43)
      CLOSE(42)
      CLOSE(41)

	RETURN
	END

C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE INSPECTOBS(MAXOBDIM,IPRIOROBS)

C  INSPECTOBS IS CALLED BY MAIN TO READ FILE 21 AND RETURN 1 IF THERE
C  ARE NON-MISSING OBSERVATIONS, AND 0 OTHERWISE.

      IMPLICIT REAL*8(A-H,O-Z)

      PARAMETER(MAXNUMEQ=7)
      DIMENSION YO(MAXOBDIM,MAXNUMEQ)
      CHARACTER READLINE*1000

    1 FORMAT(A1000)
    3 FORMAT(T2,I5)

C  READ DOWN TO THE OBSERVATIONS ... TO THE LINE WITH 
C  'NO. OF TOTAL' AS ENTRIES 12:23. 

   10	READ(21,1) READLINE
	IF(READLINE(12:23) .NE. 'NO. OF TOTAL') GO TO 10

C  BACKSPACE AND READ THE NO. OF OUTPUT EQS. AND THEN READ THE
C  NO. OF OBSERVED VALUE TIMES.

      BACKSPACE(21)
      READ(21,3) NUMEQT
      READ(21,3) M

      DO I = 1,M
       READ(21,*) TIM,(YO(I,J),J=1,NUMEQT)
      END DO

C  DEFAULT IPRIOROBS = 0. IT WILL CHANGE TO BE 1 IF ANY OF THE
C  OBSERVED VALUES ARE NOT MISSING (I.E., NOT = -99).

C  NOTE THAT ISAME, RETURNED FROM CALL TO THESAME, IS 1 IF THE TWO
C  ARGUMENTS ARE WITHIN 1.D-10 OF EACH OTHER (I.E., VIRTUALLY THE SAME
C  VALUE); OTHERWISE IT RETURNS AS 0.

      IPRIOROBS = 0

      DO I =1,M
       DO J = 1,NUMEQT
        CALL THESAME(YO(I,J),-99.D0,ISAME)
        IF(ISAME .EQ. 0) IPRIOROBS = 1
       END DO
      END DO

      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C??? AFTER FINISHING THIS ROUTINE, WILL HAVE TO MODIFY CALCTPRED2
CIN A SIMILAR WAY I THINK SINCE IT IS ALSO BASED ON FILD37, WHICH
CHAS STEADY STATE DOSE SETS POSSIBLE IN THE PAST.




      SUBROUTINE CALCTPRED(IDELTA,NOBSER,TNEXT,NUMT,TPRED,TPREDREL)
C??? TPREDREL ADDED ABOVE. 7/4.

	IMPLICIT REAL*8(A-H,O-Z)

       PARAMETER(MAXNUMEQ=7)

      DIMENSION TPRED(72000),TIM(594),SIG(5000),RS(5000,34),
     1  BS(5000,7),YOO(594,MAXNUMEQ),TVECT(72000),TIM41(594),
     2  TPREDREL(72000)
C??? TPREDREL ADDED ABOVE. 7/4.

        COMMON/OBSER/ TIM,SIG,RS,YOO,BS
        COMMON/CNST/ N,ND,NI,NUP,NUIC,NP
        COMMON/TOCALCTP/M41,TIM41

C??? EDITED COMMENTS BELOW. 7/4.
C  AS OF BESTDOS119.FOR, THE LOGIC OF CALCTPRED FROM BESTDOS108.FOR
C  IS PUT BACK INTO THIS ROUTINE. THAT LOGIC ALLOWED STEADY STATE
C  DOSE SETS (AND TIME RESETS, ALTHOUGH THERE WILL BE NO TIME RESETS
C  FOR THE TIME BEING AT LEAST). NOTE THERE CAN BE AT MOST 1 STEADY
C  STATE DOSE SET, AND IT HAS TO BE AT THE BEGINNING OF THE PATIENT
C  FILE IF IT OCCURS.

C  NOTE THAT THE LOGIC OF ADDING OBSERVATION AND DOSE TIMES TO THE
C  REGULAR PREDICTED TIMES (WHICH ARE IDELTA/60 HOURS APART) IS 
C  TEMPORARILY REMOVED ... IT CAN BE PUT BACK IN AFTER VERIFYING THAT
C  THE REGULAR PREDICTED TIMES GET PUT IN PROPERLY.


C  THIS ROUTINE IS CALLED BY MAIN TO CALCULATE THE NUMT TIMES TO BE 
C  PUT INTO TPRED. THESE WILL BE THE REGULAR PREDICTED
C  TIMES WHICH START AT 0, ARE IDELTA/60 HOURS APART, AND CONTINUE UNTIL
C  24 HOURS AFTER THE LAST OBSERVATION TIME, ALONG WITH ALL THE DOSE AND
C  ALL THE OBSERVATION TIMES (REDUNDANT TIMES WILL BE IGNORED OF 
C  COURSE). <-- FOR NOW SKIP THE DOSE AND OBSERVATION TIMES.

C  NOTE THAT THE REGULAR TIMES ARE TO BE IDELTA MINUTES APART, SUBJECT
C  TO THE CONSTRAINT THAT THE MAXIMUM NO. OF TIMES BE 72000.
C  BUT NOTE BELOW THAT THE TIMES IN TPRED ARE IN HOURS, NOT MINUTES.
C  AND NOTE IF A STEADY STATE DOSE SET OCCURS AT THE BEGINNING OF A 
C  PATIENT FILE (THE ONLY PLACE IT CAN OCCUR IN THIS PROGRAM), TIMES IN
C  TPRED WILL START AT THE END OF IT, RATHER THAN AT 0.

C  FOR EXAMPLE, IF THERE IS A STEADY STATE DOSE SET WITH INTERDOSE
C  INTERVAL = DOSEINT, THEN THE TIMES WILL START AT 100*DOSEINT
C  (SINCE EACH STEADY STATE DOSE SET IS ASSUMED TO HAVE 100 DOSES).
C  AS A SPECIFIC EXAMPLE, IF A STEADY STATE DOSE SET WITH INTERDOSE
C  INTERVAL OF 2 HOURS STARTS AT TIME 0 AND THE 1ST OBS. TIME IS AT
C  205, IT REALLY MEANS THAT THE OBSERVATIONS START 5 HOURS AFTER THE
C  END OF THE STEADY STATE DOSE SET. IN THIS CASE, THE TIMES IN TPRED
C  STILL START AT 200. 

C  BUT, ALSO ESTABLISH TPREDREL(.) WHICH IS SIMILAR
C  TO TPRED, BUT HAS "RELATIVE" INSTEAD OF "REAL" TIMES AFTER STEADY
C  STATE DOSES. IN THE EXAMPLE ABOVE WITH AN INTERDOSE INTERVAL OF 2 
C  HOURS, THE TPRED(.) VALUES START AT 200 AND THE TPREDREL(.) VALUES
C  START AT 0. AND EACH TPREDREL(I) = TPRED(I) - 200.

C  !!! AS OF BESTDOS119.FOR, TPRED VALUES WILL START AT 0 UNLESS THE
C  CORRESPONDING DOSES FOR THIS TIME BLOCK START WITH A STEADY STATE
C  SET. IN THAT CASE, THE TPRED VALUES WILL START FROM THE END OF THE
C  STEADY STATE SET. THE STARTING DOSE TIME IS IN SIG(1). IF
C  THIS VALUE IS < 0, IT REPRESENTS THE START OF A STEADY STATE DOSE
C  SET, WITH INTERDOSE INTERVAL = -SIG(1). OTHERWISE, SIG(1) SHOULD
C  BE 0 (I.E., IF THERE IS NO STEADY STATE SET).

C  NOTE THAT, AS INDICATED ABOVE, THE TPREDREL VALUES WILL ALWAYS START
C  AT 0.
  
      TBEG = 0.D0
      IF(SIG(1) .LT. 0.D0) TBEG = 100.D0*(-SIG(1))



C  THERE ARE NOBSER OBSERVATION TIMES IN TIM. SET TIMMAX TO THE LAST
C  ONE, WHICH IS THE LARGEST, AND THEN SET T_END = 24 HOURS AFTER
C  TIMMAX.

      TIMMAX = TIM(NOBSER)
      T_END = TIMMAX + 24.D0
     
C  PUT THE REGULAR TIMES IN TVECT; THEY START AT TBEG AND END AT T_END,
C  AND ARE IDELTA/60 HOURS APART. SO THERE WILL BE 
C  (T_END - TBEG)*60/IDELTA + 1 OF THEM. NOTE THAT IF 60/IDELTA IS NOT
C  AN INTEGER, THE ENDING TIME WILL BE A LITTLE DIFFERENT THAN EXACTLY
C  24 HOURS AFTER TIMMAX.

	NUMT2 = (T_END - TBEG)*60/IDELTA

      NUMTT = 1
      TVECT(NUMTT) = TBEG



      DO I=1,NUMT2
       NUMTT = NUMTT + 1
       TVECT(NUMTT) = TVECT(NUMTT-1) + IDELTA/60.D0
      END DO


C  AS IF BESTDOS109.FOR, ADD INTO TVECT ALL THE OBSERVATION AND DOSE
C  TIMES. THEN CALL PUTORDER TO ORDER ALL THE TIMES IN TVECT; AND
C  FINALLY, REMOVE ALL DUPLICATE TIMES.

      DO I = 1,NOBSER
       NUMTT = NUMTT + 1
       TVECT(NUMTT) = TIM(I)


      END DO

C  ADD IN THE DOSE TIMES, BUT ONLY THOSE THAT OCCUR AFTER TBEG. FOR
C  EXAMPLE, IF SIG(1) = -2 (INDICATING A STEADY STATE DOSE SET WHICH
C  ENDS AT TBEG = 200, THEN WE WANT TO ADD ONLY THOSE DOSE TIMES THAT
C  OCCUR AFTER THE END OF THIS STEADY STATE DOSE SET.

      DO I = 1,ND
       IF(SIG(I) .GT. TBEG) THEN
        NUMTT = NUMTT + 1
        TVECT(NUMTT) = SIG(I)
       ENDIF
      END DO



C  AS OF BESTDOS110.FOR, ALSO ADD INTO TVECT THE OBSERVATION TIMES
C  FROM THE "PAST".

C  NOTE THAT THE NOBSER OBSERVATION TIMES IN TIM(.) ADDED ABOVE TO
C  TVECT WERE JUST FROM THE "FUTURE", BECAUSE THESE VALUES WERE 
C  FILLED IN SUBROUTINE FILRED, WHEN IT READ FILE 37 (AND FILE 37
C  WAS EITHER JUST THE "FUTURE" IF INCLUDPAST = 0 IN MAIN; OR 
C  WAS "BOTHFILES.ZPJ", CREATED BY SUBROUTINE MAKETMP IF THERE WAS
C  A "PAST", AND "BOTHFILES.ZPJ DOES NOT INCLUDE "PAST" OBSERVATIONS).

C  NOTE THAT IF INCLUDPAST = 0 IN MAIN, THEN M41 WAS SET = 0. IN THIS
C  CASE, OF COURSE, THERE ARE NO TIMES TO ADD SINCE THERE WAS NO
C  "PAST" HISTORY.N

C  NOTE THAT SIG(1) = 0 MEANS THAT THE PATIENT DOES NOT HAVE ITS 
C  REGIMEN BEGINNING WITH A STEADY STATE DOSE SET. BUT SIG(1) < 0
C  MEANS THAT THE REGIMEN DOES BEGIN WITH A STEADY STATE DOSE SET.
C  IN THIS CASE, THE TIM41(.) VALUES REFER TO TIMES AFTER THE END OF
C  THE STEADY STATE DOSES. I.E., THEY SHOULD BE INCREASED BY
C  100*(-SIG(1)). 

C  EX: SIG(1) = -2.0 AND TIM(.) = 5, 10, 20 --> THESE TIMES ARE
C  ACTUALLY AT REAL TIMES 205, 210, AND 220. 
C  SO ADD 100*(-SIG(1)) TO ALL OBS. TIMES IN TIM41(.) IF SIG(1) < 0.
 


      IF(M41 .GT. 0) THEN
       DO I = 1,M41
        NUMTT = NUMTT + 1
        IF(SIG(1) .LT. 0.D0) TVECT(NUMTT) = TIM41(I) - 100.D0*SIG(1)
        IF(SIG(1) .GE. 0.D0) TVECT(NUMTT) = TIM41(I) 
       END DO
      ENDIF

C  ADD IN THE TIME WHICH STARTS THE "FUTURE". THIS IS TNEXT IF
C  THERE IS NO STEADY STATE DOSE SET TO START THE PATIENT FILE, OR
C  TNEXT + 100*(-SIG(1)) OTHERWISE. ACTUALLY THIS LATTER FORMULA
C  WORKS REGARDLESS, SINCE SIG(1) = 0 IF THESE IS NO STEADY STATE
C  DOSE SEST.

      NUMTT = NUMTT + 1
      TVECT(NUMTT) = TNEXT - 100.D0*SIG(1)

C  ORDER ALL THE TIMES IN TVECT.

      CALL PUTORDER(NUMTT,TVECT) 

C  THE NUMTT VALUES ARE NOW ORDERED IN TVECT. NOW REMOVE DUPLICATE
C  TIMES BELOW. NUMT WILL BE THE RUNNING NO. OF TIMES CURRENTLY
C  STORED INTO TVECT, WHEN DUPLICATE TIMES ARE IGNORED.

      TIMELAST = -1.D39

      NUMT = 0

      DO I = 1,NUMTT

       TIME = TVECT(I)
       CALL THESAME(TIME,TIMELAST,ISAME)

C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, TIME = TIMELAST (OR AT
C  LEAST, THEY ARE WITHIN 1.D-10), AND THIS TIME CAN BE IGNORED SINCE IT
C  WAS ALREADY PUT INTO TVECT BY A PREVIOUS TIME.

       IF(ISAME .EQ. 1) GO TO 30

C  TO GET HERE, ISAME = 0, WHICH MEANS THIS IS A NEW TIME. SO PUT
C  TIME INTO TVECT. THEN SET TIMELAST = TIME AND CONTINUE THE LOOP.

       NUMT = NUMT + 1
       TVECT(NUMT) = TIME
       TIMELAST = TIME

   30  CONTINUE

      END DO
C  THE ABOVE END DO IS FOR THE  DO I = 1,NUMTT  LOOP.


C  NOW STORE THESE NUMT TIMES INTO TPRED, BUT IF NUMT IS > 72000, 
C  ONLY STORE THE FIRST 72000, AND WRITE MESSAGE TO THE SCREEN AND
C  THE OUTPUT FILE. ALSO ESTABLISH TPREDREL(.) WHICH ARE THE TIMES
C  RELATIVE TO THE END OF A STEADY STATE DOSE SET IF THERE IS ONE.

      IF(NUMT .GT. 72000) THEN

       DO I = 1,72000
        TPRED(I) = TVECT(I)
        TPREDREL(I) = TPRED(I) - TBEG
       END DO

       WRITE(*,2031) 
       WRITE(56,2031)


 2031 FORMAT(//' THE MAXIMUM NO. OF PREDICTED VALUES HAS BEEN REACHED.'/
     1' THIS MEANS THERE WILL NOT BE A COMPLETE SET OF PREDICTED '/
     2' VALUES FOR EACH GRID PT. IN THE OUTPUT FILE.'/)

       NUMT = 72000
       RETURN

      ENDIF
C  THE ABOVE ENDIF IS FOR THE  IF(NUMT .GT. 72000)  CONDITION.


C  NOW ASSIGN TPRED VALUES IF NUMT .LE. 72000. IN THIS CASE, THERE WILL

C  BE NO WARNING MESSAGE TO THE SCREEN OR THE OUTPUT FILE.


       DO I = 1,NUMT
        TPRED(I) = TVECT(I)
        TPREDREL(I) = TPRED(I) - TBEG
       END DO



      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE CALCTPRED2(NOBSER,TNEXT,IDELTA,NUMT,TPRED)

	IMPLICIT REAL*8(A-H,O-Z)

       PARAMETER(MAXNUMEQ=7)

      DIMENSION TPRED(72000),TIM(594),SIG(5000),RS(5000,34),
     1  BS(5000,7),YOO(594,MAXNUMEQ),TVECT(72000),TIM41(594)

       CHARACTER ERRFIL*20

      COMMON/ERROR/ERRFIL
C  COMMON/ERROR/ IS SUPPLIED TO ALL THE ROUTINES WHICH COULD WRITE TO
C  ERRFIL. AND ERRFIL IS MADE CHARACTER *20 ABOVE.

        COMMON/OBSER/ TIM,SIG,RS,YOO,BS

C  THIS ROUTINE IS CALLED BY WSUMSQ TO CALCULATE THE NUMT TIMES TO BE 
C  PUT INTO TPRED. THESE SHOULD BE A RICH SET OF TIMES BETWEEN TBEG AND
C  THE LAST OBSERVED VALUE TIME, ALONG WITH ALL THE NOBSER OBSERVATION 
C  TIMES (REDUNDANT TIMES WILL BE IGNORED OF COURSE).

C  NOTE THAT THE TIMES IN TPRED WILL BE IDELTA MINUTES APART, BETWEEN
C  TBEG AND THE LAST OBS. TIME, ALONG WITH THE OBS. TIMES THEMSELVES.

C  !!! AS OF BESTDOS119.FOR, THE CODE WILL ALLOW FOR A STEADY STATE
C  DOSE SET AT THE BEGINNING OF THE PATIENT FILE. SO TPRED VALUES WILL
C  START AT 0 UNLESS THE CORRESPONDING DOSES FOR THIS TIME BLOCK START
C  WITH A STEADY STATE SET. IN THAT CASE, THE TPRED VALUES WILL START
C  FROM THE END OF THE STEADY STATE SET. THE STARTING DOSE TIME IS IN
C  SIG(1). IF THIS VALUE IS < 0, IT REPRESENTS THE START OF A STEADY
C  STATE DOSE SET, WITH INTERDOSE INTERVAL = -SIG(1). OTHERWISE, SIG(1)
C  SHOULD BE 0 (I.E., IF THERE IS NO STEADY STATE SET).

C  THE LAST OBSERVATION TIME IS TIM(NOBSER). SINCE THE TIMES IN TPRED
C  WILL BE IDELTA MINUTES APART, THE NO. OF TIMES WILL BE 
C  TIM(OBSER)*60/IDELTA + 1, ALONG WITH ANY ADDITIONAL OBSERVATION 
C  TIMES.

      TBEG = 0.D0
      IF(SIG(1) .LT. 0.D0) TBEG = 100.D0*(-SIG(1))

C  THERE ARE NOBSER OBSERVATION TIMES IN TIM. SET TIMMAX TO THE LAST
C  ONE, WHICH IS THE LARGEST.

      TIMMAX = TIM(NOBSER)
     
C  PUT THE REGULAR TIMES IN TVECT; THEY START AT TBEG AND END AT 
C  TIMMAX, AND ARE IDELTA/60 HOURS APART. SO THERE WILL BE 
C  (TIMMAX - TBEG)*60/IDELTA + 1 OF THEM. NOTE THAT IF 60/IDELTA IS NOT
C  AN INTEGER, THE ENDING TIME WILL BE A LITTLE DIFFERENT THAN EXACTLY
C  TIMMAX.

	NUMT2 = (TIMMAX - TBEG)*60/IDELTA
      NUMTT = 1
      TVECT(NUMTT) = TBEG

      DO I=1,NUMT2
       NUMTT = NUMTT + 1
       TVECT(NUMTT) = TVECT(NUMTT-1) + IDELTA/60.D0
      END DO


C  NOW ADD INTO TVECT ALL THE OBSERVATION TIMES.

      DO I = 1,NOBSER
       NUMTT = NUMTT + 1
       TVECT(NUMTT) = TIM(I)
      END DO


C  ADD IN THE TIME WHICH STARTS THE "FUTURE". THIS IS TNEXT IF
C  THERE IS NO STEADY STATE DOSE SET TO START THE PATIENT FILE, OR
C  TNEXT + 100*(-SIG(1)) OTHERWISE. ACTUALLY THIS LATTER FORMULA
C  WORKS REGARDLESS, SINCE SIG(1) = 0 IF THESE IS NO STEADY STATE
C  DOSE SEST.

      NUMTT = NUMTT + 1
      TVECT(NUMTT) = TNEXT - 100.D0*SIG(1)


C  CALL PUTORDER TO ORDER ALL THE TIMES IN TVECT.

      CALL PUTORDER(NUMTT,TVECT)

C  THE NUMTT VALUES ARE NOW ORDERED IN TVECT. NOW REMOVE DUPLICATE
C  TIMES BELOW. NUMT WILL BE THE RUNNING NO. OF TIMES CURRENTLY
C  STORED INTO TVECT, WHEN DUPLICATE TIMES ARE IGNORED.

      TIMELAST = -1.D39

      NUMT = 0

      DO I = 1,NUMTT

       TIME = TVECT(I)
       CALL THESAME(TIME,TIMELAST,ISAME)

C  IF ISAME RETURNS FROM SUBROUTINE THESAME AS 1, TIME = TIMELAST (OR AT
C  LEAST, THEY ARE WITHIN 1.D-10), AND THIS TIME CAN BE IGNORED SINCE IT
C  WAS ALREADY PUT INTO TVECT BY A PREVIOUS TIME.

       IF(ISAME .EQ. 1) GO TO 30

C  TO GET HERE, ISAME = 0, WHICH MEANS THIS IS A NEW TIME. SO PUT
C  TIME INTO TVECT. THEN SET TIMELAST = TIME AND CONTINUE THE LOOP.

       NUMT = NUMT + 1

C  IF NUMT > 72000, STOP THE PROGRAM WITH A MESSAGE TO THE USER.

       IF(NUMT .GT. 72000) THEN

        WRITE(*,2031) 
        WRITE(56,2031)
 2031  FORMAT(//' THE MAXIMUM NO. OF PREDICTED VALUES HAS BEEN REACHED'/
     1' IN SUBROUTINE CALCTPRED2. THE PROGRAM STOPS. PLEASE RERUN '/
     2' AFTER SETTING IDELTA TO A LARGER NUMBER, OR REDUCING THE '/
     3' LAST OBSERVATION TIME IN THE "FUTURE" FILE.'/)
 
        OPEN(47,FILE=ERRFIL)
         WRITE(47,2031)          
        CLOSE(47)

        CALL PAUSE
        STOP
    
       ENDIF


       TVECT(NUMT) = TIME
       TIMELAST = TIME

   30  CONTINUE

      END DO
C  THE ABOVE END DO IS FOR THE  DO I = 1,NUMTT  LOOP.


C  NOW STORE THESE NUMT TIMES INTO TPRED.

       DO I = 1,NUMT
        TPRED(I) = TVECT(I)
       END DO


      RETURN
      END

