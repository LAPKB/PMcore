searchState.loadedDescShard("pmcore", 0, "PMcore is a framework for developing and running …\nContains the error value\nA hash map implemented with quadratic probing and SIMD …\nContains the success value\ntype alias for <code>Result&lt;T, Report&gt;</code>\nProvides the various algorithms used within the framework\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nEntry points for external use of the framework.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nExamples\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nLogger functionality for the framework using tracing\nCreates an empty <code>HashMap</code>.\nA collection of commonly used items to simplify imports.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRoutines for the crate\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTerminal-based user interface components.\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nPrimary entrypoint for PMcore\nSimulate predictions from a model and prior distribution\nAlternative entrypoint, primarily meant for third-party …\nSetup logging for the library\nAn instantaenous input of drug\nA Covariate is a collection of CovariateSegments, which …\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nContains the error value\nAn Event can be a Bolus, Infusion, or Observation\nA hash map implemented with quadratic probing and SIMD …\nA continuous dose of drug\nAn observation of drug concentration or covariates\nAn Occasion is a collection of events, for a given Subject…\nContains the success value\ntype alias for <code>Result&lt;T, Report&gt;</code>\nSubject is a collection of blocks for one individual\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Covariate is a collection of CovariateSegments, which …\nCovariates is a collection of Covariate\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nAn Event can be a Bolus, Infusion, or Observation\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nRead a Pmetrics datafile and convert it to a Data object\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn instantaenous input of drug\nAn Event can be a Bolus, Infusion, or Observation\nA continuous dose of drug\nAn observation of drug concentration or covariates\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nPrediction holds an observation and its prediction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData is a collection of Subjects, which are collections of …\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nRoutines for condensing grids\nRoutines for expanding grids\nRoutines for initializing the grid\nRoutines for writing results to file, such as predicted …\nProvides routines for reading and parsing settings\nPrunes the <code>theta</code> array based on the <code>candidate</code> array and …\nInterior point method for solving the optimization problem\nApplies the Burke’s Interior Point Method (IPM) to solve …\nApplies the Burke’s Interior Point Method (IPM) to solve …\nImplements the adaptive grid algorithm for support point …\nGenerates a 2-dimensional array containing Latin Hypercube …\nGenerates a 2-dimensional array containing a Sobol …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the result objects from a run An NPCycle contains …\nDefines the result objects from an NPAG run An NPResult …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new NPResult object\nWrite the observations, which is the reformatted input data\nWrites the posterior support points for each individual\nWrites the predictions\nWrites theta, which containts the population support …\nGeneral configuration settings\nParameters which are held constant\nDefines the error model and polynomial to be used\nParameters which are estimated, but fixed for the …\nThis struct contains the paths to the data, log and prior …\nRandom parameters to be estimated\nContains all settings for PMcore\nIf true (default), cache predicted values\nGeneral configuration settings\nParameters which are held constant\nMaximum number of cycles\nPath to the data file, see <code>datafile::parse</code> for details.\nDenotes the algorithm to use, <code>NPAG</code> is the only supported …\nDefines the error model and polynomial to be used\nVector if IDs to exclude\nParameters which are estimated, but fixed for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the upper and lower bounds of a random parameter from …\nThe interval (in hours) at which to generate output …\nDefault number of points in the initial grid\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf provided, the log file will be written to this path.\nMaximum log level for the logger\nReturns a vector of the names of the random parameters\nIf true (default), write outputs to files. Output path is …\nIf provided, and Config::output is true, PMcore will write …\nParses the output folder location If a <code>#</code> symbol is found, …\nPaths to the data, log and prior files\nIf provided, PMcore will use this prior instead of a “…\nRandom parameters to be estimated\nReturns a vector of the upper and lower bounds of the …\nParses the settings from a TOML configuration file\nDefault seed for the initialization\nGenerate predictions at Config::idelta intervals to this …\nValidate the boundaries of the random parameters\nWrites a copy of the parsed settings to file\nThe main application, containing the state\nHandle a user action\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the Terminal User Interface (TUI) for PMcore\nWe define all available action\nThe application should have some contextual actions.\nGet contextual actions. (just for building a help view)\nGiven a key, find the corresponding action\nReturns the argument unchanged.\nBuild contextual action\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll available actions\nList of key associated to action\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA small event handler that wrap crossterm input and tick …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs an new instance of <code>Events</code> with the default …\nBackspace key\nDelete key\nDown arrow\nEnd key\nBoth Enter (or Return) and numpad Enter\nEscape key\nF0 key\nF1 key\nF10 key\nF11 key\nF12 key\nF2 key\nF3 key\nF4 key\nF5 key\nF6 key\nF7 key\nF8 key\nF9 key\nHome key\nInsert key\nRepresents an key.\nLeft arrow\nPage Down key\nPage Up key\nRight arrow\nTabulation key\nUp arrow\nReturns the argument unchanged.\nReturns the function key corresponding to the given number\nCalls <code>U::from(self)</code>.\nIf exit\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")