searchState.loadedDescShard("pmcore", 0, "PMcore is a framework for developing and running …\nContains the error value\nA hash map implemented with quadratic probing and SIMD …\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nProvides the various algorithms used within the framework\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which uses a closure to determine if …\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nA collection of commonly used items to simplify imports.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRoutines\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPosterior probability algorithm Reweights the prior …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn instantaenous input of drug\nA Covariate is a collection of CovariateSegments, which …\nA CovariateSegment is a segment of the piece-wise …\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nContains the error value\nAn Event can be a Bolus, Infusion, or Observation\nA hash map implemented with quadratic probing and SIMD …\nA hash map implemented with quadratic probing and SIMD …\nA continuous dose of drug\nThis structs holds the metadata of the model\nAn observation of drug concentration or covariates\nAn Occasion is a collection of events, for a given Subject…\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nSubject is a collection of blocks for one individual\nAdd a Subject to the Data\nGet the amount of the bolus, often the dose\nGet the total amount of drug provided over the infusion\nConstruct a dynamic matrix directly from data.\nGet the duration of the infusion\nGet the error polynomial coefficients of the observation\nEstimate the likelihood of the subject given the support …\nExpand the data by adding observations at intervals of …\nFilter the Data to exclude the Subjects with IDs in the …\nFilter the Data to include only the Subjects with IDs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Subject from one or more Occasions\nGet the parameters of the model\nGet a vector of references to all Subjects in the Data\nGet the ID of the Subject\nGet whether the observation should be ignored\nGet the index of the occasion\nGet the input compartment of the bolus, i.e. the …\nGet the input compartment of the infusion, i.e. the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Data object from a vector of Subjects\nCreate a new Meta struct\nGet a vector of references to all Occasions in the Subject\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nGet the output equation number of the observation\nGet the time of the bolus\nGet the start time of the infusion\nGet the time of the observation\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nGet the value of the observation, e.g. drug concentration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Covariate is a collection of CovariateSegments, which …\nA CovariateSegment is a segment of the piece-wise …\nCovariates is a collection of Covariate\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nAn Event can be a Bolus, Infusion, or Observation\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nRead a Pmetrics datafile and convert it to a Data object\nAn instantaenous input of drug\nAn Event can be a Bolus, Infusion, or Observation\nA continuous dose of drug\nAn observation of drug concentration or covariates\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nAn instantaenous input of drug\nA Covariate is a collection of CovariateSegments, which …\nA CovariateSegment is a segment of the piece-wise …\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nAn Event can be a Bolus, Infusion, or Observation\nA continuous dose of drug\nAn observation of drug concentration or covariates\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nA Covariate is a collection of CovariateSegments, which …\nA CovariateSegment is a segment of the piece-wise …\nCovariates is a collection of Covariate\nCovariates is a collection of Covariate\nData is a collection of Subjects, which are collections of …\nAn Event can be a Bolus, Infusion, or Observation\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nRead a Pmetrics datafile and convert it to a Data object\nAn instantaenous input of drug\nAn Event can be a Bolus, Infusion, or Observation\nA continuous dose of drug\nAn observation of drug concentration or covariates\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nPrediction holds an observation and its prediction\nEstimate the likelihood of the subject given the support …\nThis structs holds the metadata of the model\nEstimate the likelihood of the subject given the support …\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nThis structs holds the metadata of the model\nData is a collection of Subjects, which are collections of …\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nPrediction holds an observation and its prediction\nEstimate the likelihood of the subject given the support …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis structs holds the metadata of the model\nEstimate the likelihood of the subject given the support …\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nThis structs holds the metadata of the model\nData is a collection of Subjects, which are collections of …\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nPrunes the <code>theta</code> array based on the <code>candidate</code> array and …\nApplies the Burke’s Interior Point Method (IPM) to solve …\nImplements the adaptive grid algorithm for support point …\nThis function reads the prior distribution from a file\nThis function generates the grid of support points …\nGenerates a 2-dimensional array containing Latin Hypercube …\nGenerates a 2-dimensional array containing a Sobol …\nSetup logging for the library\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis holdes a vector of NPCycle objects to provide a more …\nAn NPCycle object contains the summary of a cycle It holds …\nDefines the result objects from an NPAG run An NPResult …\nContains all the necessary information of an output file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new NPResult object\nWrites the covariates\nWrite the observations, which is the reformatted input data\nWrites the observations and predictions to a single file\nWrites the posterior support points for each individual\nWrites the predictions\nWrites theta, which contains the population support points …\nThis struct contains advanced options and hyperparameters\nGeneral configuration settings\nThis struct contains the convergence criteria for the …\nDefines the error model and polynomial to be used\nThe log level, which can be one of the following:\nConfiguration for the output files\nDefines a parameter to be estimated\nThis structure contains information on all Parameters to …\nBuilder for creating a set of parameters\nConfiguration for the prior\nContains all settings for PMcore\nDenotes the algorithm to use\nCreate a new builder for parameters\nIf true (default), cache predicted values\nThe error class, either <code>additive</code> or <code>proportional</code>\nMaximum number of cycles to run\nPrecision convergence criterion for the algorithm\nThe file to write the log to\nOptionally, the path to a file containing the prior in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe interval for which predictions are generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum log level to display\nThe objective function convergence criterion for the …\nThe minimum distance required between a candidate point …\nGet the names of the parameters\nCreate a new settings object with default values\nCreate a new parameter\nCreate a new set of parameters\nMaximum number of steps in Nelder-Mead optimization This …\nParses the output folder location If a <code>#</code> symbol is found, …\nThe (relative) path to write the output files to\nThe number of points to generate for the prior\nThe assay error polynomial\nThe PYL convergence criterion for the algorithm\nGet the ranges of the parameters\nParses the settings from a TOML configuration file\nThe sampler to use for the prior if not supplied\nThe seed for the random number generator\nThe time after the last dose for which predictions are …\nTolerance (in standard deviations) for the Nelder-Mead …\nValidate the settings\nValidate the prediction settings\nThe initial value of <code>gamma</code> or <code>lambda</code>\nWrites a copy of the parsed settings to file The is …\nWhether to write logs\nWhether to write the output files")